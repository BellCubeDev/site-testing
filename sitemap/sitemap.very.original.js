import { componentHandler } from '../assets/site/mdl/material.js';
const cssDetails_ = 'js-bcd-details_';
const cssSummary_ = 'js-bcd-summary_';
window.bcd_init_functions.sitemap = sitemapInit;
const elementsToUpgrade = [];
let prefabItem;
let prefabDir;
let prefabParent;
let obj;
async function sitemapInit() {
    const data = await fetch(`${window.location.href}sitemap.json`);
    obj = await data.json();
    console.debug('Working with object:\n', obj);
    const sitemapContainer = document.getElementById('sitemap');
    prefabParent = document.getElementById('prefabs');
    prefabItem = prefabParent.content.getElementById('prefab-sitemap-item');
    prefabDir = prefabParent.content.getElementById('prefab-sitemap-dir');
    const filteredPages = obj.pages.filter(page => page.layout && page.layout !== 'compress_html' && page.sitemap !== false);
    const splitPagePaths = filteredPages.map(page => {
        return {
            ...page,
            path: page.path.split('/')
        };
    });
    const sortedPages = splitPagePaths.sort((a, b) => {
        const [aPath, bPath] = [[...a.path], [...b.path]];
        const [lastA, lastB] = [aPath.pop(), bPath.pop()];
        while (aPath.length || bPath.length) {
            const [aDir, bDir] = [aPath.shift(), bPath.shift()];
            if (aDir === bDir)
                continue;
            if (!aDir)
                return 1;
            if (!bDir)
                return -1;
            if (aDir !== bDir)
                return aDir.localeCompare(bDir);
        }
        if (lastA === lastB)
            return 0;
        else
            return lastA.localeCompare(lastB) ? 1 : -1;
    });
    for (const page of sortedPages) {
        page.path.pop();
        console.debug('======================================================');
        console.debug('Current file:', page.name);
        console.debug('Working with path:\n', JSON.stringify(page.path));
        let lastDir = sitemapContainer;
        for (const dir of page.path) {
            lastDir = findOrCreateDir(dir, lastDir);
            console.debug('Dir', lastDir);
        }
        const item = prefabItem.cloneNode(true);
        item.removeAttribute('id');
        const a = item.querySelector('.sitemap-item');
        const tempTextCont = (page.formatted_title ?? page.title ?? page.name).trim();
        if (tempTextCont in obj.translation)
            a.textContent = obj.translation[tempTextCont];
        else
            a.textContent = tempTextCont;
        a.setAttribute('href', page.url);
        console.debug('Directory to append within:', lastDir);
        const appendPoint = lastDir.querySelector(':scope > .js-bcd-details_ > .sitemap-dir-items') ?? lastDir;
        console.debug('Adding item', item, 'to', lastDir);
        console.debug('Appending to...', appendPoint);
        appendPoint.appendChild(item);
        lastDir = null;
        console.debug('======================================================');
    }
    const tempDetails = sitemapContainer.querySelectorAll(`.${cssDetails_}`);
    tempDetails.forEach(d => {
        d.classList.remove('js-bcd-details_');
        d?.classList.add('js-bcd-details');
    });
    const tempSummaries = sitemapContainer.querySelectorAll(`.${cssSummary_}`);
    tempSummaries.forEach(s => {
        s.classList.remove(cssSummary_);
        s.classList.add('js-bcd-summary');
    });
    setTimeout(componentHandler.upgradeElements.bind(undefined, elementsToUpgrade));
}
function findOrCreateDir(dir, entryPoint) {
    console.debug('Looking for dir', dir);
    const existingDir = entryPoint.querySelector(entryPoint.id === 'sitemap' ?
        `:scope                    > .sitemap-dir > .js-bcd-summary_ > .sitemap-dir-name[data-dir="${dir}"]`
        : `:scope > .js-bcd-details_ > .sitemap-dir > .js-bcd-summary_ > .sitemap-dir-name[data-dir="${dir}"]`)?.parentElement.parentElement;
    console.debug('Existing dir:', existingDir);
    if (existingDir)
        return existingDir;
    console.debug('Creating new dir:', dir);
    const newDir = prefabDir.cloneNode(true);
    newDir.removeAttribute('id');
    const thisSummary = newDir.querySelector(':scope > .js-bcd-summary_');
    let tempTextCont = dir.trim();
    if (tempTextCont in obj.translation)
        tempTextCont = obj.translation[tempTextCont];
    const thisName = thisSummary.querySelector(':scope > .sitemap-dir-name');
    thisName.textContent = tempTextCont;
    thisName.setAttribute('data-dir', dir);
    const appendPoint = entryPoint.querySelector(':scope > .js-bcd-details_') ?? entryPoint;
    const existingItems = appendPoint.querySelector(':scope > .sitemap-dir-items');
    if (existingItems)
        appendPoint.insertBefore(newDir, existingItems);
    else
        appendPoint.appendChild(newDir);
    elementsToUpgrade.push(...newDir.children);
    return newDir;
}
//# sourceMappingURL=data:application/json;base64,