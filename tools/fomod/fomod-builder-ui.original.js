import * as bcdUniversal from '../../universal.js';
import * as fomod from './fomod-builder.js';
import './fomod-builder-bindings.js';
import './fomod-builder-steps-1st-party.js';
import './fomod-builder-steps-vortex.js';
import './fomod-builder-steps-mo2.js';
import * as bcdFS from '../../filesystem-interface.js';
import * as xml from './fomod-builder-xml-translator.js';
import pluralize_ from '../../included_node_modules/plural/index.js';
const pluralize = pluralize_;
import vkBeautify_ from '../../included_node_modules/vkbeautify/index.js';
const vkBeautify = vkBeautify_;
export function updatePluralDisplay(element, count) {
    element.textContent = count + ' ' + pluralize(element.getAttribute('unitWord') ?? '', count);
}
export var DropdownToLang;
(function (DropdownToLang) {
    DropdownToLang["Explicit"] = "Manual";
    DropdownToLang["Ascending"] = "Alphabetical";
    DropdownToLang["Descending"] = "Reverse Alphabetical";
    DropdownToLang["SelectAny"] = "Allow Any Selections";
    DropdownToLang["SelectAll"] = "Force-Select Everything";
    DropdownToLang["SelectExactlyOne"] = "Require Exactly One Selection";
    DropdownToLang["SelectAtMostOne"] = "Require One or No Selections";
    DropdownToLang["SelectAtLeastOne"] = "Require At Least One Selection";
    DropdownToLang["NotUsable"] = "Not Useable";
    DropdownToLang["CouldBeUsable"] = "Could Be Useable";
})(DropdownToLang || (DropdownToLang = {}));
export var LangToDropdown;
(function (LangToDropdown) {
    LangToDropdown["Manual"] = "Explicit";
    LangToDropdown["Alphabetical"] = "Ascending";
    LangToDropdown["Reverse Alphabetical"] = "Descending";
    LangToDropdown["Allow Any Selections"] = "SelectAny";
    LangToDropdown["Force-Select Everything"] = "SelectAll";
    LangToDropdown["Require Exactly One Selection"] = "SelectExactlyOne";
    LangToDropdown["Require One or No Selections"] = "SelectAtMostOne";
    LangToDropdown["Require At Least One Selection"] = "SelectAtLeastOne";
    LangToDropdown["Not Useable"] = "NotUsable";
    LangToDropdown["Could Be Useable"] = "CouldBeUsable";
})(LangToDropdown || (LangToDropdown = {}));
export function translateDropdown(str) {
    if (typeof str !== 'string')
        return str;
    if (str in DropdownToLang)
        return DropdownToLang[str];
    if (str in LangToDropdown)
        return LangToDropdown[str];
    return str;
}
export class BCDDropdownSortingOrder extends bcdUniversal.BCDDropdown {
    static asString = 'FOMOD Builder - Sorting Order Dropdown';
    static cssClass = 'bcd-dropdown-sorting-order';
    constructor(element) {
        super(element, element.previousElementSibling, true);
    }
    options() {
        return {
            'Manual': null,
            'Alphabetical': null,
            'Reverse Alphabetical': null
        };
    }
}
export class BCDDropdownGroupType extends bcdUniversal.BCDDropdown {
    static asString = 'FOMOD Builder - Group Type Dropdown';
    static cssClass = 'bcd-dropdown-group-type';
    constructor(element) {
        super(element, element.previousElementSibling, true);
    }
    options() {
        return {
            "Allow Any Selections": null,
            "Force-Select Everything": null,
            "Require Exactly One Selection": null,
            "Require One or No Selections": null,
            "Require At Least One Selection": null,
        };
    }
}
export class BCDDropdownOptionState extends bcdUniversal.BCDDropdown {
    static asString = 'FOMOD Builder - Option State Dropdown';
    static cssClass = 'bcd-dropdown-option-state';
    constructor(element) {
        super(element, element.previousElementSibling, true);
    }
    options() {
        return {
            "Optional": null,
            "Recommended": null,
            "Could Be Useable": null,
            "Required": null,
            "Not Useable": null
        };
    }
}
let firstSetEditor = true;
export function setStepEditorType(type) {
    const workingEditors = ['builder'];
    if (!workingEditors.includes(type))
        type = 'builder';
    const thisElem = document.getElementById(`steps-${type}-container`);
    const otherSteps = thisElem.parentElement.querySelectorAll(`.fomod-editor-type:not(#steps-${type}-container)${firstSetEditor ? '' : '.active'}`);
    if (!firstSetEditor && thisElem.classList.contains('.active'))
        return;
    if (type !== 'builder') {
        if (!window.lazyStylesLoaded)
            thisElem.classList.add('needs-lazy');
        else
            thisElem.classList.remove('needs-lazy');
    }
    function transitionPhaseTwo() {
        otherSteps.forEach(e => {
            e.classList.remove('active_');
            e.removeEventListener('transitionend', transitionPhaseTwo);
            e.ariaHidden = 'true';
            e.setAttribute('hidden', '');
        });
        thisElem.classList.add('active_');
        thisElem.ariaHidden = 'false';
        thisElem.removeAttribute('hidden');
        bcdUniversal.nestAnimationFrames(2, () => {
            thisElem.classList.add('active');
        });
    }
    if (otherSteps.length === 0)
        transitionPhaseTwo();
    else {
        otherSteps.forEach(e => {
            e.classList.remove('active');
            e.addEventListener('transitionend', transitionPhaseTwo, { once: true });
        });
        setTimeout(transitionPhaseTwo, 200);
    }
    firstSetEditor = false;
    window.FOMODBuilder.storage.preferences.stepsBuilder = type;
}
export async function showOpenAnotherFolderDialog() {
    const dialog = document.getElementById('opening-other-project-modal').upgrades.getExtends(bcdUniversal.BCDModalDialog)[0];
    const result = await dialog.show();
    if (result !== 'confirm') {
        console.debug(`User cancelled opening another folder with response "${result}"`);
        return false;
    }
    else {
        console.debug(`User confirmed opening another folder with response "${result}"`);
        return true;
    }
}
let tabList = null;
export async function openFolder(test = false) {
    if (loadingFomod.state)
        return;
    if ((window.FOMODBuilder.directory || window.FOMODBuilder.trackedFomod) && !await showOpenAnotherFolderDialog())
        return;
    if (test) {
        loadingFomod.state = true;
        window.loadTestFOMOD();
        postLoad();
        return;
    }
    if ('showDirectoryPicker' in window)
        return await openFolder_entry();
    postLoad(false);
    console.warn('No directory picker available for your system!');
    fomod.getNoSupportModal()?.show();
}
export async function postLoad(loaded = true) {
    await bcdUniversal.wait(100);
    loadingFomod.state = false;
    tabList ??= document.getElementById('tablist');
    if (loaded) {
        tabList.removeAttribute('disabled');
        tabList.classList.remove('tabs-list-container--hidden');
    }
    else {
        tabList.setAttribute('disabled', '');
        tabList.classList.add('tabs-list-container--hidden');
    }
}
export const loadingFomod = { state: false };
export async function openFolder_entry() {
    if (loadingFomod.state)
        return;
    loadingFomod.state = true;
    console.debug('Opening a folder!');
    const picked = await bcdFS.getUserPickedFolder(true);
    if (!picked)
        return loadingFomod.state = false;
    console.debug('Picked folder:', picked);
    console.debug('Picked folder name:', picked?.handle.name);
    console.debug('Picked folder perms?', await picked?.handle.queryPermission({ mode: 'readwrite' }));
    window.FOMODBuilder.directory = picked;
    const fomodDir = await picked.childDirsC['fomod'];
    const moduleStr_ = fomodDir.childFilesC['ModuleConfig.xml'].then(file => file.readAsText());
    const infoStr_ = fomodDir.childFilesC['Info.xml'].then(file => file.readAsText());
    const [moduleStr, infoStr] = await Promise.all([moduleStr_, infoStr_]);
    xml.translateWhole(moduleStr, infoStr, true);
    postLoad();
}
export async function setOutputElements() {
    if (saving)
        return;
    saving = true;
    if (!window.FOMODBuilder.trackedFomod)
        throw new Error('No FOMOD is currently loaded.');
    const infoDoc = window.FOMODBuilder.trackedFomod.infoDoc;
    const moduleDoc = window.FOMODBuilder.trackedFomod.moduleDoc;
    let infoString = window.FOMODBuilder.trackedFomod.obj.asInfoXML(infoDoc).outerHTML || '<!-- ERROR - Serialized document was empty! -->';
    if (window.FOMODBuilder.storage.settings.formatXML)
        infoString = vkBeautify.xml(infoString);
    else
        infoString = vkBeautify.xmlmin(infoString, true);
    console.log({ infoString });
    document.getElementById('info-xml').textContent = infoString;
    let moduleString = window.FOMODBuilder.trackedFomod.obj.asModuleXML(moduleDoc).outerHTML || '<!-- ERROR - Serialized document was empty! -->';
    if (window.FOMODBuilder.storage.settings.formatXML)
        moduleString = vkBeautify.xml(moduleString);
    else
        moduleString = vkBeautify.xmlmin(moduleString, true);
    console.log({ moduleString });
    document.getElementById('module-xml').textContent = moduleString;
    saving = false;
}
function formatXml(string) {
    if (window.FOMODBuilder.storage.settings.formatXML)
        return vkBeautify.xml(string);
    else
        return vkBeautify.xmlmin(string, true);
}
let saving = false;
export async function save() {
    if (saving)
        return;
    saving = true;
    if (!window.FOMODBuilder.trackedFomod)
        throw new Error('No FOMOD is currently loaded.');
    if (!window.FOMODBuilder.directory) {
        await setOutputElements();
        return saving = false;
    }
    const fomodFolder = (await window.FOMODBuilder.directory.childDirsC['fomod']);
    const fomodInfo_ = fomodFolder.childFilesC['Info.xml'];
    const fomodModule_ = fomodFolder.childFilesC['ModuleConfig.xml'];
    const [fomodInfo, fomodModule] = await Promise.all([fomodInfo_, fomodModule_]);
    const infoDoc = window.FOMODBuilder.trackedFomod.infoDoc;
    const infoString = formatXml(window.FOMODBuilder.trackedFomod.obj.asInfoXML(infoDoc).outerHTML || '<!-- ERROR - Serialized document was empty! -->');
    const writeInfoPromise = fomodInfo.write(infoString);
    console.log({ infoString });
    const moduleDoc = window.FOMODBuilder.trackedFomod.moduleDoc;
    const moduleString = formatXml(window.FOMODBuilder.trackedFomod.obj.asModuleXML(moduleDoc).outerHTML || '<!-- ERROR - Serialized document was empty! -->');
    const writeModulePromise = fomodModule.write(moduleString);
    console.log({ moduleString });
    await Promise.all([writeInfoPromise, writeModulePromise]);
    hasUnsavedChanges = false;
    saving = false;
}
export async function cleanSave() {
    if (saving)
        return;
    if (!window.FOMODBuilder.trackedFomod)
        throw new Error('No FOMOD is currently loaded.');
    window.FOMODBuilder.trackedFomod.infoDoc = window.domParser.parseFromString('<fomod/>', 'text/xml');
    window.FOMODBuilder.trackedFomod.moduleDoc = window.domParser.parseFromString('<config/>', 'text/xml');
    return await save();
}
let saveTimeout = null;
let hasUnsavedChanges = false;
export function autoSave() {
    if (saving || loadingFomod.state)
        return;
    if (!window.FOMODBuilder.trackedFomod)
        return;
    hasUnsavedChanges = true;
    if (!window.FOMODBuilder.storage.settings.autoSaveAfterChange)
        return;
    if (saveTimeout !== null)
        clearTimeout(saveTimeout);
    saveTimeout = bcdUniversal.afterDelay(500, () => {
        saveTimeout = null;
        if (window.FOMODBuilder.storage.settings.autoCleanSave)
            cleanSave();
        else
            save();
    });
}
window.addEventListener('beforeunload', (event) => {
    if (!hasUnsavedChanges)
        return;
    event.preventDefault();
    event.returnValue = '';
    return '';
});
export function init() {
    bcdUniversal.registerBCDComponents(BCDDropdownSortingOrder, BCDDropdownOptionState, BCDDropdownGroupType);
    setStepEditorType(window.FOMODBuilder.storage.preferences.stepsBuilder);
    window.fomodUndoManager = fomodUndoManager;
    window.registerForEvents(document, {
        save: () => save(),
    });
    console.log('FOMOD Builder UI initialized.');
}
//# sourceMappingURL=data:application/json;base64,