import * as mainClasses from './fomod-builder-classifications.js';
import { registerForEvents, UpdatableObject } from '../../universal.js';
export class ModMetadata extends UpdatableObject {
    parent;
    get metaName() { return this.parent.metaName; }
    set metaName(value) { this.parent.metaName = value; this.update(); }
    nameInput;
    get author() { return this.parent.metaAuthor; }
    set author(value) { this.parent.metaAuthor = value; this.update(); }
    authorInput;
    get version() { return this.parent.metaVersion; }
    set version(value) { this.parent.metaVersion = value; this.update(); }
    versionInput;
    get id() { return this.parent.metaId; }
    set id(value) { this.parent.metaId = value; this.update(); }
    idInput;
    get url() { return this.parent.getURLAsString(); }
    set url(value) { this.parent.metaUrl = value; this.update(); }
    urlInput;
    constructor(parent) {
        super();
        this.parent = parent;
        this.nameInput = document.getElementById("metadata-mod-name").getOrCreateChildByTag('input');
        this.authorInput = document.getElementById("metadata-mod-author").getOrCreateChildByTag('input');
        this.versionInput = document.getElementById("metadata-mod-version").getOrCreateChildByTag('input');
        this.idInput = document.getElementById("metadata-mod-id").getOrCreateChildByTag('input');
        this.urlInput = document.getElementById("metadata-mod-url").getOrCreateChildByTag('input');
        registerForEvents(this.nameInput, { change: this.updateFromInput_bound });
        registerForEvents(this.authorInput, { change: this.updateFromInput_bound });
        registerForEvents(this.versionInput, { change: this.updateFromInput_bound });
        registerForEvents(this.idInput, { change: this.updateFromInput_bound });
        registerForEvents(this.urlInput, { change: this.updateFromInput_bound });
    }
    updateFromInput_() {
        this.metaName = this.nameInput.value;
        this.author = this.authorInput.value;
        this.version = this.versionInput.value;
        this.url = this.urlInput.value;
        const [, id] = this.idInput.value.match(/^\s*(\d+)\s*$/) ?? [];
        if (id)
            this.id = parseInt(id);
        else
            this.id = null;
    }
    update_() {
        this.nameInput.value = this.metaName;
        this.nameInput.dispatchEvent(new Event('input'));
        this.authorInput.value = this.author;
        this.authorInput.dispatchEvent(new Event('input'));
        this.versionInput.value = this.version;
        this.versionInput.dispatchEvent(new Event('input'));
        this.idInput.value = this.id?.toString() ?? '';
        this.idInput.dispatchEvent(new Event('input'));
        this.urlInput.value = this.url;
        this.urlInput.dispatchEvent(new Event('input'));
    }
}
mainClasses.addUpdateObjects(mainClasses.Fomod, ModMetadata);
//# sourceMappingURL=data:application/json;base64,