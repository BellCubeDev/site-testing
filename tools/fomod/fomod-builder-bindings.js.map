{"version":3,"file":"fomod-builder-bindings.ts","names":["mainClasses","registerForEvents","UpdatableObject","ModMetadata","parent","metaName","this","value","update","nameInput","author","metaAuthor","authorInput","version","metaVersion","versionInput","id","metaId","idInput","url","getURLAsString","metaUrl","urlInput","constructor","super","document","getElementById","getOrCreateChildByTag","change","updateFromInput_bound","updateFromInput_","match","parseInt","update_","dispatchEvent","Event","toString","addUpdateObjects","Fomod"],"sourceRoot":"https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/","sources":["https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/tools/fomod/fomod-builder-bindings.ts"],"sourcesContent":["/** This file contains code to update the information displayed within the mainClasses.Fomod Builder UI\n */\n\nimport * as mainClasses from './fomod-builder-classifications.js';\nimport { registerForEvents, UpdatableObject } from '../../universal.js';\n\nexport class ModMetadata extends UpdatableObject {\n    parent: mainClasses.Fomod;\n\n    /** The name of the mod */\n    get metaName(): string { return this.parent.metaName; } set metaName(value: string) { this.parent.metaName = value; this.update(); }\n    nameInput: HTMLInputElement;\n\n    /** The author of the mod */\n    get author(): string { return this.parent.metaAuthor; } set author(value: string) { this.parent.metaAuthor = value; this.update(); }\n    authorInput: HTMLInputElement;\n\n    /** The version of the mod */\n    get version(): string { return this.parent.metaVersion; } set version(value: string) { this.parent.metaVersion = value; this.update(); }\n    versionInput: HTMLInputElement;\n\n    /** The ID of the mod */\n    get id(): number|null { return this.parent.metaId; } set id(value: number|null) { this.parent.metaId = value; this.update(); }\n    idInput: HTMLInputElement;\n\n    /** The URL of the mod */\n    get url(): string { return this.parent.getURLAsString(); } set url(value: URL|string) { this.parent.metaUrl = value; this.update(); }\n    urlInput: HTMLInputElement;\n\n    constructor(parent: mainClasses.Fomod) {\n        super();\n        this.parent = parent;\n\n        this.nameInput = document.getElementById(\"metadata-mod-name\")!.getOrCreateChildByTag('input');\n        this.authorInput = document.getElementById(\"metadata-mod-author\")!.getOrCreateChildByTag('input');\n        this.versionInput = document.getElementById(\"metadata-mod-version\")!.getOrCreateChildByTag('input');\n        this.idInput = document.getElementById(\"metadata-mod-id\")!.getOrCreateChildByTag('input');\n        this.urlInput = document.getElementById(\"metadata-mod-url\")!.getOrCreateChildByTag('input');\n\n        registerForEvents(this.nameInput, {change: this.updateFromInput_bound});\n        registerForEvents(this.authorInput, {change: this.updateFromInput_bound});\n        registerForEvents(this.versionInput, {change: this.updateFromInput_bound});\n        registerForEvents(this.idInput, {change: this.updateFromInput_bound});\n        registerForEvents(this.urlInput, {change: this.updateFromInput_bound});\n    }\n\n    override updateFromInput_() {\n        this.metaName = this.nameInput.value;\n        this.author = this.authorInput.value;\n        this.version = this.versionInput.value;\n        this.url = this.urlInput.value;\n\n        const [,id] = this.idInput.value.match(/^\\s*(\\d+)\\s*$/) ?? [];\n        if (id) this.id = parseInt(id);\n        else this.id = null;\n    }\n\n    override update_() {\n        this.nameInput.value = this.metaName;               this.nameInput.dispatchEvent(new Event('input'));\n        this.authorInput.value = this.author;           this.authorInput.dispatchEvent(new Event('input'));\n        this.versionInput.value = this.version;         this.versionInput.dispatchEvent(new Event('input'));\n        this.idInput.value = this.id?.toString() ?? ''; this.idInput.dispatchEvent(new Event('input'));\n        this.urlInput.value = this.url;                 this.urlInput.dispatchEvent(new Event('input'));\n    }\n}\nmainClasses.addUpdateObjects(mainClasses.Fomod, ModMetadata);\n"],"mappings":"UAGYA,MAAiB,iEACpBC,qBAAmBC,MAAuB,4BAE7C,MAAOC,oBAAoBD,EAC7BE,OAGIC,eAAqB,OAAOC,KAAKF,OAAOC,QAAU,CAAMA,aAASE,GAAiBD,KAAKF,OAAOC,SAAWE,EAAOD,KAAKE,QAAU,CACnIC,UAGIC,aAAmB,OAAOJ,KAAKF,OAAOO,UAAY,CAAMD,WAAOH,GAAiBD,KAAKF,OAAOO,WAAaJ,EAAOD,KAAKE,QAAU,CACnII,YAGIC,cAAoB,OAAOP,KAAKF,OAAOU,WAAa,CAAMD,YAAQN,GAAiBD,KAAKF,OAAOU,YAAcP,EAAOD,KAAKE,QAAU,CACvIO,aAGIC,SAAoB,OAAOV,KAAKF,OAAOa,MAAQ,CAAMD,OAAGT,GAAsBD,KAAKF,OAAOa,OAASV,EAAOD,KAAKE,QAAU,CAC7HU,QAGIC,UAAgB,OAAOb,KAAKF,OAAOgB,gBAAkB,CAAMD,QAAIZ,GAAqBD,KAAKF,OAAOiB,QAAUd,EAAOD,KAAKE,QAAU,CACpIc,SAEAC,YAAYnB,GACRoB,QACAlB,KAAKF,OAASA,EAEdE,KAAKG,UAAYgB,SAASC,eAAe,qBAAsBC,sBAAsB,SACrFrB,KAAKM,YAAca,SAASC,eAAe,uBAAwBC,sBAAsB,SACzFrB,KAAKS,aAAeU,SAASC,eAAe,wBAAyBC,sBAAsB,SAC3FrB,KAAKY,QAAUO,SAASC,eAAe,mBAAoBC,sBAAsB,SACjFrB,KAAKgB,SAAWG,SAASC,eAAe,oBAAqBC,sBAAsB,SAEnF1B,EAAkBK,KAAKG,UAAW,CAACmB,OAAQtB,KAAKuB,wBAChD5B,EAAkBK,KAAKM,YAAa,CAACgB,OAAQtB,KAAKuB,wBAClD5B,EAAkBK,KAAKS,aAAc,CAACa,OAAQtB,KAAKuB,wBACnD5B,EAAkBK,KAAKY,QAAS,CAACU,OAAQtB,KAAKuB,wBAC9C5B,EAAkBK,KAAKgB,SAAU,CAACM,OAAQtB,KAAKuB,uBACnD,CAESC,mBACLxB,KAAKD,SAAWC,KAAKG,UAAUF,MAC/BD,KAAKI,OAASJ,KAAKM,YAAYL,MAC/BD,KAAKO,QAAUP,KAAKS,aAAaR,MACjCD,KAAKa,IAAMb,KAAKgB,SAASf,MAEzB,MAAO,CAACS,GAAMV,KAAKY,QAAQX,MAAMwB,MAAM,kBAAoB,GACnDzB,KAAKU,GAATA,EAAcgB,SAAShB,GACZ,IACnB,CAESiB,UACL3B,KAAKG,UAAUF,MAAQD,KAAKD,SAAwBC,KAAKG,UAAUyB,cAAc,IAAIC,MAAM,UAC3F7B,KAAKM,YAAYL,MAAQD,KAAKI,OAAkBJ,KAAKM,YAAYsB,cAAc,IAAIC,MAAM,UACzF7B,KAAKS,aAAaR,MAAQD,KAAKO,QAAiBP,KAAKS,aAAamB,cAAc,IAAIC,MAAM,UAC1F7B,KAAKY,QAAQX,MAAQD,KAAKU,IAAIoB,YAAc,GAAI9B,KAAKY,QAAQgB,cAAc,IAAIC,MAAM,UACrF7B,KAAKgB,SAASf,MAAQD,KAAKa,IAAqBb,KAAKgB,SAASY,cAAc,IAAIC,MAAM,SAC1F,EAEJnC,EAAYqC,iBAAiBrC,EAAYsC,MAAOnC"}