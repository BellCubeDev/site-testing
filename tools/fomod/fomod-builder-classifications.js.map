{"version":3,"file":"fomod-builder-classifications.ts","names":["UpdatableObject","getSetIndex","wait","ui","UpdateObjects","Map","addUpdateObjects","obj","updatables","get","push","set","FOMODElementProxy","instanceElement","objectsToUpdate","propagateToChildren_wasTrue","updateObjects","propagateToChildren","this","queueMicrotask","update","object","key","keysToUpdate","console","error","constructor","name","Set","Array","nestedObject","autoSave","update_","destroy","super","remove","updateWhole","inherited","base","parent","destroy_","forEach","steps","step","groups","group","options","option","suppressUpdates","updatable","window","flags","Flag","getters","gettersByValue","setters","settersByValue","cachedValues","static","checkValidity","size","Error","bind","values","getter","add","value","updateSetter","setter","flag","delete","oldValue","undefined","updateGetter","removeItem","item","oldName","cachedNames","flagClass","DependencyBase","DependencyBaseVersionCheck","_version","version","DependencyGroup","_operator","operator","_children","children","parseChildren","getAttribute","parseDependencies","async","child","parseDependency","asModuleXML","document","nodeName","createElement","tagName","appendChild","setAttribute","DependencyFlag","_flag","_value","type","textContent","flagsToSet","DependencyFile","_file","file","_state","state","thisElement","DependencyScriptExtender","DependencyGameVersion","DependencyModManager","dependency","previousSibling","nodeType","Node","COMMENT_NODE","stepNumStr","groupNumStr","optionNumStr","match","loadingFomod","parseInt","parseOptionDependency","TypeError","OptionStateDescriptor","_defaultState","defaultState","conditions","basicElement","getElementsByTagName","complexElement","defaultTypeElement","patternElement","OptionStateConditionStatement","length","getOrCreateChildByTag","complexTypeElement","complexPatternElement","_type","_typeElement","typeElement","_dependencies","dependencies","installs","parseFiles","elem","localInstalls","dependenciesElem","filesElem","install","InstallElement","_source","source","_destination","destination","_priority","priority","pathOrFile","FileSystemHandle","FOMODBuilder","directory","handle","resolve","File","replace","split","path","join","isFolder","slice","Step","_name","_sortingOrder","storage","settings","defaultSortingOrder","sortingOrder","groupContainers","addGroup","xmlElement","Group","containers","addGroup_bound","groupsElem","visibility","removeChildByTag","optionalFileGroups","defaultGroupSelectType","optionContainers","addOption","Option","addOption_bound","optionsElem","_description","description","_image","image","flagsContainers","files","filesContainers","_typeDescriptor","typeDescriptor","inheritedForFlags","addFlag","addFlag_bound","emptyFilesElem","Fomod","_metaName","metaName","keepNamesSynced","_moduleName","moduleName","_metaImage","metaImage","_metaAuthor","metaAuthor","_metaVersion","metaVersion","_metaId","metaId","_infoInstanceElement","infoInstanceElement","_metaUrl","metaUrl","url","URL","e","getURLAsString","toString","stepContainers","addStep","addStep_bound","id","stepsElem","conditionalInstallsElem","requiredInstallsElem","moduleDependencies","documentElement","removeChild","requiredInstallFiles","optionalInstallList","stepsContainer","conditionalFileInstalls","asInfoXML","includeInfoSchema","removeAttribute"],"sourceRoot":"https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/","sources":["https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/tools/fomod/fomod-builder-classifications.ts"],"sourcesContent":["import * as main from './fomod-builder.js'; // Brings in global things\nimport { UpdatableObject, getSetIndex, wait } from '../../universal.js';\n\nimport * as ui from './fomod-builder-ui.js';\n\n/*x eslint-disable i18n-text/no-en */// FOMODs are XML files with a schema written in English, so disallowing English makes little sense.\n\n/** Function to pass into JSON.stringify to handle FOMODs */\nfunction JsonStringifyFomod(key: string, value: any) {\n    // Blacklisted Keys (generated at runtime or would cause recursion)\n    if (key === 'inherited') return undefined;\n    if (key === 'instanceElement') return undefined;\n    if (key === 'objectsToUpdate') return undefined;\n    if (key === 'suppressUpdates') return undefined;\n    if (key === 'updateObjects') return undefined;\n\n    // Blacklisted Value Types\n    if (typeof value === 'function') return undefined;\n\n    // Internal keys (start with _)\n    if (key.startsWith('_')) return undefined;\n\n    // Map & Set support\n    if (value instanceof Set) return Array.from(value);\n    if (value instanceof Map) return Object.fromEntries(value.entries());\n\n    return value;\n}\n\n/*\n    Thanks to Patrick Gillespie for the great ASCII art generator!\n    https://patorjk.com/software/taag/#p=display&h=0&v=0&f=Big%20Money-nw\n    ...makes this code *so* much easier to maintain... you know, 'cuz I can find my functions in VSCode's Minimap\n*/\n\n/***\n *    $$$$$$$$\\ $$\\                                               $$\\\n *    $$  _____|$$ |                                              $$ |\n *    $$ |      $$ | $$$$$$\\  $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\  $$$$$$\\    $$$$$$$\\\n *    $$$$$\\    $$ |$$  __$$\\ $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ \\_$$  _|  $$  _____|\n *    $$  __|   $$ |$$$$$$$$ |$$ / $$ / $$ |$$$$$$$$ |$$ |  $$ |  $$ |    \\$$$$$$\\\n *    $$ |      $$ |$$   ____|$$ | $$ | $$ |$$   ____|$$ |  $$ |  $$ |$$\\  \\____$$\\\n *    $$$$$$$$\\ $$ |\\$$$$$$$\\ $$ | $$ | $$ |\\$$$$$$$\\ $$ |  $$ |  \\$$$$  |$$$$$$$  |\n *    \\________|\\__| \\_______|\\__| \\__| \\__| \\_______|\\__|  \\__|   \\____/ \\_______/\n */\n\n/** A map of FOMODElementProxy classes and the classes they should create alongside themselves for update purposes */\nexport const UpdateObjects = new Map<FOMODElementProxy|Function, ({new(param: any): UpdatableObject} & Omit<typeof UpdatableObject, 'new'>)[]>();\nexport function addUpdateObjects<TClass extends Omit<typeof FOMODElementProxy, 'new'> & {new(...any:any):any}>(obj: TClass, ...updatables: ({new(param: InstanceType<TClass>): UpdatableObject} & Omit<typeof UpdatableObject, 'new'>)[]) {\n    UpdateObjects.get(obj)?.push(...updatables) ||\n    UpdateObjects.set(obj, updatables);\n}\n\nexport abstract class FOMODElementProxy extends UpdatableObject {\n    instanceElement: Element | undefined;\n\n    /** @type readonly (keyof this)[] */\n    abstract keysToUpdate: readonly string[];\n\n    objectsToUpdate: UpdatableObject[] = [];\n\n    propagateToChildren_wasTrue = false;\n    updateObjects(propagateToChildren = false) {\n        if (!this) return; // function sometimes gets called in the constructor - update will be called in a microtask later.\n\n        this.propagateToChildren_wasTrue ||= propagateToChildren;\n        queueMicrotask(()=>  this.propagateToChildren_wasTrue = false  );\n\n        // If propagateToChildren is true,\n        // we know that it didn't come from an actual update--so let's go through the update API this time\n        // Don't worry - when the update goes through, it'll just call this function again, but this time it'll be false\n        if (propagateToChildren) return this.update();\n\n        for (const object of this.objectsToUpdate) {\n            if (object instanceof FOMODElementProxy) object.updateObjects(true);\n            else object.update();\n        }\n\n        if (this.propagateToChildren_wasTrue) for (const key of this.keysToUpdate) {\n            if (  !(key in this)  ) return console.error(`Key ${key} not found in ${this.constructor.name}`, this);\n            const obj = this[key as keyof this];\n\n            if (obj instanceof UpdatableObject) obj.update();\n            else if (obj instanceof Set || obj instanceof Array) {\n                for (const nestedObject of obj) {\n                    if (nestedObject instanceof FOMODElementProxy) nestedObject.updateObjects(true);\n                    else if (nestedObject instanceof UpdatableObject) nestedObject.update();\n                }\n            }\n        }\n\n        ui.autoSave();\n    }\n\n    override update_() { this.updateObjects(); }\n\n    override destroy() {\n        super.destroy();\n        this.instanceElement?.remove();\n    }\n\n    updateWhole() {\n        if (  !('inherited' in this && this.inherited && typeof this.inherited === 'object')  ) return this.updateObjects(true);\n\n        if ('base' in this.inherited && this.inherited.base && this.inherited.base instanceof FOMODElementProxy) this.inherited.base.updateObjects(true);\n        else if ('parent' in this.inherited && this.inherited.parent && this.inherited.parent instanceof FOMODElementProxy) this.inherited.parent.updateObjects(true);\n\n        this.updateObjects(true);\n    }\n\n    protected override destroy_(): void {\n        this.objectsToUpdate.forEach(  (obj) => obj.destroy()  );\n        if ('steps' in this && this.steps instanceof Set) this.steps.forEach(  (step) => step.destroy()  );\n        if ('groups' in this && this.groups instanceof Set) this.groups.forEach(  (group) => group.destroy()  );\n        if ('options' in this && this.options instanceof Set) this.options.forEach(  (option) => option.destroy()  );\n\n        this.updateWhole();\n    }\n\n    constructor(instanceElement: Element | undefined = undefined) {\n        super();\n        this.suppressUpdates = true;\n        this.instanceElement = instanceElement;\n\n        queueMicrotask(() => {\n            for (const updatable of UpdateObjects.get(this.constructor) ?? []) this.objectsToUpdate.push(new updatable(this));\n            this.suppressUpdates = false;\n            this.updateObjects();\n        });\n    }\n\n    asModuleXML?(document: XMLDocument): Element;\n    asInfoXML?(document: XMLDocument): Element;\n}\n\ninterface InheritedFOMODData<TType extends Step|Group|Option|DependencyBase> {\n    base?: Fomod,\n    parent?: TType extends Step ? Fomod\n        : TType extends Group ? Step\n        : TType extends Option ? Group\n        /* TT extends Dependency */ : Option,\n    containers?: Record<string, HTMLDivElement>,\n}\n\n/***\n *    $$$$$$$$\\ $$\\\n *    $$  _____|$$ |\n *    $$ |      $$ | $$$$$$\\   $$$$$$\\   $$$$$$$\\\n *    $$$$$\\    $$ | \\____$$\\ $$  __$$\\ $$  _____|\n *    $$  __|   $$ | $$$$$$$ |$$ /  $$ |\\$$$$$$\\\n *    $$ |      $$ |$$  __$$ |$$ |  $$ | \\____$$\\\n *    $$ |      $$ |\\$$$$$$$ |\\$$$$$$$ |$$$$$$$  |\n *    \\__|      \\__| \\_______| \\____$$ |\\_______/\n *                            $$\\   $$ |\n *                            \\$$$$$$  |\n *                             \\______/\n */\n\ndeclare global { interface Window {  flags: Record<string, Flag>;  flagClass: typeof Flag;  } }\nwindow.flags = {};\n\nexport class Flag {\n    name: string;\n\n    getters: Set<DependencyFlag>;\n    gettersByValue: Record<string, Set<DependencyFlag>>;\n\n    setters: Set<DependencyFlag>;\n    settersByValue: Record<string, Set<DependencyFlag>>;\n\n    private cachedValues: Map<DependencyFlag, string>;\n    private static cachedNames: Map<DependencyFlag, string> = new Map();\n\n    static get(name: string): Flag { return window.flags[name] ?? new Flag(name); }\n    checkValidity() { if (this.setters.size === 0 && this.getters.size === 0) delete window.flags[this.name]; }\n\n    private constructor(name: string) {\n        if (window.flags[name]) throw new Error(`Flag ${name} already exists!`);\n        this.name = name;\n        window.flags[name] = this;\n\n        this.getters = new Set();\n        this.setters = new Set();\n        this.gettersByValue = {};\n        this.settersByValue = {};\n        this.cachedValues = new Map();\n\n        queueMicrotask(this.checkValidity.bind(this));\n    }\n\n    get values(): Set<string> {\n        const values = new Set<string>();\n        for (const getter of this.getters) values.add(getter.value);\n        return values;\n    }\n\n    updateSetter(setter: DependencyFlag) {\n        if (setter.flag !== this.name) {\n            this.setters.delete(setter);\n\n            const oldValue = this.cachedValues.get(setter);\n            if (oldValue) this.settersByValue[oldValue]?.delete(setter);\n            this.cachedValues.delete(setter);\n\n            this.checkValidity();\n            return;\n        }\n\n\n        const oldValue = this.cachedValues.get(setter);\n        if (oldValue !== setter.value) {\n            if (oldValue !== undefined) {\n                if (!this.settersByValue[oldValue]) this.settersByValue[oldValue] = new Set();\n\n                this.settersByValue[oldValue]!.delete(setter);\n                if (this.settersByValue[oldValue]!.size === 0) delete this.settersByValue[oldValue];\n            }\n\n            if (!this.settersByValue[setter.value]) this.settersByValue[setter.value] = new Set();\n            this.settersByValue[setter.value]!.add(setter);\n        }\n\n        this.cachedValues.set(setter, setter.value);\n        this.setters.add(setter);\n    }\n\n    updateGetter(getter: DependencyFlag) {\n        if (getter.flag !== this.name) {\n            this.getters.delete(getter);\n\n            const oldValue = this.cachedValues.get(getter);\n            if (oldValue) this.gettersByValue[oldValue]?.delete(getter);\n            this.cachedValues.delete(getter);\n\n            this.checkValidity();\n            return;\n        }\n\n        const oldValue = this.cachedValues.get(getter);\n        if (oldValue !== getter.value) {\n            if (oldValue !== undefined) {\n                if (!this.gettersByValue[oldValue]) this.gettersByValue[oldValue] = new Set();\n\n                this.gettersByValue[oldValue]!.delete(getter);\n                if (this.gettersByValue[oldValue]!.size === 0) delete this.gettersByValue[oldValue];\n            }\n\n            if (!this.gettersByValue[getter.value]) this.gettersByValue[getter.value] = new Set();\n            this.gettersByValue[getter.value]!.add(getter);\n        }\n\n        this.cachedValues.set(getter, getter.value);\n        this.getters.add(getter);\n    }\n\n    removeItem(item: DependencyFlag) {\n        this.setters.delete(item);\n        this.getters.delete(item);\n\n        const oldValue = this.cachedValues.get(item);\n        if (oldValue) {\n            this.settersByValue[oldValue]?.delete(item);\n            this.gettersByValue[oldValue]?.delete(item);\n        }\n\n        this.cachedValues.delete(item);\n\n        this.checkValidity();\n    }\n\n    static removeItem(item: DependencyFlag) {\n        const oldName = Flag.cachedNames.get(item);\n        if (oldName !== undefined) Flag.get(oldName).removeItem(item);\n        Flag.cachedNames.delete(item);\n    }\n\n    static updateSetter(setter: DependencyFlag) {\n        const oldName = Flag.cachedNames.get(setter);\n        if (oldName !== setter.flag) {\n            if (oldName !== undefined) Flag.get(oldName).updateSetter(setter);\n            Flag.cachedNames.set(setter, setter.flag);\n        }\n\n        Flag.get(setter.flag).updateSetter(setter);\n    }\n\n    static updateGetter(getter: DependencyFlag) {\n        const oldName = Flag.cachedNames.get(getter);\n        if (oldName !== getter.flag) {\n            if (oldName !== undefined) Flag.get(oldName).updateGetter(getter);\n            Flag.cachedNames.set(getter, getter.flag);\n        }\n\n        Flag.get(getter.flag).updateGetter(getter);\n    }\n\n}\nwindow.flagClass = Flag;\n\n\n/***\n *     $$$$$$\\                            $$\\ $$\\   $$\\     $$\\\n *    $$  __$$\\                           $$ |\\__|  $$ |    \\__|\n *    $$ /  \\__| $$$$$$\\  $$$$$$$\\   $$$$$$$ |$$\\ $$$$$$\\   $$\\  $$$$$$\\  $$$$$$$\\   $$$$$$$\\\n *    $$ |      $$  __$$\\ $$  __$$\\ $$  __$$ |$$ |\\_$$  _|  $$ |$$  __$$\\ $$  __$$\\ $$  _____|\n *    $$ |      $$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ |$$ /  $$ |$$ |  $$ |\\$$$$$$\\\n *    $$ |  $$\\ $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\\ $$ |$$ |  $$ |$$ |  $$ | \\____$$\\\n *    \\$$$$$$  |\\$$$$$$  |$$ |  $$ |\\$$$$$$$ |$$ |  \\$$$$  |$$ |\\$$$$$$  |$$ |  $$ |$$$$$$$  |\n *     \\______/  \\______/ \\__|  \\__| \\_______|\\__|   \\____/ \\__| \\______/ \\__|  \\__|\\_______/\n */\n\nexport type Dependency = DependencyBase | Option;\n\nexport abstract class DependencyBase extends FOMODElementProxy {\n    keysToUpdate = [];\n    constructor(instanceElement: Element | undefined = undefined) {\n        super(instanceElement);\n    }\n\n    abstract override asModuleXML(document: XMLDocument): Element;\n}\n\n\n\nexport abstract class DependencyBaseVersionCheck extends DependencyBase {\n    private _version = '';\n    set version(value: string) { this._version = value; this.updateObjects(); } get version(): string { return this._version; }\n}\n\nexport type DependencyGroupOperator = 'And' | 'Or';\nexport class DependencyGroup extends DependencyBase {\n    private _operator: DependencyGroupOperator = 'And';\n    set operator(value: DependencyGroupOperator) { this._operator = value; this.updateObjects(); } get operator(): DependencyGroupOperator { return this._operator; }\n\n    private _children: Dependency[] = [];\n    set children(value: Dependency[]) { this._children = value; this.updateObjects(); } get children(): Dependency[] { return this._children; }\n\n    constructor(\n        instanceElement: Element | undefined = undefined,\n        operator: DependencyGroupOperator = 'And',\n        parseChildren = false\n    ) {\n        super(instanceElement);\n        this.operator = operator;\n        if (instanceElement) {\n            this._operator =\n                (instanceElement.getAttribute(\n                    'operator'\n                ) as DependencyGroupOperator) || operator;\n        }\n\n        if (parseChildren) this.parseDependencies();\n    }\n\n    private async parseDependencies(){\n        if (!this.instanceElement) return;\n\n        for (const child of this.instanceElement.children)\n            this.children.push(await parseDependency(child));\n\n        queueMicrotask(() => this.update());\n    }\n\n    // <moduleDependencies operator=\"And\">\n    override asModuleXML(document: XMLDocument, nodeName = 'dependencies'): Element {\n        this.instanceElement ??= document.createElement(nodeName);\n\n        if (this.instanceElement && this.instanceElement.tagName !== nodeName) {\n            this.instanceElement.remove();\n            this.instanceElement = document.createElement(nodeName);\n            for (const child of this.children) {\n                if (child.instanceElement)\n                    this.instanceElement.appendChild(child.instanceElement);\n            }\n        }\n\n        this.instanceElement.setAttribute('operator', this.operator);\n        for (const child of this.children) {\n            this.instanceElement.appendChild(child.asModuleXML(document));\n        }\n        return this.instanceElement;\n    }\n}\n\nexport type DependencyFileState = 'Active' | 'Inactive' | 'Missing';\nexport type DependencyFlagTags = 'flag' | 'flagDependency';\nexport class DependencyFlag extends DependencyBase {\n    private _flag = '';\n    set flag(value: string) { this._flag = value; this.update(); } get flag(): string { return this._flag; }\n\n    private _value = '';\n    set value(value: string) { this._value = value; this.update(); } get value(): string { return this._value; }\n\n    readonly type:DependencyFlagTags;\n    readonly inherited?: InheritedFOMODData<DependencyBase>;\n\n    constructor(type: DependencyFlagTags, inherited?: InheritedFOMODData<DependencyBase>, instanceElement: Element | undefined = undefined) {\n        super(instanceElement);\n        this.type = type;\n        this.inherited = inherited;\n        if (instanceElement) {\n            this.flag = instanceElement.getAttribute('name') ?? '';\n            this.value = instanceElement.getAttribute('value') || instanceElement.textContent || '';\n        }\n    }\n\n    override update_() {\n        if (!this.inherited) return;\n\n        if (this.type === 'flagDependency') Flag.updateGetter(this);\n        else if (this.inherited.parent) Flag.updateSetter(this);\n    }\n\n    protected override destroy_(): void {\n        if (!this.inherited) return;\n\n        Flag.removeItem(this);\n        this.inherited.parent?.flagsToSet.delete(this);\n\n        super.destroy_();\n    }\n\n    // <flagDependency flag=\"\" value=\"\" />\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement ??= document.createElement(this.type);\n\n        this.instanceElement.setAttribute('name', this.flag);\n        if (this.type === 'flagDependency')\n            this.instanceElement.setAttribute('value', this.value);\n        else\n            this.instanceElement.textContent = this.value;\n\n        return this.instanceElement;\n    }\n}\nexport class DependencyFile extends DependencyBase {\n    private _file = '';\n    set file(value: string) { this._file = value; this.updateObjects(); } get file(): string { return this._file; }\n\n    private _state: DependencyFileState = 'Active';\n    set state(value: DependencyFileState) { this._state = value; this.updateObjects(); } get state(): DependencyFileState { return this._state; }\n\n    // <fileDependency file=\"2\" state=\"Active\" />\n    override asModuleXML(document: XMLDocument): Element {\n        const thisElement = document.createElement('fileDependency');\n        thisElement.setAttribute('file', this.file);\n        thisElement.setAttribute('state', this.state);\n        return thisElement;\n    }\n}\n\n\nexport class DependencyScriptExtender extends DependencyBaseVersionCheck {\n    // <foseDependency version=\"\" />\n    override asModuleXML(document: XMLDocument): Element {\n        const thisElement = document.createElement('foseDependency');\n        thisElement.setAttribute('version', this.version);\n        return thisElement;\n    }\n}\n\nexport class DependencyGameVersion extends DependencyBaseVersionCheck {\n    // <gameDependency version=\"\" />\n    override asModuleXML(document: XMLDocument): Element {\n        const thisElement = document.createElement('gameDependency');\n        thisElement.setAttribute('version', this.version);\n        return thisElement;\n    }\n}\n\nexport class DependencyModManager extends DependencyBaseVersionCheck {\n    // <fommDependency version=\"1\" />\n    override asModuleXML(document: XMLDocument): Element {\n        const thisElement = document.createElement('fommDependency');\n        thisElement.setAttribute('version', this.version);\n        return thisElement;\n    }\n}\n\nasync function parseDependency(dependency: Element, inherited?: InheritedFOMODData<DependencyBase>): Promise<Dependency> {\n    const type = dependency.tagName;\n    switch (type) {\n        case 'dependencies':\n            return new DependencyGroup(dependency, undefined, true);\n        case 'fileDependency':\n            return new DependencyFile(dependency);\n        case 'flagDependency':\n            if (dependency.previousSibling?.nodeType !== Node.COMMENT_NODE || !inherited?.base) return new DependencyFlag('flagDependency', inherited, dependency);\n\n            // eslint-disable-next-line no-case-declarations\n            const [, stepNumStr, groupNumStr, optionNumStr] = dependency.previousSibling.textContent?.match(/Option (\\d+)-(\\d+)-(\\d+)/) ?? [];\n            return await parseOptionDependency(stepNumStr, groupNumStr, optionNumStr, inherited.base) ?? new DependencyFlag('flagDependency', inherited, dependency);\n        case 'foseDependency':\n            return new DependencyScriptExtender(dependency);\n        case 'gameDependency':\n            return new DependencyGameVersion(dependency);\n        case 'fommDependency':\n            return new DependencyModManager(dependency);\n        default:\n            throw new TypeError(`Unknown dependency type: ${type}`);\n    }\n}\n\nasync function parseOptionDependency(stepNumStr: string|undefined, groupNumStr: string|undefined, optionNumStr: string|undefined, base: Fomod): Promise<Option | null> {\n    if (!stepNumStr || !groupNumStr || !optionNumStr) return null;\n    while (ui.loadingFomod.state) await wait(5);\n\n    const step = getSetIndex(base.steps, parseInt(stepNumStr));\n    const group = step ? getSetIndex(step.groups, parseInt(groupNumStr)) : null;\n    const option = group ? getSetIndex(group.options, parseInt(optionNumStr)) : null;\n\n    return option ?? null;\n}\n\n/***\n *     $$$$$$\\              $$\\     $$\\                  $$$$$$\\    $$\\                 $$\\\n *    $$  __$$\\             $$ |    $  |                $$  __$$\\   $$ |                $$ |\n *    $$ /  $$ | $$$$$$\\  $$$$$$\\   \\_/ $$$$$$$\\        $$ /  \\__|$$$$$$\\    $$$$$$\\  $$$$$$\\    $$$$$$\\\n *    $$ |  $$ |$$  __$$\\ \\_$$  _|      $$  __$$\\       \\$$$$$$\\  \\_$$  _|   \\____$$\\ \\_$$  _|  $$  __$$\\\n *    $$ |  $$ |$$ /  $$ |  $$ |        $$ |  $$ |       \\____$$\\   $$ |     $$$$$$$ |  $$ |    $$$$$$$$ |\n *    $$ |  $$ |$$ |  $$ |  $$ |$$\\     $$ |  $$ |      $$\\   $$ |  $$ |$$\\ $$  __$$ |  $$ |$$\\ $$   ____|\n *     $$$$$$  |$$$$$$$  |  \\$$$$  |    $$ |  $$ |      \\$$$$$$  |  \\$$$$  |\\$$$$$$$ |  \\$$$$  |\\$$$$$$$\\\n *     \\______/ $$  ____/    \\____/     \\__|  \\__|       \\______/    \\____/  \\_______|   \\____/  \\_______|\n *              $$ |\n *              $$ |\n *              \\__|\n *    $$$$$$$\\                                          $$\\             $$\\\n *    $$  __$$\\                                         \\__|            $$ |\n *    $$ |  $$ | $$$$$$\\   $$$$$$$\\  $$$$$$$\\  $$$$$$\\  $$\\  $$$$$$\\  $$$$$$\\    $$$$$$\\   $$$$$$\\   $$$$$$$\\\n *    $$ |  $$ |$$  __$$\\ $$  _____|$$  _____|$$  __$$\\ $$ |$$  __$$\\ \\_$$  _|  $$  __$$\\ $$  __$$\\ $$  _____|\n *    $$ |  $$ |$$$$$$$$ |\\$$$$$$\\  $$ /      $$ |  \\__|$$ |$$ /  $$ |  $$ |    $$ /  $$ |$$ |  \\__|\\$$$$$$\\\n *    $$ |  $$ |$$   ____| \\____$$\\ $$ |      $$ |      $$ |$$ |  $$ |  $$ |$$\\ $$ |  $$ |$$ |       \\____$$\\\n *    $$$$$$$  |\\$$$$$$$\\ $$$$$$$  |\\$$$$$$$\\ $$ |      $$ |$$$$$$$  |  \\$$$$  |\\$$$$$$  |$$ |      $$$$$$$  |\n *    \\_______/  \\_______|\\_______/  \\_______|\\__|      \\__|$$  ____/    \\____/  \\______/ \\__|      \\_______/\n *                                                          $$ |\n *                                                          $$ |\n *                                                          \\__|\n */\n\nexport type OptionState =\n    | 'Optional'        // Unchecked but checkable\n    | 'Recommended'     // Checked but uncheckable\n    | 'CouldBeUseable'  // TODO: Check if this has a use - UPDATE: No use in Vortex\n    | 'Required'        // Permanently checked\n    | 'NotUseable';     // Permanently unchecked\nexport class OptionStateDescriptor extends FOMODElementProxy {\n    keysToUpdate = ['conditions'] as const;\n\n    private _defaultState: OptionState = 'Optional';\n    set defaultState(value: OptionState) { this._defaultState = value; this.updateObjects(); } get defaultState(): OptionState { return this._defaultState; }\n\n    conditions: OptionStateConditionStatement[] = [];\n\n    constructor(\n        instanceElement?: Element,\n        defaultState: OptionState = 'Optional',\n        conditions: OptionStateConditionStatement[] = []\n    ) {\n        super(instanceElement);\n        this.defaultState = defaultState;\n        this.conditions = conditions;\n\n        const basicElement = instanceElement?.getElementsByTagName('type')[0];\n        const complexElement = instanceElement?.getElementsByTagName('dependencyType')[0];\n\n        if (basicElement) {\n            this.defaultState = basicElement.getAttribute('name') as OptionState;\n\n        }\n\n        if (complexElement) {\n            const defaultTypeElement = complexElement.getElementsByTagName('defaultType')[0];\n            if (defaultTypeElement) this.defaultState = defaultTypeElement.getAttribute('name') as OptionState || 'Optional';\n\n            const patternElement = complexElement.getElementsByTagName('patterns')[0];\n            for (const dependency of patternElement?.children || [])\n                this.conditions.push(new OptionStateConditionStatement(dependency));\n        }\n    }\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement ??= document.createElement('typeDescriptor');\n\n        let basicElement = this.instanceElement.getElementsByTagName('type')[0];\n        let complexElement = this.instanceElement.getElementsByTagName('dependencyType')[0];\n\n\n        if (this.conditions.length == 0) {\n            complexElement?.remove();\n\n            basicElement = this.instanceElement.getOrCreateChildByTag('type');\n            this.instanceElement.appendChild(basicElement);\n\n            basicElement.setAttribute('name', this.defaultState);\n\n            return this.instanceElement;\n        }\n\n\n        basicElement?.remove();\n\n        complexElement = this.instanceElement.getOrCreateChildByTag('dependencyType')  ;\n        this.instanceElement.appendChild(complexElement);\n\n        const complexTypeElement = complexElement.getOrCreateChildByTag('defaultType');\n        complexTypeElement.setAttribute('default', this.defaultState);\n        complexElement.appendChild(complexTypeElement);\n\n        const complexPatternElement = complexElement.getOrCreateChildByTag('patterns');\n        for (const dependency of this.conditions)\n            complexPatternElement.appendChild(  dependency.asModuleXML(document) );\n        complexElement.appendChild(complexPatternElement);\n\n        return this.instanceElement;\n    }\n}\n\nexport class OptionStateConditionStatement extends FOMODElementProxy {\n    keysToUpdate = ['dependencies'] as const;\n\n    private _type: OptionState = 'Optional';\n    set type(value: OptionState) { this._type = value; this.updateObjects(); } get type(): OptionState { return this._type; }\n\n    private _typeElement: Element | undefined = undefined;\n    set typeElement(value: Element | undefined) { this._typeElement = value; this.updateObjects(); } get typeElement(): Element | undefined { return this._typeElement; }\n\n    private _dependencies!: DependencyGroup;\n    set dependencies(value: DependencyGroup) { this._dependencies = value; this.updateObjects(); } get dependencies(): DependencyGroup { return this._dependencies; }\n\n    constructor(instanceElement?: Element, dependency?: DependencyGroup, type: OptionState = 'Optional') {\n        super(instanceElement);\n        this.dependencies = dependency ?? new DependencyGroup();\n        this.type = type;\n    }\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement =\n            this.instanceElement ?? document.createElement('pattern');\n\n        this.typeElement = this.typeElement\n                                    ?? this.instanceElement.appendChild(document.createElement('type'));\n        this.typeElement.setAttribute('name', this.type);\n\n        this.instanceElement.appendChild(this.dependencies.asModuleXML(document));\n\n        return this.instanceElement;\n    }\n}\n\n/***\n *    $$$$$$\\                       $$\\               $$\\ $$\\\n *    \\_$$  _|                      $$ |              $$ |$$ |\n *      $$ |  $$$$$$$\\   $$$$$$$\\ $$$$$$\\    $$$$$$\\  $$ |$$ | $$$$$$$\\\n *      $$ |  $$  __$$\\ $$  _____|\\_$$  _|   \\____$$\\ $$ |$$ |$$  _____|\n *      $$ |  $$ |  $$ |\\$$$$$$\\    $$ |     $$$$$$$ |$$ |$$ |\\$$$$$$\\\n *      $$ |  $$ |  $$ | \\____$$\\   $$ |$$\\ $$  __$$ |$$ |$$ | \\____$$\\\n *    $$$$$$\\ $$ |  $$ |$$$$$$$  |  \\$$$$  |\\$$$$$$$ |$$ |$$ |$$$$$$$  |\n *    \\______|\\__|  \\__|\\_______/    \\____/  \\_______|\\__|\\__|\\_______/\n */\n\n\nexport const installs = new Set<InstallElement>();\n\nfunction parseFiles(elem: Element|undefined): InstallElement[] {\n    const localInstalls: InstallElement[] = [];\n    if (!elem) return localInstalls;\n\n    const dependenciesElem = elem.getElementsByTagName('dependencies')[0];\n    const filesElem = elem.getElementsByTagName('files')[0] || elem;\n\n    let dependencies: DependencyGroup|undefined = undefined;\n    if (dependenciesElem) dependencies = new DependencyGroup(dependenciesElem);\n\n    for (const file of filesElem.children) {\n        const install = new InstallElement(file, dependencies);\n        localInstalls.push(install);\n        installs.add(install);\n    }\n\n    return localInstalls;\n}\n\nexport class InstallElement extends FOMODElementProxy {\n    keysToUpdate = ['dependencies'] as const;\n\n    private _source: string[] = [];\n    set source(value: string[]) { this._source = value; this.updateObjects(); } get source(): string[] { return this._source; }\n\n    private _destination: string[] = [];\n    set destination(value: string[]) { this._destination = value; this.updateObjects(); } get destination(): string[] { return this._destination; }\n\n    dependencies: DependencyGroup|null = null;\n\n    private _priority: number = 0;\n    set priority(value: number) { this._priority = value; this.updateObjects(); } get priority(): number { return this._priority; }\n\n    async updateFile(pathOrFile: string|string[] | FileSystemHandle): Promise<void> {\n\n        if (pathOrFile instanceof FileSystemHandle) pathOrFile = await window.FOMODBuilder.directory?.handle.resolve(pathOrFile) ?? '';\n        if (pathOrFile instanceof File)\n        if (typeof pathOrFile === 'string') pathOrFile = pathOrFile.replace(/\\\\/g, '/').split('/');\n        if ( !(pathOrFile instanceof Array) ) throw new Error('Could not resolve path - most likely outside of the root directory');\n\n\n        this.source = pathOrFile;\n    }\n\n    /** Can be one of the following:\n        <file source=\"123\" priority=\"0\" destination=\"123\" installIfUsable=\"true\" alwaysInstall=\"true\" />\n        <folder source=\"123\" priority=\"0\" destination=\"123\" installIfUsable=\"true\" alwaysInstall=\"true\" />\n    */\n    constructor(instanceElement?: Element, dependencies?: DependencyGroup) {\n        super(instanceElement);\n\n        installs.add(this);\n\n        this.dependencies = dependencies ?? null;\n\n        if (!instanceElement) return;\n\n        this.source = instanceElement.getAttribute('source')?.split(/[/\\\\]/) ?? [];\n        this.destination = instanceElement.getAttribute('destination')?.split(/[/\\\\]/) ?? [];\n    }\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement ??= document.createElement('install');\n\n        const path = this.source.join('/');\n        const isFolder = this.source[this.source.length - 1] === '';\n\n        this.instanceElement.appendChild(\n            document.createElement(isFolder ? 'folder' : 'file')\n        ).textContent = isFolder ? path.slice(0, -1) : path;\n\n        return this.instanceElement;\n    }\n}\n\n/***\n *     $$$$$$\\    $$\\\n *    $$  __$$\\   $$ |\n *    $$ /  \\__|$$$$$$\\    $$$$$$\\   $$$$$$\\   $$$$$$$\\\n *    \\$$$$$$\\  \\_$$  _|  $$  __$$\\ $$  __$$\\ $$  _____|\n *     \\____$$\\   $$ |    $$$$$$$$ |$$ /  $$ |\\$$$$$$\\\n *    $$\\   $$ |  $$ |$$\\ $$   ____|$$ |  $$ | \\____$$\\\n *    \\$$$$$$  |  \\$$$$  |\\$$$$$$$\\ $$$$$$$  |$$$$$$$  |\n *     \\______/    \\____/  \\_______|$$  ____/ \\_______/\n *                                  $$ |\n *                                  $$ |\n *                                  \\__|\n */\n\nexport type SortOrder =\n    | 'Ascending'  // Alphabetical\n    | 'Descending' // Reverse Alphabetical\n    | 'Explicit';  // Explicit order\n\nexport class Step extends FOMODElementProxy {\n    keysToUpdate = ['groups', 'conditions'] as const;\n    inherited: InheritedFOMODData<Step>;\n\n    private _name = '';\n    set name(value: string) { this._name = value; this.updateObjects(); } get name(): string { return this._name; }\n\n    private _sortingOrder: SortOrder = window.FOMODBuilder.storage.settings.defaultSortingOrder;\n    set sortingOrder(value: SortOrder) { this._sortingOrder = value; this.updateObjects(); } get sortingOrder(): SortOrder { return this._sortingOrder; }\n\n    groups: Set<Group>;\n\n    groupContainers: Record<string, HTMLDivElement> = {};\n\n    conditions: DependencyGroup | undefined;\n\n    addGroup(xmlElement?: ConstructorParameters<typeof Group>[1]) {\n        this.groups.add(new Group({\n            base: this.inherited.base,\n            containers: this.groupContainers,\n            parent: this,\n        }, xmlElement));\n\n        this.updateWhole();\n    }\n    readonly addGroup_bound = this.addGroup.bind(this);\n\n    protected override destroy_() {\n        if (this.inherited.parent && this.inherited.parent.steps.size == 1) return false;\n\n        this.inherited.parent?.steps.delete(this);\n        super.destroy_();\n\n        return true;\n    }\n\n\n    constructor(inherited: InheritedFOMODData<Step>, instanceElement?: Element | undefined) {\n        super(instanceElement);\n        this.inherited = inherited;\n        this.groups = new Set();\n\n        if (this.instanceElement) {\n            this.name = this.instanceElement.getAttribute('name') ?? '';\n\n            const groupsElem = this.instanceElement.getElementsByTagName('optionalFileGroups')[0];\n            if (groupsElem) {\n                this.sortingOrder = groupsElem.getAttribute('order') as SortOrder || window.FOMODBuilder.storage.settings.defaultSortingOrder;\n\n                for (const group of groupsElem.children ?? [])\n                    this.addGroup(group);\n            }\n        }\n\n        if (this.groups.size == 0) this.addGroup();\n    }\n\n    // <installStep name=\"THE FIRST OF MANY STEPS\">\n    // <optionalFileGroups order=\"Explicit\">\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement ??= document.createElement('installStep');\n\n        this.instanceElement.setAttribute('name', this.name);\n\n        const visibility = this.conditions?.asModuleXML(document, 'visible');\n        if (visibility) this.instanceElement.appendChild(visibility);\n        else this.instanceElement.removeChildByTag('visible');\n\n        const optionalFileGroups = this.instanceElement.getOrCreateChildByTag('optionalFileGroups');\n        optionalFileGroups.setAttribute('order', this.sortingOrder);\n\n\n        for (const group of this.groups) optionalFileGroups.appendChild(group.asModuleXML(document));\n        this.instanceElement.appendChild(optionalFileGroups);\n\n        return this.instanceElement;\n    }\n}\n\n/***\n *     $$$$$$\\\n *    $$  __$$\\\n *    $$ /  \\__| $$$$$$\\   $$$$$$\\  $$\\   $$\\  $$$$$$\\   $$$$$$$\\\n *    $$ |$$$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |$$  __$$\\ $$  _____|\n *    $$ |\\_$$ |$$ |  \\__|$$ /  $$ |$$ |  $$ |$$ /  $$ |\\$$$$$$\\\n *    $$ |  $$ |$$ |      $$ |  $$ |$$ |  $$ |$$ |  $$ | \\____$$\\\n *    \\$$$$$$  |$$ |      \\$$$$$$  |\\$$$$$$  |$$$$$$$  |$$$$$$$  |\n *     \\______/ \\__|       \\______/  \\______/ $$  ____/ \\_______/\n *                                            $$ |\n *                                            $$ |\n *                                            \\__|\n */\n\nexport type GroupSelectType =\n    | 'SelectAll'           // Force-selects all options\n    | 'SelectAny'           // Allows users to select any number of options\n    | 'SelectAtMostOne'     // Requires users to select one or no options\n    | 'SelectAtLeastOne'    // Requires users to select at least one option\n    | 'SelectExactlyOne';   // Requires users to select exactly one option\nexport class Group extends FOMODElementProxy {\n    keysToUpdate = ['options'] as const;\n    inherited: InheritedFOMODData<Group>;\n\n    private _name = '';\n    set name(value: string) { this._name = value; this.updateObjects(); } get name(): string { return this._name; }\n\n    private _type: GroupSelectType = window.FOMODBuilder.storage.settings.defaultGroupSelectType;\n    set type(value: GroupSelectType) { this._type = value; this.updateObjects(); } get type(): GroupSelectType { return this._type; }\n\n    private _sortingOrder: SortOrder = window.FOMODBuilder.storage.settings.defaultSortingOrder;\n    set sortingOrder(value: SortOrder) { this._sortingOrder = value; this.updateObjects(); } get sortingOrder(): SortOrder { return this._sortingOrder; }\n\n    options: Set<Option>;\n\n    optionContainers: Record<string, HTMLDivElement> = {};\n\n    addOption(xmlElement?: ConstructorParameters<typeof Option>[1]) {\n        this.options.add(new Option({\n            base: this.inherited.base,\n            containers: this.optionContainers,\n            parent: this,\n        }, xmlElement));\n\n        this.updateWhole();\n    }\n    readonly addOption_bound = this.addOption.bind(this);\n\n    protected override destroy_(): void {\n        this.inherited.parent?.groups.delete(this);\n        super.destroy_();\n    }\n\n    constructor(inherited: InheritedFOMODData<Group>, instanceElement?: Element | undefined) {\n        super(instanceElement);\n        this.inherited = inherited;\n        this.options = new Set();\n\n        if (this.instanceElement) {\n            this.name = this.instanceElement.getAttribute('name') ?? '';\n            this.type = this.instanceElement.getAttribute('type') as GroupSelectType\n                || window.FOMODBuilder.storage.settings.defaultGroupSelectType;\n\n            const optionsElem = this.instanceElement.getElementsByTagName('plugins')[0];\n            if (optionsElem){\n                this.sortingOrder = optionsElem.getAttribute('order') as SortOrder || window.FOMODBuilder.storage.settings.defaultSortingOrder;\n\n                for (const option of optionsElem.children ?? [])\n                    this.addOption(option);\n            }\n        }\n\n        if (this.options.size == 0) this.addOption();\n    }\n\n    // <group name=\"Banana Types\" type=\"SelectAny\">\n    // <plugins order=\"Explicit\">\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement = this.instanceElement ?? document.createElement('group');\n\n        this.instanceElement.setAttribute('name', this.name);\n        this.instanceElement.setAttribute('type', this.type);\n\n        if (this.options.size > 0) {\n            const options = this.instanceElement.getOrCreateChildByTag('plugins');\n            options.setAttribute('order', this.sortingOrder);\n\n            for (const option of this.options) options.appendChild(option.asModuleXML(document));\n        } else\n            this.instanceElement.removeChildByTag('plugins');\n\n        return this.instanceElement;\n    }\n}\n\n/***\n *     $$$$$$\\              $$\\     $$\\\n *    $$  __$$\\             $$ |    \\__|\n *    $$ /  $$ | $$$$$$\\  $$$$$$\\   $$\\  $$$$$$\\  $$$$$$$\\   $$$$$$$\\\n *    $$ |  $$ |$$  __$$\\ \\_$$  _|  $$ |$$  __$$\\ $$  __$$\\ $$  _____|\n *    $$ |  $$ |$$ /  $$ |  $$ |    $$ |$$ /  $$ |$$ |  $$ |\\$$$$$$\\\n *    $$ |  $$ |$$ |  $$ |  $$ |$$\\ $$ |$$ |  $$ |$$ |  $$ | \\____$$\\\n *     $$$$$$  |$$$$$$$  |  \\$$$$  |$$ |\\$$$$$$  |$$ |  $$ |$$$$$$$  |\n *     \\______/ $$  ____/    \\____/ \\__| \\______/ \\__|  \\__|\\_______/\n *              $$ |\n *              $$ |\n *              \\__|\n */\n\nexport class Option extends FOMODElementProxy {\n    keysToUpdate = ['flagsToSet', 'files', 'typeDescriptor'] as const;\n    inherited: InheritedFOMODData<Option>;\n    protected override destroy_(): void {\n        this.inherited.parent?.options.delete(this);\n        super.destroy_();\n    }\n\n    private _name = '';\n    set name(value: string) { this._name = value; this.updateObjects(); } get name(): string { return this._name; }\n\n    private _description!: string;\n    set description(value: string) { this._description = value; this.updateObjects(); } get description(): string { return this._description; }\n\n    private _image!: string;\n    set image(value: string) { this._image = value; this.updateObjects(); } get image(): string { return this._image; }\n\n    flagsToSet: Set<DependencyFlag> = new Set();\n    flagsContainers: Record<string, HTMLDivElement> = {};\n\n    files: Set<DependencyFile> = new Set();\n    filesContainers: Record<string, HTMLDivElement> = {};\n\n    private _typeDescriptor!: OptionStateDescriptor;\n    set typeDescriptor(value: OptionStateDescriptor) { this._typeDescriptor = value; this.updateObjects(); } get typeDescriptor(): OptionStateDescriptor { return this._typeDescriptor; }\n\n    constructor(inherited: InheritedFOMODData<Option>, instanceElement?: Element | undefined) {\n        super(instanceElement);\n        this.inherited = inherited;\n\n        const typeDescriptor: Element|undefined = this.instanceElement?.getElementsByTagName('typeDescriptor')[0];\n        this.typeDescriptor = new OptionStateDescriptor(typeDescriptor);\n\n        if (!this.instanceElement) return;\n\n        this.name = this.instanceElement.getAttribute('name') || '';\n        this.description = this.instanceElement.getElementsByTagName('description')[0]?.textContent || '';\n        this.image = this.instanceElement.getElementsByTagName('image')[0]?.getAttribute('path') || '';\n\n        const inheritedForFlags = {\n            base: this.inherited.base,\n            parent: this,\n            containers: this.flagsContainers,\n        };\n        for (const flag of this.instanceElement.getElementsByTagName('flag') ?? [])\n            this.flagsToSet.add(new DependencyFlag('flag', inheritedForFlags, flag));\n\n        for (const file of this.instanceElement.getElementsByTagName('file') ?? [])\n            {}// this.files.add(new FomodFile(file));\n    }\n\n    addFlag(xmlElement?: ConstructorParameters<typeof Option>[1]) {\n        this.flagsToSet.add(new DependencyFlag('flag', {\n            base: this.inherited.base,\n            containers: this.flagsContainers,\n            parent: this,\n        }, xmlElement));\n\n        this.updateWhole();\n    }\n    readonly addFlag_bound = this.addFlag.bind(this, undefined);\n\n    override asModuleXML(document: XMLDocument): Element {\n        this.instanceElement =\n            this.instanceElement ?? document.createElement('plugin');\n\n        this.instanceElement.setAttribute('name', this.name);\n\n        const description  = this.instanceElement.getOrCreateChildByTag('description');\n        description.textContent = this.description;\n        this.instanceElement.appendChild(description);\n\n        if (this.image) {\n            const image = this.instanceElement.getOrCreateChildByTag('image');\n\n            image.setAttribute('path', this.image);\n            this.instanceElement.appendChild(image);\n        }\n        else this.instanceElement.removeChildByTag('image');\n\n        if (this.flagsToSet.size > 0) {\n            const flagsToSet = this.instanceElement.getOrCreateChildByTag('conditionFlags');\n\n            for (const flag of this.flagsToSet) flagsToSet.appendChild(flag.asModuleXML(document));\n            this.instanceElement.appendChild(flagsToSet);\n        } else\n            this.instanceElement.removeChildByTag('conditionFlags');\n\n        if (this.files.size > 0) {\n            const files = this.instanceElement.getOrCreateChildByTag('files');\n            for (const file of this.files) files.appendChild(file.asModuleXML(document));\n            this.instanceElement.appendChild(files);\n\n        } else if (this.flagsToSet.size == 0) { // Create an empty `files` element if there are no flags to set to comply with the spec\n            const emptyFilesElem = this.instanceElement.getOrCreateChildByTag('files');\n            this.instanceElement.appendChild(emptyFilesElem);\n\n        }\n        // Don't remove the `files` element for now. Once the Builder can parse files, this will be uncommented\n        // else\n        // this.instanceElement.removeChildByTag('files');\n\n        this.instanceElement.appendChild(this.typeDescriptor.asModuleXML(document));\n\n        return this.instanceElement;\n    }\n}\n\n/***\n *    $$$$$$$$\\  $$$$$$\\  $$\\      $$\\  $$$$$$\\  $$$$$$$\\        $$$$$$$\\\n *    $$  _____|$$  __$$\\ $$$\\    $$$ |$$  __$$\\ $$  __$$\\       $$  __$$\\\n *    $$ |      $$ /  $$ |$$$$\\  $$$$ |$$ /  $$ |$$ |  $$ |      $$ |  $$ | $$$$$$\\   $$$$$$$\\  $$$$$$\\\n *    $$$$$\\    $$ |  $$ |$$\\$$\\$$ $$ |$$ |  $$ |$$ |  $$ |      $$$$$$$\\ | \\____$$\\ $$  _____|$$  __$$\\\n *    $$  __|   $$ |  $$ |$$ \\$$$  $$ |$$ |  $$ |$$ |  $$ |      $$  __$$\\  $$$$$$$ |\\$$$$$$\\  $$$$$$$$ |\n *    $$ |      $$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |$$ |  $$ |      $$ |  $$ |$$  __$$ | \\____$$\\ $$   ____|\n *    $$ |       $$$$$$  |$$ | \\_/ $$ | $$$$$$  |$$$$$$$  |      $$$$$$$  |\\$$$$$$$ |$$$$$$$  |\\$$$$$$$\\\n *    \\__|       \\______/ \\__|     \\__| \\______/ \\_______/       \\_______/  \\_______|\\_______/  \\_______|\n */\n\nexport class Fomod extends FOMODElementProxy {\n    keysToUpdate = ['installs', 'conditions', 'steps'] as const;\n\n    private _metaName: string = '';\n    set metaName(value: string) {\n        this._metaName = value;\n        if (window.FOMODBuilder.storage.settings.keepNamesSynced) this._moduleName = value;\n        this.updateObjects();\n    }\n    get metaName(): string {\n        return this._metaName || (window.FOMODBuilder.storage.settings.keepNamesSynced ? this._moduleName : '');\n    }\n\n    private _moduleName: string = '';\n    set moduleName(value: string) {\n        this._moduleName = value;\n        if (window.FOMODBuilder.storage.settings.keepNamesSynced) this._metaName = value;\n        this.updateObjects();\n    }\n    get moduleName(): string {\n        return this._moduleName || (window.FOMODBuilder.storage.settings.keepNamesSynced ? this._metaName : '');\n    }\n\n    private _metaImage: string = '';\n    set metaImage(value: string) { this._metaImage = value; this.updateObjects(); } get metaImage(): string { return this._metaImage; }\n\n    private _metaAuthor: string = '';\n    set metaAuthor(value: string) { this._metaAuthor = value; this.updateObjects(); } get metaAuthor(): string { return this._metaAuthor; }\n\n    private _metaVersion: string = '';\n    /** The metadata version of this mod */\n    set metaVersion(value: string) { this._metaVersion = value; this.updateObjects(); } get metaVersion(): string { return this._metaVersion; }\n\n    private _metaId: number|null = null;\n    set metaId(value: number|null) { this._metaId = value; this.updateObjects(); } get metaId(): number|null { return this._metaId; }\n\n    private _infoInstanceElement: Element | undefined;\n    set infoInstanceElement(value: Element | undefined) { this._infoInstanceElement = value; this.updateObjects(); } get infoInstanceElement(): Element | undefined { return this._infoInstanceElement; }\n\n    private _metaUrl:URL|string = '';\n    get metaUrl():URL|string { return this._metaUrl; } set metaUrl(url:URL|string) {\n        if (url instanceof URL) this._metaUrl = url;\n        else {\n            try {\n                this._metaUrl = new URL(url);\n            } catch (e) {\n                this._metaUrl = url;\n                this.updateObjects();\n\n                //console.warn(`Invalid URL: \"${url}\"`);\n            }\n        }\n    }\n\n    getURLAsString():string{\n        return this.metaUrl instanceof URL ?\n                                              this.metaUrl.toString()\n                                            : this.metaUrl;\n    }\n\n\n    installs: Set<InstallElement>;\n\n    conditions: DependencyGroup | undefined;\n    steps: Set<Step>;\n\n    sortingOrder: SortOrder = window.FOMODBuilder.storage.settings.defaultSortingOrder;\n\n    stepContainers: Record<string, HTMLDivElement> = {};\n\n    addStep(xmlElement?: ConstructorParameters<typeof Step>[1]) {\n        this.steps.add(new Step({\n            base: this,\n            containers: this.stepContainers,\n            parent: this,\n        }, xmlElement));\n\n        this.updateObjects(true);\n    }\n    readonly addStep_bound = this.addStep.bind(this);\n\n    constructor(\n        instanceElement?: Element,\n        infoInstanceElement?: Element,\n    ) {\n        super(instanceElement);\n        this.infoInstanceElement = infoInstanceElement;\n\n        this.metaName =    infoInstanceElement?.getElementsByTagName('Name')           [0]?.textContent                        ?? '';\n        this.moduleName =      instanceElement?.getElementsByTagName('moduleName')     [0]?.textContent                        ?? '';\n        this.metaImage =       instanceElement?.getElementsByTagName('moduleImage')    [0]?.getAttribute('path')               ?? '';\n        this.metaAuthor =  infoInstanceElement?.getElementsByTagName('Author')         [0]?.textContent                        ?? '';\n        this.metaVersion = infoInstanceElement?.getElementsByTagName('Version')        [0]?.textContent                        ?? '';\n        this.metaUrl =     infoInstanceElement?.getElementsByTagName('Website')        [0]?.textContent                        ?? '';\n\n\n        const [,id] = infoInstanceElement?.getElementsByTagName('Id')[0]?.textContent?.match(/^\\s*(\\d+)\\s*$/) ?? [];\n        if (id) this.metaId = parseInt(id);\n        else this.metaId = null;\n\n        const stepsElem = instanceElement?.getElementsByTagName('installSteps')[0];\n        this.sortingOrder =         null || stepsElem?.getAttribute('order') as SortOrder || 'Explicit';\n\n        this.steps = new Set();\n        for (const step of (stepsElem?.children ?? [])) this.addStep(step);\n        if (this.steps.size == 0) this.addStep();\n\n        const conditionalInstallsElem = instanceElement?.getElementsByTagName('conditionalFileInstalls')[0]?.getElementsByTagName('patterns')[0];\n        const requiredInstallsElem = instanceElement?.getElementsByTagName('requiredInstallFiles')[0];\n        this.installs = new Set([...parseFiles(conditionalInstallsElem), ...parseFiles(requiredInstallsElem)]);\n\n        const moduleDependencies = instanceElement?.getElementsByTagName('moduleDependencies')[0];\n        if (moduleDependencies) this.conditions = new DependencyGroup(moduleDependencies);\n    }\n\n    override asModuleXML(document: XMLDocument): Element {\n        if (document.documentElement !== this.instanceElement) {\n            document.removeChild(document.documentElement);\n            this.instanceElement = document.getOrCreateChildByTag('config');\n        }\n\n        this.instanceElement.setAttribute('xmlns:xsi', 'https://www.w3.org/2001/XMLSchema-instance');\n        this.instanceElement.setAttribute('xsi:noNamespaceSchemaLocation', 'https://qconsulting.ca/fo3/ModConfig5.0.xsd');\n\n        const moduleName = this.instanceElement.getOrCreateChildByTag('moduleName');\n        moduleName.textContent = this.metaName;\n        this.instanceElement.appendChild(moduleName);\n\n        if (this.metaImage) {\n            const metaImage = this.instanceElement.getOrCreateChildByTag('moduleImage');\n            metaImage.setAttribute('path', this.metaImage);\n            this.instanceElement.appendChild(metaImage);\n        }\n        else                this.instanceElement.removeChildByTag     ('moduleImage');\n\n        if (this.conditions)\n            this.instanceElement.appendChild(this.conditions.asModuleXML(document, 'moduleDependencies'));\n        else\n            this.instanceElement.removeChildByTag('moduleDependencies');\n\n        const requiredInstallFiles = this.instanceElement.getOrCreateChildByTag('requiredInstallFiles');\n        const optionalInstallList:Element[] = [];\n        //for (const install of this.installs) {\n        //    const installElem = install.asModuleXML(document);\n        //    if (install.dependencies.length > 0)\n        //        optionalDependencies.push(installElem);\n        //    else\n        //        requiredInstallFiles.appendChild(installElem);\n        //}\n        if (requiredInstallFiles.children.length) this.instanceElement.appendChild(requiredInstallFiles);\n        else                                      this.instanceElement.removeChildByTag('requiredInstallFiles');\n\n        if (this.steps.size > 0) {\n            const stepsContainer = this.instanceElement.getOrCreateChildByTag('installSteps');\n            stepsContainer.setAttribute('order', this.sortingOrder);\n\n            for (const step of this.steps)\n                stepsContainer.appendChild(step.asModuleXML(document));\n\n            this.instanceElement.appendChild(stepsContainer);\n        } else\n            this.instanceElement.removeChildByTag('installSteps');\n\n        if (optionalInstallList.length) {\n            const conditionalFileInstalls = this.instanceElement.getOrCreateChildByTag('conditionalFileInstalls');\n            for (const install of optionalInstallList) conditionalFileInstalls.appendChild(install);\n            this.instanceElement.appendChild(conditionalFileInstalls);\n        } else\n            this.instanceElement.removeChildByTag('conditionalFileInstalls');\n\n        return this.instanceElement;\n    }\n\n    override asInfoXML(document: XMLDocument): Element {\n        if (document.documentElement !== this.infoInstanceElement) {\n            document.removeChild(document.documentElement);\n            this.infoInstanceElement = document.getOrCreateChildByTag('fomod');\n        }\n\n        // Set schema info\n        this.infoInstanceElement.setAttribute('xmlns:xsi', 'https://www.w3.org/2001/XMLSchema-instance');\n        if (window.FOMODBuilder.storage.settings.includeInfoSchema)\n            this.infoInstanceElement.setAttribute('xsi:noNamespaceSchemaLocation', 'https://testing.bellcube.dev/assets/site/misc/Info.xsd');\n        else if (this.infoInstanceElement.getAttribute('xsi:noNamespaceSchemaLocation') === 'https://testing.bellcube.dev/assets/site/misc/Info.xsd')\n            this.infoInstanceElement.removeAttribute('xsi:noNamespaceSchemaLocation');\n\n        // Set actual data\n        const url = this.getURLAsString();\n        if (this.metaName)          this.infoInstanceElement.getOrCreateChildByTag('Name').textContent    = this.metaName;\n        else                        this.infoInstanceElement.removeChildByTag     ('Name');\n\n        if (this.metaAuthor)        this.infoInstanceElement.getOrCreateChildByTag('Author').textContent  = this.metaAuthor;\n        else                        this.infoInstanceElement.removeChildByTag     ('Author');\n\n        if (this.metaId !== null)   this.infoInstanceElement.getOrCreateChildByTag('Id').textContent      = this.metaId.toString();\n        else                        this.infoInstanceElement.removeChildByTag     ('Id');\n\n        if (url)                    this.infoInstanceElement.getOrCreateChildByTag('Website').textContent = url;\n        else                        this.infoInstanceElement.removeChildByTag     ('Website');\n\n        if (this.metaVersion)       this.infoInstanceElement.getOrCreateChildByTag('Version').textContent = this.metaVersion;\n        else                        this.infoInstanceElement.removeChildByTag     ('Version');\n\n        return this.infoInstanceElement;\n    }\n}\n"],"mappings":"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"}