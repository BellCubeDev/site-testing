import * as fomodUI from './fomod-builder-ui.js';
import * as fomodClasses from './fomod-builder-classifications.js';
import * as bcdUniversal from '../../universal.js';
const storageRevision = 1;
const defaultStorage = {
    storageRevision,
    settings: {
        autoSaveAfterChange: false,
        autoCleanSave: false,
        keepNamesSynced: true,
        includeInfoSchema: true,
        optimizationUsingFlags: true,
        saveConfigInXML: false,
        brandingComment: false,
        defaultSortingOrder: 'Explicit',
        defaultGroupSelectType: 'SelectAtLeastOne',
        formatXML: true,
    },
    preferences: {
        stepsBuilder: 'builder',
    }
};
function mergeObjects(obj1, obj2) {
    const obj1Keys = Object.keys(obj1);
    const obj2Keys = Object.keys(obj2);
    const returnObj = {};
    for (let i = 0; i < obj1Keys.length; i++) {
        const key = obj1Keys[i];
        if (key in obj2) {
            if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object')
                returnObj[key] = mergeObjects(obj1[key], obj2[key]);
            else
                returnObj[key] = obj2[key] ?? obj1[key];
        }
        else
            returnObj[key] = obj1[key];
    }
    return returnObj;
}
const fetchedStorage = JSON.parse(localStorage.getItem('BellCubeDev_FOMOD_BUILDER_DATA') ?? '{}');
window.FOMODBuilder = {
    ui: {
        openFolder: fomodUI.openFolder,
        save: fomodUI.save,
        cleanSave: fomodUI.cleanSave,
        attemptRepair: () => { },
        setStepEditorType: fomodUI.setStepEditorType,
    },
    storage: mergeObjects(defaultStorage, fetchedStorage),
    fomodClass: fomodClasses.Fomod,
    trackedFomod: null
};
export const save = fomodUI.save;
function saveStorage() {
    bcdUniversal.updateSettings();
    try {
        localStorage.setItem('BellCubeDev_FOMOD_BUILDER_DATA', JSON.stringify(window.FOMODBuilder.storage));
    }
    catch {
        return false;
    }
    return true;
}
window.FOMODBuilder.storage = bcdUniversal.setProxies(window.FOMODBuilder.storage, {
    set() {
        return saveStorage();
    }
});
saveStorage();
let noSupportModal = null;
export function getNoSupportModal() {
    if (noSupportModal)
        return noSupportModal;
    const APIs = {
        '<a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API" target="_blank" rel="noopener noreferrer">File System Access API</a>': window.showOpenFilePicker,
    };
    const unavailableAPIs = [];
    for (const [api, testFunct] of Object.entries(APIs)) {
        if (!testFunct)
            unavailableAPIs.push(api);
    }
    const noSupportModal_elem = document.getElementById('no-support-modal');
    if (!noSupportModal_elem) {
        noSupportModal = null;
        return null;
    }
    if (unavailableAPIs.length)
        noSupportModal_elem.setAttribute('open-by-default', '');
    const replaceMeElem = noSupportModal_elem.getElementsByClassName('js-bcd-modal-body')[0]?.getElementsByClassName('replace_me_txt')[0];
    if (replaceMeElem) {
        const lastAPITested = unavailableAPIs.pop();
        replaceMeElem.innerHTML = unavailableAPIs.join(', ');
        if (lastAPITested) {
            if (unavailableAPIs.length > 1)
                replaceMeElem.innerHTML += `, and ${lastAPITested}`;
            else if (unavailableAPIs.length)
                replaceMeElem.innerHTML += ` and ${lastAPITested}`;
            else
                replaceMeElem.innerHTML += lastAPITested;
        }
    }
    noSupportModal = noSupportModal_elem.upgrades?.getExtends(bcdUniversal.BCDModalDialog)?.[0] ?? null;
    return noSupportModal;
}
window.bcd_init_functions.fomodBuilder = function fomodBuilderInit() {
    console.debug('Initializing the FOMOD Builder!');
    getNoSupportModal();
    fomodUI.init();
    bcdUniversal.updateSettings();
    console.debug('FOMOD Builder initialized!');
};
//# sourceMappingURL=data:application/json;base64,