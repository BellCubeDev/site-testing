import * as classes from './fomod-builder-classifications.js';
export function translateWhole(module, info, setWindowValues = false) {
    const parser = window.domParser;
    const moduleDoc = parser.parseFromString(module || '<config/>', 'text/xml');
    if (moduleDoc.documentElement.tagName !== 'config')
        throw new Error('ModuleConfig.xml is not valid!');
    const infoDoc = parser.parseFromString(info || '<fomod/>', 'text/xml');
    if (infoDoc.documentElement.tagName !== 'fomod')
        throw new Error('Info.xml is not valid!');
    console.log("Documents fetched!", { moduleDoc, infoDoc });
    const obj = new classes.Fomod(moduleDoc.getOrCreateChildByTag("config"), infoDoc.getOrCreateChildByTag("fomod"));
    if (setWindowValues) {
        if (window.FOMODBuilder.trackedFomod?.obj)
            window.FOMODBuilder.trackedFomod.obj.destroy();
        window.FOMODBuilder.trackedFomod = {
            obj,
            infoDoc,
            moduleDoc
        };
    }
    return obj;
}
const testInfo = `
<fomod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://testing.bellcube.dev/assets/site/misc/Info.xsd">
    <Name>Some Name™</Name>
    <Author>Best Author Ever!</Author>
    <Id>51238068465248570</Id>
    <Website>https://www.google.com/</Website>
    <Version>1.0.0</Version>
</fomod>
`;
const testModule = `
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://qconsulting.ca/fo3/ModConfig5.0.xsd">
    <moduleName>Some Name™</moduleName>
    <moduleImage path="fomod/WoodworkersWhim.png"/>
</config>
`;
window.loadTestFOMOD = () => {
    console.log("Loading test FOMOD...");
    const fomod = translateWhole(testModule, testInfo, true);
    console.log("FOMOD loaded!", fomod);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9tb2QtYnVpbGRlci14bWwtdHJhbnNsYXRvci5qcyIsInNvdXJjZVJvb3QiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQmVsbEN1YmVEZXYvc2l0ZS10ZXN0aW5nL2RlcGxveW1lbnQvIiwic291cmNlcyI6WyJ0b29scy9mb21vZC9mb21vZC1idWlsZGVyLXhtbC10cmFuc2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sb0NBQW9DLENBQUM7QUFFOUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFjLEVBQUUsSUFBWSxFQUFFLGVBQWUsR0FBRyxLQUFLO0lBQ2hGLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFFaEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLElBQUksV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEtBQUssUUFBUTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUV0RyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdkUsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sS0FBSyxPQUFPO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBRTNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztJQUV4RCxNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRWpILElBQUksZUFBZSxFQUFFO1FBQ2pCLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsR0FBRztZQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxRixNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksR0FBRztZQUMvQixHQUFHO1lBQ0gsT0FBTztZQUNQLFNBQVM7U0FDWixDQUFDO0tBQ0w7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFRRCxNQUFNLFFBQVEsR0FBRzs7Ozs7Ozs7Q0FRaEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHOzs7OztDQUtsQixDQUFDO0FBRUYsTUFBTSxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNsYXNzZXMgZnJvbSAnLi9mb21vZC1idWlsZGVyLWNsYXNzaWZpY2F0aW9ucy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVXaG9sZShtb2R1bGU6IHN0cmluZywgaW5mbzogc3RyaW5nLCBzZXRXaW5kb3dWYWx1ZXMgPSBmYWxzZSkgOiBjbGFzc2VzLkZvbW9kIHtcbiAgICBjb25zdCBwYXJzZXIgPSB3aW5kb3cuZG9tUGFyc2VyO1xuXG4gICAgY29uc3QgbW9kdWxlRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhtb2R1bGUgfHwgJzxjb25maWcvPicsICd0ZXh0L3htbCcpO1xuICAgIGlmIChtb2R1bGVEb2MuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUgIT09ICdjb25maWcnKSB0aHJvdyBuZXcgRXJyb3IoJ01vZHVsZUNvbmZpZy54bWwgaXMgbm90IHZhbGlkIScpOyAvLyBUT0RPOiBJbmZvcm0gdXNlciBvZiBlcnJvciBhbmQgcHJvdmlkZSBhIHdheSB0byBmaXggaXRcblxuICAgIGNvbnN0IGluZm9Eb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGluZm8gfHwgJzxmb21vZC8+JywgJ3RleHQveG1sJyk7XG4gICAgaWYgKGluZm9Eb2MuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUgIT09ICdmb21vZCcpIHRocm93IG5ldyBFcnJvcignSW5mby54bWwgaXMgbm90IHZhbGlkIScpOyAvLyBUT0RPOiBJbmZvcm0gdXNlciBvZiBlcnJvciBhbmQgcHJvdmlkZSBhIHdheSB0byBmaXggaXRcblxuICAgIGNvbnNvbGUubG9nKFwiRG9jdW1lbnRzIGZldGNoZWQhXCIsIHttb2R1bGVEb2MsIGluZm9Eb2N9KTtcblxuICAgIGNvbnN0IG9iaiA9IG5ldyBjbGFzc2VzLkZvbW9kKG1vZHVsZURvYy5nZXRPckNyZWF0ZUNoaWxkQnlUYWcoXCJjb25maWdcIiksIGluZm9Eb2MuZ2V0T3JDcmVhdGVDaGlsZEJ5VGFnKFwiZm9tb2RcIikpO1xuXG4gICAgaWYgKHNldFdpbmRvd1ZhbHVlcykge1xuICAgICAgICBpZiAod2luZG93LkZPTU9EQnVpbGRlci50cmFja2VkRm9tb2Q/Lm9iaikgd2luZG93LkZPTU9EQnVpbGRlci50cmFja2VkRm9tb2Qub2JqLmRlc3Ryb3koKTtcbiAgICAgICAgd2luZG93LkZPTU9EQnVpbGRlci50cmFja2VkRm9tb2QgPSB7XG4gICAgICAgICAgICBvYmosXG4gICAgICAgICAgICBpbmZvRG9jLFxuICAgICAgICAgICAgbW9kdWxlRG9jXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBsb2FkVGVzdEZPTU9EOiAoKSA9PiB2b2lkO1xuICAgIH1cbn1cblxuY29uc3QgdGVzdEluZm8gPSBgXG48Zm9tb2QgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB4c2k6bm9OYW1lc3BhY2VTY2hlbWFMb2NhdGlvbj1cImh0dHBzOi8vdGVzdGluZy5iZWxsY3ViZS5kZXYvYXNzZXRzL3NpdGUvbWlzYy9JbmZvLnhzZFwiPlxuICAgIDxOYW1lPlNvbWUgTmFtZeKEojwvTmFtZT5cbiAgICA8QXV0aG9yPkJlc3QgQXV0aG9yIEV2ZXIhPC9BdXRob3I+XG4gICAgPElkPjUxMjM4MDY4NDY1MjQ4NTcwPC9JZD5cbiAgICA8V2Vic2l0ZT5odHRwczovL3d3dy5nb29nbGUuY29tLzwvV2Vic2l0ZT5cbiAgICA8VmVyc2lvbj4xLjAuMDwvVmVyc2lvbj5cbjwvZm9tb2Q+XG5gO1xuXG5jb25zdCB0ZXN0TW9kdWxlID0gYFxuPGNvbmZpZyB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiIHhzaTpub05hbWVzcGFjZVNjaGVtYUxvY2F0aW9uPVwiaHR0cDovL3Fjb25zdWx0aW5nLmNhL2ZvMy9Nb2RDb25maWc1LjAueHNkXCI+XG4gICAgPG1vZHVsZU5hbWU+U29tZSBOYW1l4oSiPC9tb2R1bGVOYW1lPlxuICAgIDxtb2R1bGVJbWFnZSBwYXRoPVwiZm9tb2QvV29vZHdvcmtlcnNXaGltLnBuZ1wiLz5cbjwvY29uZmlnPlxuYDtcblxud2luZG93LmxvYWRUZXN0Rk9NT0QgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJMb2FkaW5nIHRlc3QgRk9NT0QuLi5cIik7XG4gICAgY29uc3QgZm9tb2QgPSB0cmFuc2xhdGVXaG9sZSh0ZXN0TW9kdWxlLCB0ZXN0SW5mbywgdHJ1ZSk7XG4gICAgY29uc29sZS5sb2coXCJGT01PRCBsb2FkZWQhXCIsIGZvbW9kKTtcbn07XG4iXX0=