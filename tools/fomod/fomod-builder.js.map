{"version":3,"file":"fomod-builder.ts","names":["fomodUI","fomodClasses","bcdUniversal","fetchedStorage","JSON","parse","localStorage","getItem","window","FOMODBuilder","ui","openFolder","save","cleanSave","attemptRepair","setStepEditorType","storage","mergeObjects","obj1","obj2","obj1Keys","Object","keys","returnObj","i","length","key","storageRevision","settings","autoSaveAfterChange","autoCleanSave","keepNamesSynced","includeInfoSchema","optimizationUsingFlags","saveConfigInXML","brandingComment","defaultSortingOrder","defaultGroupSelectType","formatXML","preferences","stepsBuilder","fomodClass","Fomod","trackedFomod","saveStorage","updateSettings","setItem","stringify","setProxies","set","noSupportModal","getNoSupportModal","APIs","showOpenFilePicker","unavailableAPIs","api","testFunct","entries","push","noSupportModal_elem","document","getElementById","setAttribute","replaceMeElem","getElementsByClassName","lastAPITested","pop","innerHTML","join","upgrades","getExtends","BCDModalDialog","bcd_init_functions","fomodBuilder","console","debug","init"],"sourceRoot":"https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/","sources":["https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/tools/fomod/fomod-builder.ts"],"sourcesContent":["import * as bcdFS from '../../filesystem-interface.js';\nimport * as fomodUI from './fomod-builder-ui.js';\nimport * as fomodClasses from  './fomod-builder-classifications.js';\nimport * as bcdUniversal from '../../universal.js';\n\ndeclare global {interface Window {\n    FOMODBuilder: {\n        ui: fomodUI.WindowUI\n        directory?: bcdFS.writeableFolder;\n        storage: builderStorage;\n        fomodClass: typeof fomodClasses.Fomod;\n        trackedFomod: null | {\n            obj: fomodClasses.Fomod,\n            infoDoc: XMLDocument,\n            moduleDoc: XMLDocument,\n        };\n    };\n}}\n\nexport interface builderStorage {\n    storageRevision: number,\n    /** Values that the user has explicitly set */\n    settings: {\n        /** Save after each change?\n            @default false */\n        autoSaveAfterChange: boolean; // false\n        /** ALWAYS nuke the document and start anew?\n            @default false */\n        autoCleanSave: boolean; // false\n\n        /** Keep the Name in Info.xml and the Module Name in Module.xml synced?\n           Will prefer the name in Info.xml if they are different\n           @default true */\n        keepNamesSynced: boolean; // true - disable when loading a FOMOD with desynced names\n\n        /** Include a schema link inside Info.xml?\n            @default true */\n        includeInfoSchema: boolean; // true\n        /** Automatically optimize the FOMOD by moving file installs to the end rather than after each step\n            @default true */\n        optimizationUsingFlags: boolean; // true\n\n        /** Whether or not we should save the FOMOD Builder settings inside of the XML document rather than the browser\n            @default false */\n        saveConfigInXML: boolean; // false\n        /** Whether or not we should include a comment directing users to the FOMOD Builder\n            @default false */\n        brandingComment: boolean; // false\n\n        /** What should the default Group Sorting Order be?\n            @default 'Explicit' */\n        defaultSortingOrder: fomodClasses.SortOrder; // 'Explicit'\n        /** What should the default Group Selection type be?\n            @default 'SelectAtLeastOne' */\n        defaultGroupSelectType: fomodClasses.GroupSelectType; // 'SelectAtLeastOne'\n\n        /** Whether we should format XML documents on save\n            @default true */\n        formatXML: boolean; // true\n    }\n    /** Things that the code has determined that the user prefers */\n    preferences: {\n        stepsBuilder: fomodUI.BCDBuilderType, // 'builder'\n    }\n}\n\nconst storageRevision = 1;\nconst defaultStorage: builderStorage =  {\n    storageRevision,\n    settings: {\n        autoSaveAfterChange: false,\n        autoCleanSave: false,\n\n        keepNamesSynced: true, // be sure to disable when loading a FOMOD with desynced names\n\n        includeInfoSchema: true,\n        optimizationUsingFlags: true,\n\n        saveConfigInXML: false,\n        brandingComment: false,\n\n        defaultSortingOrder: 'Explicit',\n        defaultGroupSelectType: 'SelectAtLeastOne',\n\n        formatXML: true,\n    },\n    preferences: {\n        stepsBuilder: 'builder',\n    }\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mergeObjects(obj1: Object, obj2: Object): Object {\n    const obj1Keys = Object.keys(obj1) as (keyof typeof obj1)[];\n    const obj2Keys = Object.keys(obj2) as (keyof typeof obj2)[];\n\n    const returnObj: Record<string, any> = {};\n\n    for (let i = 0; i < obj1Keys.length; i++) {\n        const key = obj1Keys[i]!;\n\n        if (key in obj2) {\n            if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object')\n                    returnObj[key] = mergeObjects(obj1[key], obj2[key]);\n            else returnObj[key] = obj2[key] ?? obj1[key];\n        } else\n            returnObj[key] = obj1[key];\n\n    }\n\n    return returnObj;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst fetchedStorage = JSON.parse(   localStorage.getItem('BellCubeDev_FOMOD_BUILDER_DATA') ?? '{}'   ) as builderStorage | {};\n\nwindow.FOMODBuilder = {\n\n    ui: {\n        openFolder: fomodUI.openFolder,\n        save: fomodUI.save,\n        cleanSave: fomodUI.cleanSave,\n        attemptRepair: () => {},\n        setStepEditorType: fomodUI.setStepEditorType,\n    },\n\n    // Retrieves the browser storage entry if available, otherwise uses the defaults.\n    storage: mergeObjects(defaultStorage, fetchedStorage) as builderStorage,\n\n    fomodClass: fomodClasses.Fomod,\n\n    trackedFomod: null\n};\n\nexport const save = fomodUI.save;\n\nfunction saveStorage() {\n    bcdUniversal.updateSettings();\n    try {\n        localStorage.setItem('BellCubeDev_FOMOD_BUILDER_DATA', JSON.stringify(window.FOMODBuilder.storage));\n    } catch {\n        return false;\n    }\n    return true;\n}\n\nwindow.FOMODBuilder.storage = bcdUniversal.setProxies(window.FOMODBuilder.storage, {\n    set(): boolean {\n        return saveStorage();\n    }\n});\nsaveStorage();\n\nlet noSupportModal: bcdUniversal.BCDModalDialog|null = null;\nexport function getNoSupportModal(): bcdUniversal.BCDModalDialog|null {\n    if (noSupportModal) return noSupportModal;\n\n    const APIs: Record<string, Function> = {\n        /* File System Access API */'<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\" target=\"_blank\" rel=\"noopener noreferrer\">File System Access API</a>': window.showOpenFilePicker,\n    };\n    const unavailableAPIs: string[] = [];\n    for (const [api, testFunct] of Object.entries(APIs)) {\n        if (!testFunct) unavailableAPIs.push(api);\n    }\n\n    const noSupportModal_elem = document.getElementById('no-support-modal') as HTMLDialogElement|null;\n    if (!noSupportModal_elem) {\n        noSupportModal = null;\n        return null;\n    }\n\n    if (unavailableAPIs.length) noSupportModal_elem.setAttribute('open-by-default', '');\n\n    const replaceMeElem = noSupportModal_elem.getElementsByClassName('js-bcd-modal-body')[0]?.getElementsByClassName('replace_me_txt')[0] as HTMLElement|undefined;\n\n    if (replaceMeElem) {\n\n        const lastAPITested = unavailableAPIs.pop();\n        replaceMeElem.innerHTML = unavailableAPIs.join(', ');\n\n        if (lastAPITested) {\n            if (unavailableAPIs.length > 1) replaceMeElem.innerHTML += `, and ${lastAPITested}`;\n\n            else if (unavailableAPIs.length) replaceMeElem.innerHTML += ` and ${lastAPITested}`;\n\n            else replaceMeElem.innerHTML += lastAPITested;\n        }\n\n    }\n\n    noSupportModal = noSupportModal_elem.upgrades?.getExtends(bcdUniversal.BCDModalDialog)?.[0] ?? null;\n    return noSupportModal;\n}\n\nwindow.bcd_init_functions.fomodBuilder = function fomodBuilderInit() {\n    console.debug('Initializing the FOMOD Builder!');\n\n    getNoSupportModal();\n\n    fomodUI.init();\n\n    bcdUniversal.updateSettings();\n\n    console.debug('FOMOD Builder initialized!');\n};\n"],"mappings":"UACYA,OAAa,kCACbC,OAAmB,+CACnBC,MAAkB,qBA+D9B,MAgDMC,GAAiBC,KAAKC,MAASC,aAAaC,QAAQ,mCAAqC,MAE/FC,OAAOC,aAAe,CAElBC,GAAI,CACAC,WAAYX,GAAQW,WACpBC,KAAMZ,GAAQY,KACdC,UAAWb,GAAQa,UACnBC,gBAAe,EACfC,kBAAmBf,GAAQe,mBAI/BC,QAnCJ,SAASC,EAAaC,EAAcC,GAChC,MAAMC,EAAWC,OAAOC,KAAKJ,GAGvBK,GAFWF,OAAOC,KAAKH,GAEU,IAEvC,IAAK,IAAIK,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAAK,CACtC,MAAME,EAAMN,EAASI,GAEjBE,KAAOP,EACkB,iBAAdD,EAAKQ,IAA0C,iBAAdP,EAAKO,GACzCH,EAAUG,GAAOT,EAAaC,EAAKQ,GAAMP,EAAKO,IACjDH,EAAUG,GAAOP,EAAKO,IAAQR,EAAKQ,GAExCH,EAAUG,GAAOR,EAAKQ,E,CAI9B,OAAOH,CACX,CAgBaN,CA5D2B,CACpCU,gBAFoB,EAGpBC,SAAU,CACNC,qBAAqB,EACrBC,eAAe,EAEfC,iBAAiB,EAEjBC,mBAAmB,EACnBC,wBAAwB,EAExBC,iBAAiB,EACjBC,iBAAiB,EAEjBC,oBAAqB,WACrBC,uBAAwB,mBAExBC,WAAW,GAEfC,YAAa,CACTC,aAAc,YAwCoBrC,IAEtCsC,WAAYxC,GAAayC,MAEzBC,aAAc,aAGX,MAAM/B,KAAOZ,GAAQY,KAE5B,SAASgC,KACL1C,EAAa2C,iBACb,IACIvC,aAAawC,QAAQ,iCAAkC1C,KAAK2C,UAAUvC,OAAOC,aAAaO,S,CAC5F,MACE,OAAO,C,CAEX,OAAO,CACX,CAEAR,OAAOC,aAAaO,QAAUd,EAAa8C,WAAWxC,OAAOC,aAAaO,QAAS,CAC/EiC,IAAG,IACQL,OAGfA,KAEA,IAAIM,GAAmD,YACjD,SAAUC,oBACZ,GAAID,GAAgB,OAAOA,GAE3B,MAAME,EAAiC,CACP,yJAA0J5C,OAAO6C,oBAE3LC,EAA4B,GAClC,IAAK,MAAOC,EAAKC,KAAcnC,OAAOoC,QAAQL,GACrCI,GAAWF,EAAgBI,KAAKH,GAGzC,MAAMI,EAAsBC,SAASC,eAAe,oBACpD,IAAKF,EAED,OADAT,GAAiB,KACV,KAGPI,EAAgB7B,QAAQkC,EAAoBG,aAAa,kBAAmB,IAEhF,MAAMC,EAAgBJ,EAAoBK,uBAAuB,qBAAqB,IAAIA,uBAAuB,kBAAkB,GAEnI,GAAID,EAAe,CAEf,MAAME,EAAgBX,EAAgBY,MACtCH,EAAcI,UAAYb,EAAgBc,KAAK,MAE3CH,IACIX,EAAgB7B,OAAS,EAAGsC,EAAcI,WAAa,SAASF,IAE3DX,EAAgB7B,OAAQsC,EAAcI,WAAa,QAAQF,IAE/DF,EAAcI,WAAaF,E,CAMxC,OADAf,GAAiBS,EAAoBU,UAAUC,WAAWpE,EAAaqE,kBAAkB,IAAM,KACxFrB,EACX,CAEA1C,OAAOgE,mBAAmBC,aAAe,WACrCC,QAAQC,MAAM,mCAEdxB,oBAEAnD,GAAQ4E,OAER1E,EAAa2C,iBAEb6B,QAAQC,MAAM,6BAClB"}