import hljs from '../../../assets/site/highlight_js/highlight.js';
import typescript from '../../../assets/site/highlight_js/languages/typescript.js';
hljs.registerLanguage('typescript', typescript);
window.bcd_init_functions.tsFromInline = function tsFromInline() {
    window.fromInline = {};
    window.fromInline.ui = {
        dataUpdated(evt) {
            console.debug('Data updated:', evt);
            if (!evt)
                throw new Error('There must be no hero, for there is no event.');
            const elem = evt.target;
            if (!elem)
                throw new Error('no target');
            try {
                parseData(elem.value.trim());
            }
            catch (err) {
                console.info('Parser failed with error', err);
                setOutput({});
            }
        }
    };
};
function parseData(str) {
    [, str] = str.match(/^\/\/# sourceMappingURL=(.*)/mi) ?? [undefined, str];
    console.debug('Parsing data:', str);
    try {
        const urlFrom = new URL(str);
        parseFromURL(urlFrom);
    }
    catch (err) {
        if (!(err instanceof TypeError))
            throw err;
        console.debug('Input is not a URL', str, '\n', err);
        parseFromJSON(str);
    }
}
async function parseFromURL(uri) {
    if (typeof uri === 'string')
        uri = new URL(uri);
    else if (!(uri instanceof URL))
        throw new Error('Input is not a valid URI');
    if (uri.protocol !== 'data:')
        throw new Error('Only `data:` URIs are supported');
    const [, ext, data] = uri.pathname.trim().match(/^(.+?);(?:[^,]*?;)*base64,(.*)$/) ?? [];
    if (ext !== 'application/json' || !data) {
        console.error(uri);
        throw new Error('Invalid Data URI or incorrect MIME type - see the above output for the URI');
    }
    const str = atob(data);
    parseFromJSON(str);
}
function parseFromJSON(obj) {
    if (typeof obj === 'string')
        obj = JSON.parse(obj);
    else if (typeof obj !== 'object')
        throw new Error('Input is not a JSON object');
    console.debug('Working with object:\n', obj);
    const sources = {};
    for (let i = 0; i < obj.sources.length; i++) {
        const file = obj.sources[i];
        const contents = obj.sourcesContent[i].trim().replace(/[^\n\S]+(?:\r\n?|\n)/g, '\n') + '\n';
        console.debug('Source', i, { [`${file}`]: contents });
        sources[file] = contents;
    }
    setOutput(sources);
}
async function setOutput(outs_) {
    const prefabOutput = document.getElementById('prefab-output');
    const outputArea = document.getElementById('output-area');
    const outs = Object.entries(outs_);
    outputArea.style.opacity = '0';
    await new Promise(resolve => {
        outputArea.addEventListener('transitionend', resolve, { once: true });
        setTimeout(() => {
            outputArea.removeEventListener('transitionend', resolve);
            resolve('timeout');
        }, 200);
    });
    outputArea.innerHTML = '';
    outputArea.style.opacity = '1';
    for (let i = 0; i < outs.length; i++) {
        const [file, data] = outs[i];
        const output = prefabOutput.cloneNode(true);
        output.id = `output-${i}`;
        output.classList.remove('hidden');
        output.removeAttribute('aria-hidden');
        output.querySelector('h3').textContent = file.trim();
        const code = output.querySelector('pre > code');
        code.innerHTML = hljs.highlight(data.trim(), { language: 'typescript' }).value.replace(/^\s*/y, '');
        outputArea.appendChild(output);
    }
}
//# sourceMappingURL=data:application/json;base64,