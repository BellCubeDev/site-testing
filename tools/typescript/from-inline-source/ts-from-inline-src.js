import ds from"../../../assets/site/highlight_js/highlight.js";import er from"../../../assets/site/highlight_js/languages/typescript.js";function tr(e){if("string"==typeof e)e=JSON.parse(e);else if("object"!=typeof e)throw new Error("Input is not a JSON object");console.debug("Working with object:\n",e);const t={};for(let o=0;o<e.sources.length;o++){const n=e.sources[o],r=e.sourcesContent[o].trim().replace(/[^\n\S]+(?:\r\n?|\n)/g,"\n")+"\n";console.debug("Source",o,{[`${n}`]:r}),t[n]=r}or(t)}async function or(e){const t=document.getElementById("prefab-output"),o=document.getElementById("output-area"),n=Object.entries(e);o.style.opacity="0",await new Promise(e=>{o.addEventListener("transitionend",e,{once:!0}),setTimeout(()=>{o.removeEventListener("transitionend",e),e("timeout")},200)}),o.innerHTML="",o.style.opacity="1";for(let r=0;r<n.length;r++){const[e,i]=n[r],s=t.cloneNode(!0);s.id=`output-${r}`,s.classList.remove("hidden"),s.removeAttribute("aria-hidden"),s.querySelector("h3").textContent=e.trim(),s.querySelector("pre > code").innerHTML=ds.highlight(i.trim(),{language:"typescript"}).value.replace(/^\s*/y,""),o.appendChild(s)}}ds.registerLanguage("typescript",er),window.bcd_init_functions.tsFromInline=function(){window.fromInline={},window.fromInline.ui={dataUpdated(e){if(console.debug("Data updated:",e),!e)throw new Error("There must be no hero, for there is no event.");const t=e.target;if(!t)throw new Error("no target");try{!function(e){[,e]=e.match(/^\/\/# sourceMappingURL=(.*)/im)??[void 0,e],console.debug("Parsing data:",e);try{!async function(e){if("string"==typeof e)e=new URL(e);else if(!(e instanceof URL))throw new Error("Input is not a valid URI");if("data:"!==e.protocol)throw new Error("Only `data:` URIs are supported");const[,t,o]=e.pathname.trim().match(/^(.+?);(?:[^,]*?;)*base64,(.*)$/)??[];if("application/json"!==t||!o)throw console.error(e),new Error("Invalid Data URI or incorrect MIME type - see the above output for the URI");tr(atob(o))}(new URL(e))}catch(t){if(!(t instanceof TypeError))throw t;console.debug("Input is not a URL",e,"\n",t),tr(e)}}(t.value.trim())}catch(o){console.info("Parser failed with error",o),or({})}}}};
//# sourceMappingURL=https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/tools/typescript/from-inline-source/ts-from-inline-src.js.map