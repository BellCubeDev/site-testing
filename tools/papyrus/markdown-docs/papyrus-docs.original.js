import { trimWhitespace, capitalizeFirstLetter, registerForEvents } from '../../../universal.js';
import hljs from '../../../assets/site/highlight_js/highlight.js';
import markdown from '../../../assets/site/highlight_js/languages/markdown.js';
hljs.registerLanguage('markdown', markdown);
let elem_papy_docs_libName;
let elem_papy_docs_libLink;
let elem_papy_docs_registerPattern;
let elem_papy_docs_mdOutput;
let elem_papy_docs_filePicker;
let elem_papy_docs_folderPicker;
export function ___bcdLoad_autoPapyDocsInit() {
    const temp_elements = [
        document.getElementById('papy_docs_lib-Name'),
        document.getElementById('papy_docs_lib-Link'),
        document.getElementById('papy_docs_register-pattern'),
        document.getElementById('papy_docs_md-output'),
        document.getElementById('papy_docs_file-picker'),
        document.getElementById('papy_docs_folder-picker')
    ];
    if (temp_elements.some(e => e === null)) {
        console.log(temp_elements);
        throw new TypeError(`Looks like we're Missing elements!`);
    }
    elem_papy_docs_libName = temp_elements[0];
    elem_papy_docs_libLink = temp_elements[1];
    elem_papy_docs_registerPattern = temp_elements[2];
    elem_papy_docs_mdOutput = temp_elements[3];
    elem_papy_docs_filePicker = temp_elements[4];
    registerForEvents(elem_papy_docs_filePicker, { activate: generateDocs_file });
    elem_papy_docs_folderPicker = temp_elements[5];
    registerForEvents(elem_papy_docs_folderPicker, { activate: generateDocs_folder });
}
window.bcd_init_functions.papyDocs = ___bcdLoad_autoPapyDocsInit;
const regex_Scriptname = /^Scriptname ([\w\d]+)(?:\s+extends ([\w\d]+))?(?:\s+(hidden))?(\s+(?:conditional))?(?:\s+(native))?(?:[\n\s]+\{([^}]+)\})?/is;
const regex_Events = /\n*((?:^\s*;.*\n)+)(?:\s|;\/(?:\s|\S)*?\/;|\\)*Event(?:\s|;\/(?:\s|\S)*?\/;|\\)+([\w\d]+)(?:\s|;\/(?:\s|\S)*?\/;|\\)*\((?:\s|;\/(?:\s|\S)*?\/;|\\)*((?:[\w\d]+(?:\s|;\/(?:\s|\S)*?\/;|\\)+[\w\d]+(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)*=(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:[\w\d]+|".*?(?<!\\)"))?(?:(?:\s|;\/(?:\s|\S)*?\/;|\\))*,(?:\s|;\/(?:\s|\S)*?\/;|\\)+)*[\w\d]+(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)+[\w\d]+(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:=(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:[\w\d]+|".*?(?<!\\)"))?))?(?:\s|;\/(?:\s|\S)*?\/;|\\)*\)([\s\S]+?)^(?:\s|;\/(?:\s|\S)*?\/;|\\)*EndEvent/gim;
const regex_Parameters = /(?:\s|;\/.*?\/;|\\)*([\w\d]+)(\[])?(?:\s|;\/.*?\/;|\\)+([\w\d]+)(?:\s|;\/.*?\/;|\\)*(?:=(?:\s|;\/.*?\/;|\\)*(".+(?<!\\)"|[\w\d]+))?/gsi;
const regex_Functions = /\n*((?:^\s*;.*\n)+)?(?:([\w\d]+)(\[.*?\])?(?:\s|;\/(?:\s|\S)*?\/;|\\)+)?Function(?:\s|;\/(?:\s|\S)*?\/;|\\)+([\w\d]+)(?:\s|;\/(?:\s|\S)*?\/;|\\)*\((?:\s|;\/(?:\s|\S)*?\/;|\\)*((?:[\w\d]+(?:\s|;\/(?:\s|\S)*?\/;|\\)+[\w\d]+(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)*=(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:[\w\d]+(?:\.\d+)?|".*?(?<!\\)"))?(?:(?:\s|;\/(?:\s|\S)*?\/;|\\))*,(?:\s|;\/(?:\s|\S)*?\/;|\\)+)*[\w\d]+(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)+[\w\d]+(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:=(?:\s|;\/(?:\s|\S)*?\/;|\\)*(?:[\w\d]+(?:\.\d+)?|".*?(?<!\\)"))?))?(?:\s|;\/(?:\s|\S)*?\/;|\\)*\)(?:\s|;\/(?:\s|\S)*?\/;|\\)+(?:(global)(?:\s|;\/(?:\s|\S)*?\/;|\\)+)?(?:(native)(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)+(global))?(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)+\{(.*?)\})?|(?:(?:(?:\s|;\/(?:\s|\S)*?\/;|\\)+\{(.*?)\})?([\s\S]+?)^(?:\s|;\/(?:\s|\S)*?\/;|\\)*EndFunction))/gmi;
const specialCharacters = ['*', '_', '-', '<', '>', '`', '~', '#', '^', '[', ']', '(', ')', '|', ':'];
const regex_SpecialCharacters = new RegExp(`[\\${specialCharacters.join('\\')}]`, 'g');
function escapeSpecialCharacters(str) {
    return str.replace(regex_SpecialCharacters, '\\$&');
}
function setMarkdownOutput(str) {
    elem_papy_docs_mdOutput.innerHTML = hljs.highlight(str, { language: 'md' }).value;
}
async function generateDocs_file() {
    let file;
    try {
        file = (await window.showOpenFilePicker())[0];
    }
    catch (e) {
        if (e instanceof Error && e.name === 'AbortError') {
            return;
        }
        else {
            throw e;
        }
    }
    if (!tryForPermission(file, 'read'))
        return;
    setMarkdownOutput(parseScript(await readFile(await file.getFile())));
}
async function generateDocs_folder() {
    let folder;
    try {
        folder = await window.showDirectoryPicker();
        await attainDirPerms(folder);
    }
    catch (e) {
        if (e.name === 'AbortError') {
            return;
        }
        else {
            throw e;
        }
    }
    await forEachFile(folder, iterationFunction, -1);
    async function iterationFunction(name, file, directory) {
        if (file.kind === 'file' && name.endsWith('.psc')) {
            const tempOut = parseScript(await readFile(await file.getFile()));
            writeFile(await directory.getFileHandle(`${name}.md`, { create: true }), tempOut);
            setMarkdownOutput(tempOut);
        }
    }
}
async function forEachFile(dir, callback, recursion = 0) {
    const promises = [];
    for await (const [name, file] of dir.entries()) {
        if (file.kind === 'file') {
            promises.push(callback(name, file, dir));
        }
        else if (file.kind === 'directory' && recursion != 0) {
            promises.push(forEachFile(file, callback, recursion - 1));
        }
    }
    return await Promise.all(promises);
}
async function tryForPermission(object, perm) {
    return await object.queryPermission({ mode: perm }) === 'granted' || await object.requestPermission({ mode: perm }) === 'granted';
}
function readFile(file) {
    return new Promise((resolve, reject) => {
        const temp_fileReader = new FileReader();
        temp_fileReader.onload = (readerEvent) => {
            if (readerEvent.target && typeof readerEvent.target.result === 'string')
                resolve(readerEvent.target.result.replace(/\r\n?/g, '\n'));
        };
        temp_fileReader.onerror = (err) => {
            reject(err);
        };
        temp_fileReader.readAsText(file);
    });
}
async function writeFile(fileHandle, contents) {
    const writable = await fileHandle.createWritable();
    await writable.write(contents);
    writable.close();
}
async function attainDirPerms(dir) {
    while (!(await tryForPermission(dir, 'readwrite'))) {
        if (!window.confirm("You must give write permissions for this directory to use this application.\n\nClick OK to give permissions.")) {
            throw new DOMException('User denied directory write access', 'AbortError');
        }
    }
}
function parseScript(scriptStr) {
    const scriptname = parseScriptName(scriptStr);
    const functions = sortArrayOfObjectAlphaByKey(parseFunctions(scriptStr), 'name');
    let functionTable = '';
    const events = sortArrayOfObjectAlphaByKey(parseEvents(scriptStr), 'name');
    let eventTable = '';
    for (const event of events) {
        const eventTableRow = `| [${escapeSpecialCharacters(event.name)}](${inputValue(elem_papy_docs_libLink).replace(/\/?$/, '/')}${scriptname.name}/${event.name}) | ${escapeSpecialCharacters(event.description.replace(/\n/g, '<br />'))}${scriptStr.toLowerCase().includes(inputValue(elem_papy_docs_registerPattern).replace(/%e%/ig, event.name.replace(/^on/i, '').replace(/(?:event)?(?:unregister(?:ed)?)?$/i, '').replace(/start|stop/i, '')).toLowerCase()) ? ' | Registered | ' : ' | Unregistered | '}` +
            event.parameters.map((param) => `\`${escapeSpecialCharacters(param.script)}\` *${escapeSpecialCharacters(param.name)}*`).join(', <br />').replace(/, <br \/>$/, '') +
            ' |\n';
        eventTable += eventTableRow;
    }
    for (const func of functions) {
        const funcTableRow = `| ${func.returns.script}${func.returns.isArray ? '[]' : ''} | ${func.name} | ${func.description.replace(/\n/g, '<br />')} | ` +
            func.parameters.map(param => `\`${escapeSpecialCharacters(param.script)}\` *${escapeSpecialCharacters(param.name)}*`).join(', <br />').replace(/, <br \/>$/, '') +
            `| ${func.global ? 'Global' : 'Member'} | ${func.native ? 'Native' : 'Scripted'} |\n`;
        functionTable += funcTableRow;
    }
    return trimWhitespace(`# ${scriptname.name}

| :-: | :-- |
| Engine-Bound Type | <!-- **USER-INPUTTED** --> | <!-- e.g. \`_NPC\` (Actor) -->
| [Parent](/skyrim/developers/papyrus/concepts/scripts#parents) | ${escapeSpecialCharacters(scriptname.parent)} |
| [Library](/skyrim/developers/papyrus/concepts/libraries) | [${escapeSpecialCharacters(inputValue(elem_papy_docs_libName))}](${escapeSpecialCharacters(inputValue(elem_papy_docs_libLink))}) |

${escapeSpecialCharacters(scriptname?.documentation?.replace(/^/gsm, '> ').replace(/^> $/g, '') ?? '')}

<!-- **Add extra description HERE** -->${functionTable.length > 0 ? `



## [Native Functions](/skyrim/developers/papyrus/concepts/functions#native-flag)
| Return Type | Function | Description | Parameters | [Global](/en/skyrim/developers/papyrus/concepts/functions#global_flag)? | [Native](/skyrim/developers/papyrus/concepts/functions#native-flag)?
| --: | :-: | :-: | :-: | :-: | :-: |` : ''}
${functionTable}${eventTable.length > 0 ? `



## [Events](https://modding.wiki/en/skyrim/developers/papyrus/concepts/events)
| Event | Description | [Registration](https://modding.wiki/en/skyrim/developers/papyrus/concepts/functions#registration) | Parameters |
| :-- | :-: | :-: | :-- |` : ''}
${eventTable}



# Returning [Native Functions](https://modding.wiki/en/skyrim/developers/papyrus/concepts/functions#native-flag)

[Native Functions](https://modding.wiki/en/skyrim/developers/papyrus/concepts/functions#native-flag) from any script or library that return an instance of this script

<!-- **MUST BE CREATED MANUALLY** -->
| Function | Description | [Array](/skyrim/developers/papyrus/concepts/arrays) | Script  | Library |
|    :-:   |     :-:     |                         :-:                         |   :-:   |   :-:   |



# [Children](/skyrim/developers/papyrus/concepts/scripts#children)

Scripts extending this script

<!-- **MUST BE CREATED MANUALLY** -->
| Script Name | Has Engine-Bound Type? | <!-- Scripts with engine-bound types should come first -->
|     :-:     |          :-:           |
`, true);
}
function parseScriptName(scriptStr) {
    const parsed = scriptStr.match(regex_Scriptname);
    if (!parsed)
        return {
            name: '',
            parent: '',
            documentation: '',
            conditional: false,
            hidden: false,
            native: false
        };
    return {
        name: parsed[1] ?? '',
        documentation: typeof parsed[6] === 'undefined' ? '' : parsed[6],
        parent: typeof parsed[2] === 'undefined' ? '[Top-Level](/skyrim/developers/papyrus/top-level-index)' : parsed[2],
        hidden: typeof parsed[3] !== 'undefined',
        conditional: typeof parsed[4] !== 'undefined',
        native: typeof parsed[5] !== 'undefined'
    };
}
function parseEvents(scriptStr) {
    const events = [];
    const parsed = scriptStr.matchAll(regex_Events);
    for (const eventMatch of parsed) {
        events.push({
            name: eventMatch[2] ?? '',
            description: trimWhitespace(eventMatch[1] ?? '').replace(/^\s*;\s*/gm, ''),
            parameters: parseParameters(eventMatch[3] ?? ''),
            body: typeof eventMatch[4] === 'undefined' ? '' : trimWhitespace(eventMatch[4]),
            global: false,
            native: false,
            returns: { script: 'None', isArray: false }
        });
    }
    return events;
}
function parseParameters(paramStr) {
    if (typeof paramStr !== 'string')
        return [];
    const result_arr = [];
    const params = paramStr.matchAll(regex_Parameters);
    for (const param of params) {
        result_arr.push({
            script: capitalizeFirstLetter(param[1] ?? ''),
            isArray: param[2] !== undefined,
            name: param[3] ?? '',
            default: typeof param[4] === 'undefined' ? '' : param[3] ?? ''
        });
    }
    return result_arr;
}
function parseFunctions(scriptStr) {
    const functions = [];
    const parsed = scriptStr.matchAll(regex_Functions);
    for (const _function of parsed) {
        functions.push({
            returns: { script: typeof _function[2] === 'undefined' ? '' : capitalizeFirstLetter(_function[2]), isArray: typeof _function[3] !== 'undefined' },
            name: _function[4] ?? '',
            description: (typeof _function[1] === 'undefined' ? '' : trimWhitespace(_function[1]).replace(/^\s*;\s*/gm, '')) +
                (typeof _function[1] === 'undefined' || typeof _function[8] === 'undefined' ? '' : '\n\n') +
                (typeof _function[8] === 'undefined' ? '' : trimWhitespace(_function[8]).replace(/^\s*;\s*/gm, '')) +
                (typeof _function[8] === 'undefined' || typeof _function[9] === 'undefined' ? '' : '\n\n') +
                (typeof _function[9] === 'undefined' ? '' : trimWhitespace(_function[9]).replace(/^\s*;\s*/gm, '')),
            parameters: parseParameters(_function[5] ?? ''),
            global: typeof _function[6] !== 'undefined' || typeof _function[8] !== 'undefined',
            native: typeof _function[7] !== 'undefined',
            body: _function[11] === 'string' ? trimWhitespace(_function[9] ?? '') : ''
        });
    }
    return functions;
}
function inputValue(element, usePlaceholder = true) {
    if (typeof element === 'undefined')
        return '';
    try {
        if (typeof element.value !== 'undefined' && element.value != '')
            return element.value;
        if (element.hasAttribute('placeholder') && usePlaceholder)
            return element.getAttribute('placeholder') ?? '';
    }
    finally { }
    return '';
}
function sortArrayOfObjectAlphaByKey(obj, key) {
    return obj.sort((a, b) => {
        const textA = JSON.stringify(a[key]).toUpperCase();
        const textB = JSON.stringify(b[key]).toUpperCase();
        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFweXJ1cy1kb2NzLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbInRvb2xzL3BhcHlydXMvbWFya2Rvd24tZG9jcy9wYXB5cnVzLWRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWpHLE9BQU8sSUFBSSxNQUFPLGdEQUFnRCxDQUFDO0FBR25FLE9BQU8sUUFBUSxNQUFNLHlEQUF5RCxDQUFDO0FBQy9FLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFRNUMsSUFBSSxzQkFBdUMsQ0FBQztBQUM1QyxJQUFJLHNCQUF1QyxDQUFDO0FBQzVDLElBQUksOEJBQStDLENBQUM7QUFDcEQsSUFBSSx1QkFBbUMsQ0FBQztBQUN4QyxJQUFJLHlCQUFxQyxDQUFDO0FBQzFDLElBQUksMkJBQXVDLENBQUM7QUFFNUMsTUFBTSxVQUFVLDJCQUEyQjtJQUN2QyxNQUFNLGFBQWEsR0FBRztRQUNsQixRQUFRLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDO1FBQzdDLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUM7UUFDN0MsUUFBUSxDQUFDLGNBQWMsQ0FBQyw0QkFBNEIsQ0FBQztRQUNyRCxRQUFRLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDO1FBQzlDLFFBQVEsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUM7UUFDaEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQztLQUNyRCxDQUFDO0lBQ0YsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ3JDLE9BQU8sQ0FB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QWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUUvRztZQUFTLEdBQUU7SUFBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQixDQUFDO0FBR0QsU0FBUywyQkFBMkIsQ0FBeUIsR0FBUSxFQUFFLEdBQXNCO0lBQ3pGLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWMsRUFBRSxDQUFjLEVBQUUsRUFBRTtRQUMvQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25ELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkQsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmltV2hpdGVzcGFjZSwgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyLCByZWdpc3RlckZvckV2ZW50cyB9IGZyb20gJy4uLy4uLy4uL3VuaXZlcnNhbC5qcyc7XG5cbmltcG9ydCBobGpzIGZyb20gICcuLi8uLi8uLi9hc3NldHMvc2l0ZS9oaWdobGlnaHRfanMvaGlnaGxpZ2h0LmpzJztcblxuLy8gSExKUyBMYW5ndWFnZSBEZWZpbml0aW9uXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi4vLi4vLi4vYXNzZXRzL3NpdGUvaGlnaGxpZ2h0X2pzL2xhbmd1YWdlcy9tYXJrZG93bi5qcyc7XG5obGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoJ21hcmtkb3duJywgbWFya2Rvd24pO1xuXG5cbi8qXG4gICAgVGhhbmtzIHRvIFBhdHJpY2sgR2lsbGVzcGllIGZvciB0aGUgZ3JlYXQgQVNDSUkgYXJ0IGdlbmVyYXRvciFcbiAgICBodHRwczovL3BhdG9yamsuY29tL3NvZnR3YXJlL3RhYWcvI3A9ZGlzcGxheSZoPTAmdj0wJmY9QmlnJTIwTW9uZXktbndcbiAgICAuLi5tYWtlcyB0aGlzIGNvZGUgKnNvKiBtdWNoIGVhc2llciB0byBtYWludGFpbi4uLiB5b3Uga25vdywgJ2N1eiBJIGNhbiBmaW5kIG15IGZ1bmN0aW9ucyBpbiBWU0NvZGUncyBNaW5pbWFwXG4qL1xubGV0IGVsZW1fcGFweV9kb2NzX2xpYk5hbWU6SFRNTElucHV0RWxlbWVudDtcbmxldCBlbGVtX3BhcHlfZG9jc19saWJMaW5rOkhUTUxJbnB1dEVsZW1lbnQ7XG5sZXQgZWxlbV9wYXB5X2RvY3NfcmVnaXN0ZXJQYXR0ZXJuOkhUTUxJbnB1dEVsZW1lbnQ7XG5sZXQgZWxlbV9wYXB5X2RvY3NfbWRPdXRwdXQ6SFRNTEVsZW1lbnQ7XG5sZXQgZWxlbV9wYXB5X2RvY3NfZmlsZVBpY2tlcjpIVE1MRWxlbWVudDtcbmxldCBlbGVtX3BhcHlfZG9jc19mb2xkZXJQaWNrZXI6SFRNTEVsZW1lbnQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX19iY2RMb2FkX2F1dG9QYXB5RG9jc0luaXQoKSB7IC8vQHRzLWlnbm9yZSBDYW5ub3QgZmluZCBuYW1lICdhdXRvUGFweURvY3MnLlxuICAgIGNvbnN0IHRlbXBfZWxlbWVudHMgPSBbXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXB5X2RvY3NfbGliLU5hbWUnKSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcHlfZG9jc19saWItTGluaycpLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFweV9kb2NzX3JlZ2lzdGVyLXBhdHRlcm4nKSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcHlfZG9jc19tZC1vdXRwdXQnKSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcHlfZG9jc19maWxlLXBpY2tlcicpLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFweV9kb2NzX2ZvbGRlci1waWNrZXInKVxuICAgIF07XG4gICAgaWYgKHRlbXBfZWxlbWVudHMuc29tZShlID0+IGUgPT09IG51bGwpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRlbXBfZWxlbWVudHMpO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBMb29rcyBsaWtlIHdlJ3JlIE1pc3NpbmcgZWxlbWVudHMhYCk7XG4gICAgfVxuXG4gICAgZWxlbV9wYXB5X2RvY3NfbGliTmFtZSA9IHRlbXBfZWxlbWVudHNbMF0gYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGVsZW1fcGFweV9kb2NzX2xpYkxpbmsgPSB0ZW1wX2VsZW1lbnRzWzFdIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBlbGVtX3BhcHlfZG9jc19yZWdpc3RlclBhdHRlcm4gPSB0ZW1wX2VsZW1lbnRzWzJdIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBlbGVtX3BhcHlfZG9jc19tZE91dHB1dCA9IHRlbXBfZWxlbWVudHNbM10hO1xuXG4gICAgZWxlbV9wYXB5X2RvY3NfZmlsZVBpY2tlciA9IHRlbXBfZWxlbWVudHNbNF0hO1xuICAgIHJlZ2lzdGVyRm9yRXZlbnRzKGVsZW1fcGFweV9kb2NzX2ZpbGVQaWNrZXIsIHthY3RpdmF0ZTogZ2VuZXJhdGVEb2NzX2ZpbGV9KTtcblxuICAgIGVsZW1fcGFweV9kb2NzX2ZvbGRlclBpY2tlciA9IHRlbXBfZWxlbWVudHNbNV0hO1xuICAgIHJlZ2lzdGVyRm9yRXZlbnRzKGVsZW1fcGFweV9kb2NzX2ZvbGRlclBpY2tlciwge2FjdGl2YXRlOiBnZW5lcmF0ZURvY3NfZm9sZGVyfSk7XG5cbn0gLy9AdHMtaWdub3JlOiBQcm9wZXJ0eSAnYmNkX2luaXRfZnVuY3Rpb25zJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdXaW5kb3cgJiB0eXBlb2YgZ2xvYmFsVGhpcycuXG53aW5kb3cuYmNkX2luaXRfZnVuY3Rpb25zLnBhcHlEb2NzID0gX19fYmNkTG9hZF9hdXRvUGFweURvY3NJbml0O1xuXG4vKiQkJCQkXFxcbiQkICBfXyQkXFxcbiQkIHwgICQkIHwgJCQkJCQkXFwgICAkJCQkJCRcXCAgICQkJCQkJFxcICAkJFxcICAgJCRcXCAgJCQkJCQkXFwgICAkJCQkJCQkXFxcbiQkJCQkJCQgIHwkJCAgX18kJFxcICQkICBfXyQkXFwgJCQgIF9fJCRcXCBcXCQkXFwgJCQgIHwkJCAgX18kJFxcICQkICBfX19fX3xcbiQkICBfXyQkPCAkJCQkJCQkJCB8JCQgLyAgJCQgfCQkJCQkJCQkIHwgXFwkJCQkICAvICQkJCQkJCQkIHxcXCQkJCQkJFxcXG4kJCB8ICAkJCB8JCQgICBfX19ffCQkIHwgICQkIHwkJCAgIF9fX198ICQkICAkJDwgICQkICAgX19fX3wgXFxfX19fJCRcXFxuJCQgfCAgJCQgfFxcJCQkJCQkJFxcIFxcJCQkJCQkJCB8XFwkJCQkJCQkXFwgJCQgIC9cXCQkXFwgXFwkJCQkJCQkXFwgJCQkJCQkJCAgfFxuXFxfX3wgIFxcX198IFxcX19fX19fX3wgXFxfX19fJCQgfCBcXF9fX19fX198XFxfXy8gIFxcX198IFxcX19fX19fX3xcXF9fX19fX18vXG4gICAgICAgICAgICAgICAgICAgICQkXFwgICAkJCB8XG4gICAgICAgICAgICAgICAgICAgIFxcJCQkJCQkICB8XG4gICAgICAgICAgICAgICAgICAgICBcXF9fX19fKi9cblxuXG5jb25zdCByZWdleF9TY3JpcHRuYW1lID1cbi9eU2NyaXB0bmFtZSAoW1xcd1xcZF0rKSg/OlxccytleHRlbmRzIChbXFx3XFxkXSspKT8oPzpcXHMrKGhpZGRlbikpPyhcXHMrKD86Y29uZGl0aW9uYWwpKT8oPzpcXHMrKG5hdGl2ZSkpPyg/OltcXG5cXHNdK1xceyhbXn1dKylcXH0pPy9pcztcblxuY29uc3QgcmVnZXhfRXZlbnRzID1cbi9cXG4qKCg/Ol5cXHMqOy4qXFxuKSspKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpFdmVudCg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrKFtcXHdcXGRdKykoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKlxcKCg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqKCg/OltcXHdcXGRdKyg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrW1xcd1xcZF0rKD86KD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSo9KD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSooPzpbXFx3XFxkXSt8XCIuKj8oPzwhXFxcXClcIikpPyg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkpKiwoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKykqW1xcd1xcZF0rKD86KD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKStbXFx3XFxkXSsoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKig/Oj0oPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKig/OltcXHdcXGRdK3xcIi4qPyg/PCFcXFxcKVwiKSk/KSk/KD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcXCkoW1xcc1xcU10rPyleKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpFbmRFdmVudC9naW07XG4vKlxuQWxsb3cgYW55IG51bWJlciBvZiBuZXcgbGluZXMgYmVmb3JlIHRoZSBldmVudDpcblxcbipcblxuQ2FwdHVyZSBhbGwgY29tbWVudHMgZGlyZWN0bHkgYmVmb3JlIHRoZSBldmVudDpcbigoPzpeXFxzKjsuKlxcbikrKVxuXG5BbGxvdyBhbnkgbnVtYmVyIG9mIHNwYWNlcyBiZWZvcmUgdGhlIGBFdmVudGAga2V5d29yZDpcbig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqXG5cbk1hdGNoIHRoZSBgRXZlbnRgIGtleXdvcmQ6XG5FdmVudFxuXG5BbGxvdyBhbnkgbnVtYmVyIG9mIHNwYWNlcyBiZXR3ZWVuIHRoZSBgRXZlbnRgIGtleXdvcmQgYW5kIHRoZSBldmVudCBuYW1lOlxuKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKStcblxuQ2FwdHVyZSB0aGUgZXZlbnQgbmFtZTpcbihbXFx3XFxkXSspXG5cbkFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIGV2ZW50IG5hbWUgYW5kIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzOlxuKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuTWF0Y2ggdGhlIG9wZW5pbmcgcGFyZW50aGVzaXM6XG5cXChcblxuQWxsb3cgYW55IG51bWJlciBvZiBzcGFjZXMgYmV0d2VlbiB0aGUgb3BlbmluZyBwYXJlbnRoZXNpcyBhbmQgdGhlIGZpcnN0IGFyZ3VtZW50OlxuKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuQ2FwdHVyZSBhbnkgYXJndW1lbnRzIHByZXNlbnQ6XG4oXG4gICAgQ2FwdHVyZSBhcmd1bWVudHMgZXhjZXB0aW5nIHRoZSBmaW5hbCBhcmd1bWVudDpcbiAgICAoPzpcbiAgICAgICAgQ2FwdHVyZSB0aGUgYXJndW1lbnQgdHlwZTpcbiAgICAgICAgW1xcd1xcZF0rXG5cbiAgICAgICAgUmVxdWlyZSBhdCBsZWFzdCBvbmUgc3BhY2UgYmV0d2VlbiB0aGUgYXJndW1lbnQgdHlwZSBhbmQgdGhlIGFyZ3VtZW50IG5hbWU6XG4gICAgICAgICg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrXG5cbiAgICAgICAgQ2FwdHVyZSB0aGUgYXJndW1lbnQgbmFtZTpcbiAgICAgICAgW1xcd1xcZF0rXG5cbiAgICAgICAgQ2FwdHVyZSB0aGUgZGVmYXVsdCwgaWYgYW55OlxuICAgICAgICAoPzpcbiAgICAgICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIGFyZ3VtZW50IG5hbWUgYW5kIHRoZSBlcXVhbCBzaWduOlxuICAgICAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuICAgICAgICAgICAgTWF0Y2ggdGhlIGVxdWFsIHNpZ246XG4gICAgICAgICAgICA9XG5cbiAgICAgICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIGVxdWFsIHNpZ24gYW5kIHRoZSBkZWZhdWx0IHZhbHVlOlxuICAgICAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuICAgICAgICAgICAgQ2FwdHVyZSB0aGUgZGVmYXVsdCB2YWx1ZTpcbiAgICAgICAgICAgICg/OltcXHdcXGRdK3xcIi4qPyg/PCFcXFxcKVwiKVxuICAgICAgICApP1xuXG4gICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIGFyZ3VtZW50IGFuZCB0aGUgY29tbWE6XG4gICAgICAgICg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkpKlxuXG4gICAgICAgIE1hdGNoIHRoZSBjb21tYTpcbiAgICAgICAgLFxuXG4gICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIGNvbW1hIGFuZCB0aGUgbmV4dCBhcmd1bWVudDpcbiAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKStcbiAgICApKlxuXG4gICAgQ2FwdHVyZSB0aGUgdHlwZSBvZiB0aGUgZmluYWwgYXJndW1lbnQ6XG4gICAgW1xcd1xcZF0rXG5cbiAgICAtLSBub3Qgc3VyZSB3aHkgdGhpcyBub24tY2FwdHVyaW5nIGdyb3VwIGlzIGhlcmUsIGFjdHVhbGx5IC0tXG4gICAgKD86XG4gICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIHR5cGUgYW5kIHRoZSBuYW1lIG9mIHRoZSBmaW5hbCBhcmd1bWVudDpcbiAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKStcblxuICAgICAgICBDYXB0dXJlIHRoZSBuYW1lIG9mIHRoZSBmaW5hbCBhcmd1bWVudDpcbiAgICAgICAgW1xcd1xcZF0rXG5cbiAgICAgICAgLS0gdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgaW4gdGhlIG9wdGlvbmFsIGdyb3VwLCBidXQgaGV5IC0tXG4gICAgICAgIEFsbG93IGFueSBudW1iZXIgb2Ygc3BhY2VzIGJldHdlZW4gdGhlIG5hbWUgYW5kIGVpdGhlciB0aGUgZXF1YWwgc2lnbiBvciB0aGUgY2xvc2luZyBwYXJlbnRoZXNpczpcbiAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuXG4gICAgICAgIENhcHR1cmUgdGhlIGRlZmF1bHQsIGlmIGFueTpcbiAgICAgICAgKD86XG4gICAgICAgICAgICBNYXRjaCB0aGUgZXF1YWwgc2lnbjpcbiAgICAgICAgICAgID1cblxuICAgICAgICAgICAgQWxsb3cgYW55IG51bWJlciBvZiBzcGFjZXMgYmV0d2VlbiB0aGUgZXF1YWwgc2lnbiBhbmQgdGhlIGRlZmF1bHQgdmFsdWU6XG4gICAgICAgICAgICAoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKlxuXG4gICAgICAgICAgICBDYXB0dXJlIHRoZSBkZWZhdWx0IHZhbHVlOlxuICAgICAgICAgICAgKD86W1xcd1xcZF0rfFwiLio/KD88IVxcXFwpXCIpXG4gICAgICAgICk/XG4gICAgKVxuKT9cblxuQWxsb3cgYW55IG51bWJlciBvZiBzcGFjZXMgYmV0d2VlbiBhcmd1bWVudHMgYW5kIHRoZSBjbG9zaW5nIHBhcmVudGhlc2lzOlxuKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcblxuTWF0Y2ggdGhlIGNsb3NpbmcgcGFyZW50aGVzaXM6XG5cXClcblxuQ2FwdHVyZSB0aGUgZXZlbnQgY29kZTpcbihbXFxzXFxTXSs/KVxuXG5SZXF1aXJlIHRoZSBzdGFydCBvZiBhIG5ldyBsaW5lOlxuXlxuXG5BbGxvdyBhbnkgbnVtYmVyIG9mIHNwYWNlcyBiZWZvcmUgdGhlIGBFbmRFdmVudGAga2V5d29yZDpcbig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqXG5cbk1hdGNoIHRoZSBgRW5kRXZlbnRgIGtleXdvcmQ6XG5FbmRFdmVudFxuKi9cblxuXG5jb25zdCByZWdleF9QYXJhbWV0ZXJzID1cbi8oPzpcXHN8O1xcLy4qP1xcLzt8XFxcXCkqKFtcXHdcXGRdKykoXFxbXSk/KD86XFxzfDtcXC8uKj9cXC87fFxcXFwpKyhbXFx3XFxkXSspKD86XFxzfDtcXC8uKj9cXC87fFxcXFwpKig/Oj0oPzpcXHN8O1xcLy4qP1xcLzt8XFxcXCkqKFwiLisoPzwhXFxcXClcInxbXFx3XFxkXSspKT8vZ3NpO1xuXG5jb25zdCByZWdleF9GdW5jdGlvbnMgPVxuL1xcbiooKD86Xlxccyo7LipcXG4pKyk/KD86KFtcXHdcXGRdKykoXFxbLio/XFxdKT8oPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKyk/RnVuY3Rpb24oPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKyhbXFx3XFxkXSspKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpcXCgoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKigoPzpbXFx3XFxkXSsoPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpK1tcXHdcXGRdKyg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqPSg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqKD86W1xcd1xcZF0rKD86XFwuXFxkKyk/fFwiLio/KD88IVxcXFwpXCIpKT8oPzooPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpKSosKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSspKltcXHdcXGRdKyg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrW1xcd1xcZF0rKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSooPzo9KD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSooPzpbXFx3XFxkXSsoPzpcXC5cXGQrKT98XCIuKj8oPzwhXFxcXClcIikpPykpPyg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkqXFwpKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSsoPzooZ2xvYmFsKSg/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrKT8oPzoobmF0aXZlKSg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrKGdsb2JhbCkpPyg/Oig/Olxcc3w7XFwvKD86XFxzfFxcUykqP1xcLzt8XFxcXCkrXFx7KC4qPylcXH0pP3woPzooPzooPzpcXHN8O1xcLyg/Olxcc3xcXFMpKj9cXC87fFxcXFwpK1xceyguKj8pXFx9KT8oW1xcc1xcU10rPyleKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKSpFbmRGdW5jdGlvbikpL2dtaTtcblxuY29uc3Qgc3BlY2lhbENoYXJhY3RlcnMgPSBbJyonLCAnXycsICctJywgJzwnLCAnPicsICdgJywgJ34nLCAnIycsICdeJywgJ1snLCAnXScsICcoJywgJyknLCAnfCcsICc6J107XG5jb25zdCByZWdleF9TcGVjaWFsQ2hhcmFjdGVycyA9IG5ldyBSZWdFeHAoYFtcXFxcJHtzcGVjaWFsQ2hhcmFjdGVycy5qb2luKCdcXFxcJyl9XWAsICdnJyk7XG5mdW5jdGlvbiBlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyhzdHI6c3RyaW5nKXtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXhfU3BlY2lhbENoYXJhY3RlcnMsICdcXFxcJCYnKTtcbn1cblxuLypcbiAgICBwYXB5X2RvY3NfbGliTmFtZVxuICAgIHBhcHlfZG9jc19saWJMaW5rXG4qL1xuXG4vKiogU2V0cyB0aGUgb3V0cHV0IGFyZWEncyB0ZXh0IHdpdGggc3ludGF4IGhpZ2hsaWdodGluZyovXG5mdW5jdGlvbiBzZXRNYXJrZG93bk91dHB1dChzdHI6c3RyaW5nKXtcbiAgICAvL2NvbnNvbGUubG9nKHN0cik7XG4gICAgZWxlbV9wYXB5X2RvY3NfbWRPdXRwdXQuaW5uZXJIVE1MID0gaGxqcy5oaWdobGlnaHQoc3RyLCB7bGFuZ3VhZ2U6ICdtZCd9KS52YWx1ZTtcbn1cblxuLypcblxuUmVnZXggQ29tcG9uZW50czpcblxuICAgIHdoaXRlc3BhY2UsIGxvbmcgY29tbWVudHMsIGVzY2FwZWQgbGluZSBlbmRpbmdzIChzaW5nbGUgY2hhcmFjdGVyLCBub24tY2FwdHVyaW5nIGdyb3VwKTpcbiAgICAgICAgKD86XFxzfDtcXC8oPzpcXHN8XFxTKSo/XFwvO3xcXFxcKVxuXG4gICAgVmFyaWFibGUvU2NyaXB0L0V0Yy4gTmFtZVxuICAgICAgICBbXFx3XFxkXStcblxuICAgIFZhbHVlIChub24tY2FwdHVyaW5nIGdyb3VwKTpcbiAgICAgICAgKD86W1xcd1xcZF0rfFwiLisoPzwhXFxcXClcIilcblxuKi9cblxuXG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlRG9jc19maWxlKCl7XG4gICAgbGV0IGZpbGU7XG4gICAgdHJ5e1xuICAgICAgICBmaWxlID0gKGF3YWl0IHdpbmRvdy5zaG93T3BlbkZpbGVQaWNrZXIoKSlbMF07XG4gICAgfWNhdGNoKGUpe1xuICAgICAgICAvL2NvbnNvbGUubG9nKGUpO1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgICAgICAvLyBObyBmaWxlIHNlbGVjdGVkLiBBYm9ydGluZ1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRyeUZvclBlcm1pc3Npb24oZmlsZSwgJ3JlYWQnKSkgcmV0dXJuO1xuXG4gICAgLy9jb25zb2xlLmxvZyhmaWxlKTtcbiAgICAvL2NvbnNvbGUubG9nKGF3YWl0IGZpbGUuZ2V0RmlsZSgpKTtcblxuICAgIHNldE1hcmtkb3duT3V0cHV0KHBhcnNlU2NyaXB0KGF3YWl0IHJlYWRGaWxlKGF3YWl0IGZpbGUuZ2V0RmlsZSgpKSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZURvY3NfZm9sZGVyKCl7XG4gICAgbGV0IGZvbGRlcjtcbiAgICB0cnl7XG4gICAgICAgIGZvbGRlciA9IGF3YWl0IHdpbmRvdy5zaG93RGlyZWN0b3J5UGlja2VyKCk7XG4gICAgICAgIGF3YWl0IGF0dGFpbkRpclBlcm1zKGZvbGRlcik7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgICAvL2NvbnNvbGUubG9nKGUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlIE9iamVjdCBpcyBvZiB0eXBlICd1bmtub3duJy5cbiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgICAgICAvLyBObyBmaWxlIHNlbGVjdGVkLiBBYm9ydGluZ1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCBmb3JFYWNoRmlsZShmb2xkZXIsIGl0ZXJhdGlvbkZ1bmN0aW9uLCAtMSk7XG5cbiAgICAvKiogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQHBhcmFtIHtGaWxlU3lzdGVtSGFuZGxlfSBmaWxlICovXG4gICAgYXN5bmMgZnVuY3Rpb24gaXRlcmF0aW9uRnVuY3Rpb24obmFtZTpzdHJpbmcsIGZpbGU6RmlsZVN5c3RlbUhhbmRsZSwgZGlyZWN0b3J5OkZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpe1xuICAgICAgICAvL2NvbnNvbGUubG9nKG5hbWUsIGZpbGUpO1xuICAgICAgICBpZiAoZmlsZS5raW5kID09PSAnZmlsZScgJiYgbmFtZS5lbmRzV2l0aCgnLnBzYycpKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wT3V0ID0gcGFyc2VTY3JpcHQoYXdhaXQgcmVhZEZpbGUoYXdhaXQgKGZpbGUgYXMgRmlsZVN5c3RlbUZpbGVIYW5kbGUpLmdldEZpbGUoKSkpO1xuICAgICAgICAgICAgd3JpdGVGaWxlKGF3YWl0IGRpcmVjdG9yeS5nZXRGaWxlSGFuZGxlKGAke25hbWV9Lm1kYCwge2NyZWF0ZTogdHJ1ZX0pLCB0ZW1wT3V0KTtcbiAgICAgICAgICAgIHNldE1hcmtkb3duT3V0cHV0KHRlbXBPdXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiogRXhlY3V0ZXMgYSBjYWxsYmFjayBmb3IgZWFjaCBmaWxlIGluIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5LCByZWN1cnNpbmcgYXMgcmVxdWVzdGVkLlxuICAgIEBwYXJhbSBkaXIgVGhlIGRpcmVjdG9yeSB0byBpdGVyYXRlIG92ZXJcbiAgICBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZm9yIGVhY2ggZmlsZVxuICAgIEBwYXJhbSByZWN1cnNpb24gVGhlIG51bWJlciBvZiBsZXZlbHMgdG8gcmVjdXJzZSBpbnRvIHN1YmRpcmVjdG9yaWVzLiBOZWdhdGl2ZSBudW1iZXJzIHdpbGwgcmVjdXJzZSBpbmRlZmluaXRlbHkuXG4qL1xuYXN5bmMgZnVuY3Rpb24gZm9yRWFjaEZpbGU8VENhbGxiYWNrIGV4dGVuZHMgKG5hbWU6IHN0cmluZywgZmlsZTogRmlsZVN5c3RlbUZpbGVIYW5kbGUsIGRpcjogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSkgPT4gUHJvbWlzZTxhbnk+PihkaXI6RmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSwgY2FsbGJhY2s6VENhbGxiYWNrLCByZWN1cnNpb24gPSAwKTogUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8VENhbGxiYWNrPj5bXT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCBbbmFtZSwgZmlsZV0gb2YgZGlyLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoZmlsZS5raW5kID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goY2FsbGJhY2sobmFtZSwgZmlsZSwgZGlyKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5raW5kID09PSAnZGlyZWN0b3J5JyAmJiByZWN1cnNpb24gIT0gMCkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChmb3JFYWNoRmlsZShmaWxlLCBjYWxsYmFjaywgcmVjdXJzaW9uIC0gMSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59XG5cblxuXG4vKiQkJCQkJFxcICQkXFwgJCRcXCAgICAgICAgICAgICAgICAgICQkJCQkJFxcICAgICAgICAgICAgICAgICAgICAgICAgJCRcXFxuJCQgIF9fX19ffFxcX198JCQgfCAgICAgICAgICAgICAgICAkJCAgX18kJFxcICAgICAgICAgICAgICAgICAgICAgICAkJCB8XG4kJCB8ICAgICAgJCRcXCAkJCB8ICQkJCQkJFxcICAgICAgICAkJCAvICBcXF9ffCQkXFwgICAkJFxcICAkJCQkJCQkXFwgJCQkJCQkXFwgICAgJCQkJCQkXFwgICQkJCQkJFxcJCQkJFxcXG4kJCQkJFxcICAgICQkIHwkJCB8JCQgIF9fJCRcXCAgICAgICBcXCQkJCQkJFxcICAkJCB8ICAkJCB8JCQgIF9fX19ffFxcXyQkICBffCAgJCQgIF9fJCRcXCAkJCAgXyQkICBfJCRcXFxuJCQgIF9ffCAgICQkIHwkJCB8JCQkJCQkJCQgfCAgICAgICBcXF9fX18kJFxcICQkIHwgICQkIHxcXCQkJCQkJFxcICAgICQkIHwgICAgJCQkJCQkJCQgfCQkIC8gJCQgLyAkJCB8XG4kJCB8ICAgICAgJCQgfCQkIHwkJCAgIF9fX198ICAgICAgJCRcXCAgICQkIHwkJCB8ICAkJCB8IFxcX19fXyQkXFwgICAkJCB8JCRcXCAkJCAgIF9fX198JCQgfCAkJCB8ICQkIHxcbiQkIHwgICAgICAkJCB8JCQgfFxcJCQkJCQkJFxcICAgICAgIFxcJCQkJCQkICB8XFwkJCQkJCQkIHwkJCQkJCQkICB8ICBcXCQkJCQgIHxcXCQkJCQkJCRcXCAkJCB8ICQkIHwgJCQgfFxuXFxfX3wgICAgICBcXF9ffFxcX198IFxcX19fX19fX3wgICAgICAgXFxfX19fX18vICBcXF9fX18kJCB8XFxfX19fX19fLyAgICBcXF9fX18vICBcXF9fX19fX198XFxfX3wgXFxfX3wgXFxfX3xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCRcXCAgICQkIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFwkJCQkJCQgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcX19fX18qL1xuXG5cblxuXG4vKiogUmVxdWVzdHMgdGhlIHNwZWNpZmllZCBwZXJtaXNzaW9uIGZvciB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAgQHBhcmFtIHtGaWxlU3lzdGVtSGFuZGxlfSBvYmplY3QgVGhlIGZpbGUgb3IgZGlyZWN0b3J5IHRvIHJlcXVlc3QgcGVybWlzc2lvbiBmb3JcbiAgICBAcGFyYW0ge3N0cmluZ30gcGVybSBUaGUgcGVybWlzc2lvbiB0byByZXF1ZXN0XG4qL1xuYXN5bmMgZnVuY3Rpb24gdHJ5Rm9yUGVybWlzc2lvbihvYmplY3Q6RmlsZVN5c3RlbUZpbGVIYW5kbGUsIHBlcm06c3RyaW5nKXtcbiAgICByZXR1cm4gYXdhaXQgb2JqZWN0LnF1ZXJ5UGVybWlzc2lvbih7bW9kZTogcGVybSBhcyBGaWxlU3lzdGVtUGVybWlzc2lvbk1vZGUgfSkgPT09ICdncmFudGVkJyB8fCBhd2FpdCBvYmplY3QucmVxdWVzdFBlcm1pc3Npb24oe21vZGU6IHBlcm0gYXMgRmlsZVN5c3RlbVBlcm1pc3Npb25Nb2RlIH0pID09PSAnZ3JhbnRlZCc7XG4gICAgLy9yZXR1cm4gZmFsc2U7XG59XG5cblxuXG5cblxuXG4vKiogUmVhZHMgdGhlIHNwZWNpZmllZCBmaWxlIGFuZCByZXR1cm5zIGl0cyBjb250ZW50cyovXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlOkZpbGUpOlByb21pc2U8c3RyaW5nPntcbiAgICAvLyBOaWNlIGpvYiwgQ29waWxvdCFcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wX2ZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICB0ZW1wX2ZpbGVSZWFkZXIub25sb2FkID0gKHJlYWRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVhZGVyRXZlbnQudGFyZ2V0ICYmIHR5cGVvZiByZWFkZXJFdmVudC50YXJnZXQucmVzdWx0ID09PSAnc3RyaW5nJykgcmVzb2x2ZShyZWFkZXJFdmVudC50YXJnZXQucmVzdWx0LnJlcGxhY2UoL1xcclxcbj8vZywgJ1xcbicpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcF9maWxlUmVhZGVyLm9uZXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcF9maWxlUmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgfSk7XG59XG5cblxuXG5cblxuLyoqIFdyaXRlcyBmaWxlIGNvbnRlbnRzIHRvIHRoZSBmaWxlIHN5c3RlbS4qL1xuYXN5bmMgZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGVIYW5kbGU6RmlsZVN5c3RlbUZpbGVIYW5kbGUsIGNvbnRlbnRzOnN0cmluZ3xCdWZmZXJTb3VyY2V8QmxvYik6UHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgd3JpdGFibGUgPSBhd2FpdCBmaWxlSGFuZGxlLmNyZWF0ZVdyaXRhYmxlKCk7XG4gICAgYXdhaXQgd3JpdGFibGUud3JpdGUoY29udGVudHMpO1xuICAgIHdyaXRhYmxlLmNsb3NlKCk7XG59XG5cblxuXG5cblxuLyoqIEF0dGFpbiBwZXJtaXNzaW9ucyBmb3IgdGhlIHNwZWNpZmllZCBkaXJlY3RvcnlcbiAgICBAdGhyb3dzIHtET01FeGNlcHRpb259ICdBYm9ydEVycm9yJyBJZiB0aGUgdXNlciBmYWlscyB0byBnaXZlIHBlcm1pc3Npb25zIGZvciB0aGUgZGlyZWN0b3J5XG4qL1xuYXN5bmMgZnVuY3Rpb24gYXR0YWluRGlyUGVybXMoZGlyOkZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpIHtcbiAgICB3aGlsZSAoIShhd2FpdCB0cnlGb3JQZXJtaXNzaW9uKGRpciBhcyBGaWxlU3lzdGVtSGFuZGxlIGFzIEZpbGVTeXN0ZW1GaWxlSGFuZGxlLCAncmVhZHdyaXRlJykpKXtcbiAgICAgICAgaWYgKCF3aW5kb3cuY29uZmlybShcIllvdSBtdXN0IGdpdmUgd3JpdGUgcGVybWlzc2lvbnMgZm9yIHRoaXMgZGlyZWN0b3J5IHRvIHVzZSB0aGlzIGFwcGxpY2F0aW9uLlxcblxcbkNsaWNrIE9LIHRvIGdpdmUgcGVybWlzc2lvbnMuXCIpKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1VzZXIgZGVuaWVkIGRpcmVjdG9yeSB3cml0ZSBhY2Nlc3MnLCAnQWJvcnRFcnJvcicpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuXG5cblxuLyokJCQkJFxcICAgICAgICAgICAgICAgICAgICAgICQkXFwgICAgICAgICAgICAgJCRcXCAgICAgJCQkJCQkJFxcXG4kJCAgX18kJFxcICAgICAgICAgICAgICAgICAgICAgXFxfX3wgICAgICAgICAgICAkJCB8ICAgICQkICBfXyQkXFxcbiQkIC8gIFxcX198ICQkJCQkJCRcXCAgJCQkJCQkXFwgICQkXFwgICQkJCQkJFxcICAkJCQkJCRcXCAgICQkIHwgICQkIHwgJCQkJCQkXFwgICAkJCQkJCRcXCAgICQkJCQkJCRcXCAgJCQkJCQkXFxcblxcJCQkJCQkXFwgICQkICBfX19fX3wkJCAgX18kJFxcICQkIHwkJCAgX18kJFxcIFxcXyQkICBffCAgJCQkJCQkJCAgfCBcXF9fX18kJFxcICQkICBfXyQkXFwgJCQgIF9fX19ffCQkICBfXyQkXFxcbiBcXF9fX18kJFxcICQkIC8gICAgICAkJCB8ICBcXF9ffCQkIHwkJCAvICAkJCB8ICAkJCB8ICAgICQkICBfX19fLyAgJCQkJCQkJCB8JCQgfCAgXFxfX3xcXCQkJCQkJFxcICAkJCQkJCQkJCB8XG4kJFxcICAgJCQgfCQkIHwgICAgICAkJCB8ICAgICAgJCQgfCQkIHwgICQkIHwgICQkIHwkJFxcICQkIHwgICAgICAkJCAgX18kJCB8JCQgfCAgICAgICBcXF9fX18kJFxcICQkICAgX19fX3xcblxcJCQkJCQkICB8XFwkJCQkJCQkXFwgJCQgfCAgICAgICQkIHwkJCQkJCQkICB8ICBcXCQkJCQgIHwkJCB8ICAgICAgXFwkJCQkJCQkIHwkJCB8ICAgICAgJCQkJCQkJCAgfFxcJCQkJCQkJFxcXG4gXFxfX19fX18vICBcXF9fX19fX198XFxfX3wgICAgICBcXF9ffCQkICBfX19fLyAgICBcXF9fX18vIFxcX198ICAgICAgIFxcX19fX19fX3xcXF9ffCAgICAgIFxcX19fX19fXy8gIFxcX19fX19fX3xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJCB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCQgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXyovXG5cblxuLy8gVmFyaW91cyBpbnRlcmZhY2VzIGZvciBpbnR1aXRpdmVseSBkZWZpbmluZyB2YXJpb3VzIGNvbXBvbmVudHMgb2YgUGFweXJ1cyBmb3IgcGFyc2luZy5cbmludGVyZmFjZSBQYXB5cnVzVHlwZSB7XG4gICAgc2NyaXB0OiBzdHJpbmcsXG4gICAgaXNBcnJheTogYm9vbGVhblxufVxuXG5pbnRlcmZhY2UgUGFweXJ1c1BhcmFtZXRlciBleHRlbmRzIFBhcHlydXNUeXBlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVmYXVsdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUGFweXJ1c0Z1bmN0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgcmV0dXJuczogUGFweXJ1c1R5cGUsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBwYXJhbWV0ZXJzOiBQYXB5cnVzUGFyYW1ldGVyW10sXG4gICAgZ2xvYmFsOiBib29sZWFuLFxuICAgIG5hdGl2ZTogYm9vbGVhbixcbiAgICBib2R5OiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFBhcHlydXNFdmVudCBleHRlbmRzIFBhcHlydXNGdW5jdGlvbiB7XG4gICAgZ2xvYmFsOiBmYWxzZSxcbiAgICBuYXRpdmU6IGZhbHNlLFxuICAgIHJldHVybnM6IHtzY3JpcHQ6ICdOb25lJywgaXNBcnJheTogZmFsc2V9XG59XG5cbmludGVyZmFjZSBQYXB5cnVzU2NyaXB0IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZG9jdW1lbnRhdGlvbj86IHN0cmluZyxcbiAgICBwYXJlbnQ6IHN0cmluZyxcbiAgICBjb25kaXRpb25hbDogYm9vbGVhbixcbiAgICBoaWRkZW46IGJvb2xlYW4sXG4gICAgbmF0aXZlOiBib29sZWFuXG59XG5cblxuXG4vKiogUGFyc2VzIHRoZSBwYXNzZWQtaW4gc2NyaXB0IGludG8gTWFya2Rvd24gZG9jdW1lbnRhdGlvbiAqL1xuZnVuY3Rpb24gcGFyc2VTY3JpcHQoc2NyaXB0U3RyOnN0cmluZyk6c3RyaW5nIHtcbiAgICBjb25zdCBzY3JpcHRuYW1lID0gcGFyc2VTY3JpcHROYW1lKHNjcmlwdFN0cik7XG5cbiAgICBjb25zdCBmdW5jdGlvbnMgPSBzb3J0QXJyYXlPZk9iamVjdEFscGhhQnlLZXkocGFyc2VGdW5jdGlvbnMoc2NyaXB0U3RyKSwgJ25hbWUnKTtcbiAgICBsZXQgZnVuY3Rpb25UYWJsZSA9ICcnO1xuXG4gICAgY29uc3QgZXZlbnRzID0gc29ydEFycmF5T2ZPYmplY3RBbHBoYUJ5S2V5KHBhcnNlRXZlbnRzKHNjcmlwdFN0ciksICduYW1lJyk7XG4gICAgbGV0IGV2ZW50VGFibGUgPSAnJztcbiAgICAvKiBFeGFtcGxlOlxuICAgIHwgICBFdmVudCAgIHwgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICB8IFtSZWdpc3RyYXRpb25dKGh0dHBzOi8vbW9kZGluZy53aWtpL2VuL3NreXJpbS9kZXZlbG9wZXJzL3BhcHlydXMvY29uY2VwdHMvZnVuY3Rpb25zI3JlZ2lzdHJhdGlvbikgfCAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzICAgICAgICAgICAgICAgIHxcbiAgICB8ICAgIDotLSAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgOi06ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDotOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgOi0tICAgICAgICAgICAgICAgICAgICB8XG4gICAgfCBPbkxvc3RMT1MgfCBTZW50IHdoZW4gYW4gYWN0b3IgY2Fubm90IHNlZSB0aGUgdGFyZ2V0IGFueW1vcmUuIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEFjdG9yIGFrVmlld2VyLCBPYmplY3RSZWZlcmVuY2UgYWtUYXJnZXQgfFxuICAgICovXG4gICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuICAgICAgICBjb25zdCBldmVudFRhYmxlUm93ID0gYHwgWyR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMoZXZlbnQubmFtZSl9XSgke2lucHV0VmFsdWUoZWxlbV9wYXB5X2RvY3NfbGliTGluaykucmVwbGFjZSgvXFwvPyQvLCAnLycpfSR7c2NyaXB0bmFtZS5uYW1lfS8ke2V2ZW50Lm5hbWV9KSB8ICR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMoZXZlbnQuZGVzY3JpcHRpb24ucmVwbGFjZSgvXFxuL2csICc8YnIgLz4nKSl9JHtcbiAgICAgICAgICAgIHNjcmlwdFN0ci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgIGlucHV0VmFsdWUoZWxlbV9wYXB5X2RvY3NfcmVnaXN0ZXJQYXR0ZXJuKS5yZXBsYWNlKC8lZSUvaWcsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Lm5hbWUucmVwbGFjZSgvXm9uL2ksICcnKS5yZXBsYWNlKC8oPzpldmVudCk/KD86dW5yZWdpc3Rlcig/OmVkKT8pPyQvaSwgJycpLnJlcGxhY2UoL3N0YXJ0fHN0b3AvaSwgJycpXG4gICAgICAgICAgICAgICAgKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICApID8gJyB8IFJlZ2lzdGVyZWQgfCAnIDogJyB8IFVucmVnaXN0ZXJlZCB8ICd9YCArXG4gICAgICAgICAgICBldmVudC5wYXJhbWV0ZXJzLm1hcCgocGFyYW06UGFweXJ1c1BhcmFtZXRlcikgPT4gYFxcYCR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMocGFyYW0uc2NyaXB0KX1cXGAgKiR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMocGFyYW0ubmFtZSl9KmApLmpvaW4oJywgPGJyIC8+JykucmVwbGFjZSgvLCA8YnIgXFwvPiQvLCAnJykgK1xuICAgICAgICAnIHxcXG4nO1xuICAgICAgICBldmVudFRhYmxlICs9IGV2ZW50VGFibGVSb3c7XG4gICAgfVxuXG4gICAgLyogRXhhbXBsZTpcbiAgICAgICAgfCBSZXR1cm4gVHlwZSB8IEZ1bmN0aW9uIHwgRGVzY3JpcHRpb24gfCBQYXJhbWV0ZXJzIHwgW0dsb2JhbF0oL2VuL3NreXJpbS9kZXZlbG9wZXJzL3BhcHlydXMvY29uY2VwdHMvZnVuY3Rpb25zI2dsb2JhbF9mbGFnKT8gfCBbTmF0aXZlXSgvc2t5cmltL2RldmVsb3BlcnMvcGFweXJ1cy9jb25jZXB0cy9mdW5jdGlvbnMjbmF0aXZlLWZsYWcpP1xuICAgICAgICB8IC0tOiB8IDotOiB8IDotOiB8IDotOiB8IDotOiB8IDotOiB8XG4gICAgICAgIHwgSW50IHwgR2V0Rm9ybUlEIHwgUmV0dXJucyB0aGUgZm9ybSBvZiBvZiB0aGUgZm9ybSB5b3UgcnVuIHRoaXMgb24gfCAgICAgfCBObyB8IFllcyB8XG4gICAgKi9cbiAgICBmb3IgKGNvbnN0IGZ1bmMgb2YgZnVuY3Rpb25zKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcbiAgICAgICAgY29uc3QgZnVuY1RhYmxlUm93ID0gYHwgJHtmdW5jLnJldHVybnMuc2NyaXB0fSR7ZnVuYy5yZXR1cm5zLmlzQXJyYXkgPyAnW10nIDogJyd9IHwgJHtmdW5jLm5hbWV9IHwgJHtmdW5jLmRlc2NyaXB0aW9uLnJlcGxhY2UoL1xcbi9nLCAnPGJyIC8+Jyl9IHwgYCArXG5cbiAgICAgICAgZnVuYy5wYXJhbWV0ZXJzLm1hcChwYXJhbSA9PiBgXFxgJHtlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyhwYXJhbS5zY3JpcHQpfVxcYCAqJHtlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyhwYXJhbS5uYW1lKX0qYCkuam9pbignLCA8YnIgLz4nKS5yZXBsYWNlKC8sIDxiciBcXC8+JC8sICcnKSArXG5cbiAgICAgICAgYHwgJHtmdW5jLmdsb2JhbCA/ICdHbG9iYWwnIDogJ01lbWJlcid9IHwgJHtmdW5jLm5hdGl2ZSA/ICdOYXRpdmUnIDogJ1NjcmlwdGVkJ30gfFxcbmA7XG4gICAgICAgIGZ1bmN0aW9uVGFibGUgKz0gZnVuY1RhYmxlUm93O1xuICAgIH1cblxuICAgIHJldHVybiB0cmltV2hpdGVzcGFjZShgIyAke3NjcmlwdG5hbWUubmFtZX1cblxufCA6LTogfCA6LS0gfFxufCBFbmdpbmUtQm91bmQgVHlwZSB8IDwhLS0gKipVU0VSLUlOUFVUVEVEKiogLS0+IHwgPCEtLSBlLmcuIFxcYF9OUENcXGAgKEFjdG9yKSAtLT5cbnwgW1BhcmVudF0oL3NreXJpbS9kZXZlbG9wZXJzL3BhcHlydXMvY29uY2VwdHMvc2NyaXB0cyNwYXJlbnRzKSB8ICR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMoc2NyaXB0bmFtZS5wYXJlbnQpfSB8XG58IFtMaWJyYXJ5XSgvc2t5cmltL2RldmVsb3BlcnMvcGFweXJ1cy9jb25jZXB0cy9saWJyYXJpZXMpIHwgWyR7ZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMoaW5wdXRWYWx1ZShlbGVtX3BhcHlfZG9jc19saWJOYW1lKSl9XSgke2VzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzKGlucHV0VmFsdWUoZWxlbV9wYXB5X2RvY3NfbGliTGluaykpfSkgfFxuXG4ke2VzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzKHNjcmlwdG5hbWU/LmRvY3VtZW50YXRpb24/LnJlcGxhY2UoL14vZ3NtLCAnPiAnKS5yZXBsYWNlKC9ePiAkL2csICcnKSA/PyAnJyl9XG5cbjwhLS0gKipBZGQgZXh0cmEgZGVzY3JpcHRpb24gSEVSRSoqIC0tPiR7ZnVuY3Rpb25UYWJsZS5sZW5ndGggPiAwID8gYFxuXG5cblxuIyMgW05hdGl2ZSBGdW5jdGlvbnNdKC9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL2NvbmNlcHRzL2Z1bmN0aW9ucyNuYXRpdmUtZmxhZylcbnwgUmV0dXJuIFR5cGUgfCBGdW5jdGlvbiB8IERlc2NyaXB0aW9uIHwgUGFyYW1ldGVycyB8IFtHbG9iYWxdKC9lbi9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL2NvbmNlcHRzL2Z1bmN0aW9ucyNnbG9iYWxfZmxhZyk/IHwgW05hdGl2ZV0oL3NreXJpbS9kZXZlbG9wZXJzL3BhcHlydXMvY29uY2VwdHMvZnVuY3Rpb25zI25hdGl2ZS1mbGFnKT9cbnwgLS06IHwgOi06IHwgOi06IHwgOi06IHwgOi06IHwgOi06IHxgIDogJyd9XG4ke2Z1bmN0aW9uVGFibGV9JHtldmVudFRhYmxlLmxlbmd0aCA+IDAgPyBgXG5cblxuXG4jIyBbRXZlbnRzXShodHRwczovL21vZGRpbmcud2lraS9lbi9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL2NvbmNlcHRzL2V2ZW50cylcbnwgRXZlbnQgfCBEZXNjcmlwdGlvbiB8IFtSZWdpc3RyYXRpb25dKGh0dHBzOi8vbW9kZGluZy53aWtpL2VuL3NreXJpbS9kZXZlbG9wZXJzL3BhcHlydXMvY29uY2VwdHMvZnVuY3Rpb25zI3JlZ2lzdHJhdGlvbikgfCBQYXJhbWV0ZXJzIHxcbnwgOi0tIHwgOi06IHwgOi06IHwgOi0tIHxgIDogJyd9XG4ke2V2ZW50VGFibGV9XG5cblxuXG4jIFJldHVybmluZyBbTmF0aXZlIEZ1bmN0aW9uc10oaHR0cHM6Ly9tb2RkaW5nLndpa2kvZW4vc2t5cmltL2RldmVsb3BlcnMvcGFweXJ1cy9jb25jZXB0cy9mdW5jdGlvbnMjbmF0aXZlLWZsYWcpXG5cbltOYXRpdmUgRnVuY3Rpb25zXShodHRwczovL21vZGRpbmcud2lraS9lbi9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL2NvbmNlcHRzL2Z1bmN0aW9ucyNuYXRpdmUtZmxhZykgZnJvbSBhbnkgc2NyaXB0IG9yIGxpYnJhcnkgdGhhdCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhpcyBzY3JpcHRcblxuPCEtLSAqKk1VU1QgQkUgQ1JFQVRFRCBNQU5VQUxMWSoqIC0tPlxufCBGdW5jdGlvbiB8IERlc2NyaXB0aW9uIHwgW0FycmF5XSgvc2t5cmltL2RldmVsb3BlcnMvcGFweXJ1cy9jb25jZXB0cy9hcnJheXMpIHwgU2NyaXB0ICB8IExpYnJhcnkgfFxufCAgICA6LTogICB8ICAgICA6LTogICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgOi06ICAgICAgICAgICAgICAgICAgICAgICAgIHwgICA6LTogICB8ICAgOi06ICAgfFxuXG5cblxuIyBbQ2hpbGRyZW5dKC9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL2NvbmNlcHRzL3NjcmlwdHMjY2hpbGRyZW4pXG5cblNjcmlwdHMgZXh0ZW5kaW5nIHRoaXMgc2NyaXB0XG5cbjwhLS0gKipNVVNUIEJFIENSRUFURUQgTUFOVUFMTFkqKiAtLT5cbnwgU2NyaXB0IE5hbWUgfCBIYXMgRW5naW5lLUJvdW5kIFR5cGU/IHwgPCEtLSBTY3JpcHRzIHdpdGggZW5naW5lLWJvdW5kIHR5cGVzIHNob3VsZCBjb21lIGZpcnN0IC0tPlxufCAgICAgOi06ICAgICB8ICAgICAgICAgIDotOiAgICAgICAgICAgfFxuYCwgdHJ1ZSk7XG59XG5cblxuLyoqIFBhcnNlcyB0aGUgXCJTY3JpcHRuYW1lXCIgcG9ydGlvbiBvZiBhIHNjcmlwdCAqL1xuZnVuY3Rpb24gcGFyc2VTY3JpcHROYW1lKHNjcmlwdFN0cjpzdHJpbmcpOiBQYXB5cnVzU2NyaXB0IHtcbiAgICBjb25zdCBwYXJzZWQgPSBzY3JpcHRTdHIubWF0Y2gocmVnZXhfU2NyaXB0bmFtZSk7XG4gICAgaWYgKCFwYXJzZWQpIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBwYXJlbnQ6ICcnLFxuICAgICAgICBkb2N1bWVudGF0aW9uOiAnJyxcbiAgICAgICAgY29uZGl0aW9uYWw6IGZhbHNlLFxuICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICBuYXRpdmU6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBwYXJzZWRbMV0gPz8gJycsXG5cbiAgICAgICAgZG9jdW1lbnRhdGlvbjogdHlwZW9mIHBhcnNlZFs2XSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IHBhcnNlZFs2XSxcblxuICAgICAgICBwYXJlbnQ6IHR5cGVvZiBwYXJzZWRbMl0gPT09ICd1bmRlZmluZWQnID8gJ1tUb3AtTGV2ZWxdKC9za3lyaW0vZGV2ZWxvcGVycy9wYXB5cnVzL3RvcC1sZXZlbC1pbmRleCknIDogcGFyc2VkWzJdLFxuXG4gICAgICAgIGhpZGRlbjogdHlwZW9mIHBhcnNlZFszXSAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgIGNvbmRpdGlvbmFsOiB0eXBlb2YgcGFyc2VkWzRdICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgbmF0aXZlOiB0eXBlb2YgcGFyc2VkWzVdICE9PSAndW5kZWZpbmVkJ1xuICAgIH07XG59XG5cblxuXG4vKiogUGFyc2VzIHRoZSBFdmVudHMgaW4gdGhlIHNjcmlwdCAqL1xuZnVuY3Rpb24gcGFyc2VFdmVudHMoc2NyaXB0U3RyOnN0cmluZyk6UGFweXJ1c0V2ZW50W10ge1xuICAgIC8vY29uc29sZS5sb2coJ1BhcnNpbmcgZXZlbnRzLi4uJyk7XG4gICAgLy9jb25zb2xlLmxvZyhyZWdleF9FdmVudHMpO1xuICAgIC8vY29uc29sZS5sb2coc2NyaXB0U3RyKTtcbiAgICBjb25zdCBldmVudHM6UGFweXJ1c0V2ZW50W10gPSBbXTtcbiAgICBjb25zdCBwYXJzZWQgPSBzY3JpcHRTdHIubWF0Y2hBbGwocmVnZXhfRXZlbnRzKTtcbiAgICAvL2NvbnNvbGUubG9nKCdFdmVudHMgUGFyc2VkOicsIHBhcnNlZCk7XG4gICAgZm9yIChjb25zdCBldmVudE1hdGNoIG9mIHBhcnNlZCl7XG4gICAgICAgIC8vY29uc29sZS5sb2coYEN1cnJlbnQgRXZlbnQ6YCwgX2V2ZW50KTtcbiAgICAgICAgLy8gUGFyc2UgRXZlbnQgUGFyYW1ldGVyc1xuXG4gICAgICAgIGV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGV2ZW50TWF0Y2hbMl0gPz8gJycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJpbVdoaXRlc3BhY2UoZXZlbnRNYXRjaFsxXSA/PyAnJykucmVwbGFjZSgvXlxccyo7XFxzKi9nbSwgJycpLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogcGFyc2VQYXJhbWV0ZXJzKGV2ZW50TWF0Y2hbM10gPz8gJycpLFxuICAgICAgICAgICAgYm9keTogdHlwZW9mIGV2ZW50TWF0Y2hbNF0gPT09ICd1bmRlZmluZWQnID8gJycgOiB0cmltV2hpdGVzcGFjZShldmVudE1hdGNoWzRdKSxcbiAgICAgICAgICAgIGdsb2JhbDogZmFsc2UsXG4gICAgICAgICAgICBuYXRpdmU6IGZhbHNlLFxuICAgICAgICAgICAgcmV0dXJuczoge3NjcmlwdDogJ05vbmUnLCBpc0FycmF5OiBmYWxzZX1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vY29uc29sZS5sb2coJ3BhcnNlRXZlbnRzKCk6ICcsIGV2ZW50cyk7XG4gICAgcmV0dXJuIGV2ZW50cztcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXJhbWV0ZXJzKHBhcmFtU3RyOnN0cmluZyk6UGFweXJ1c1BhcmFtZXRlcltdIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtU3RyICE9PSAnc3RyaW5nJykgcmV0dXJuIFtdO1xuXG4gICAgY29uc3QgcmVzdWx0X2FyciA6IFBhcHlydXNQYXJhbWV0ZXJbXSA9IFtdO1xuICAgIGNvbnN0IHBhcmFtcyA9IHBhcmFtU3RyLm1hdGNoQWxsKHJlZ2V4X1BhcmFtZXRlcnMpO1xuXG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBwYXJhbXMpe1xuICAgICAgICByZXN1bHRfYXJyLnB1c2goe1xuICAgICAgICAgICAgc2NyaXB0OiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIocGFyYW1bMV0gPz8gJycpLFxuICAgICAgICAgICAgaXNBcnJheTogcGFyYW1bMl0gIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG5hbWU6IHBhcmFtWzNdID8/ICcnLFxuICAgICAgICAgICAgZGVmYXVsdDogdHlwZW9mIHBhcmFtWzRdID09PSAndW5kZWZpbmVkJyA/ICcnIDogcGFyYW1bM10gPz8gJydcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdF9hcnI7XG59XG5cbi8qKiBQYXJzZXMgdGhlIEV2ZW50cyBpbiB0aGUgc2NyaXB0XG4gICAgQHBhcmFtIHtzdHJpbmd9IHNjcmlwdFN0ciAtIFRoZSBzY3JpcHQgdG8gcGFyc2VcbiAgICBAcmV0dXJucyB7QXJyYXk8Pn0gLSBBbiBhcnJheSBvZiBldmVudCBvYmplY3RzXG4qL1xuXG5mdW5jdGlvbiBwYXJzZUZ1bmN0aW9ucyhzY3JpcHRTdHI6c3RyaW5nKTpQYXB5cnVzRnVuY3Rpb25bXSB7XG4gICAgY29uc3QgZnVuY3Rpb25zOlBhcHlydXNGdW5jdGlvbltdID0gW107XG4gICAgY29uc3QgcGFyc2VkID0gc2NyaXB0U3RyLm1hdGNoQWxsKHJlZ2V4X0Z1bmN0aW9ucyk7XG4gICAgZm9yIChjb25zdCBfZnVuY3Rpb24gb2YgcGFyc2VkKXtcbiAgICAgICAgZnVuY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgcmV0dXJuczoge3NjcmlwdDogdHlwZW9mIF9mdW5jdGlvblsyXSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGNhcGl0YWxpemVGaXJzdExldHRlcihfZnVuY3Rpb25bMl0pLCBpc0FycmF5OiB0eXBlb2YgX2Z1bmN0aW9uWzNdICE9PSAndW5kZWZpbmVkJ30sXG4gICAgICAgICAgICBuYW1lOiBfZnVuY3Rpb25bNF0gPz8gJycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogLy8gQ29uY2F0ZW5hdGUgdGhlIHZhcmlvdXMgcG9zc2libGUgZGVzY3JpcHRpb24gbWF0Y2hlc1xuICAgICAgICAgICAgICAgICh0eXBlb2YgX2Z1bmN0aW9uWzFdID09PSAndW5kZWZpbmVkJyA/ICcnIDogdHJpbVdoaXRlc3BhY2UoX2Z1bmN0aW9uWzFdKS5yZXBsYWNlKC9eXFxzKjtcXHMqL2dtLCAnJykpICtcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBfZnVuY3Rpb25bMV0gPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBfZnVuY3Rpb25bOF0gPT09ICd1bmRlZmluZWQnID8gJycgOiAnXFxuXFxuJykgK1xuICAgICAgICAgICAgICAgICh0eXBlb2YgX2Z1bmN0aW9uWzhdID09PSAndW5kZWZpbmVkJyA/ICcnIDogdHJpbVdoaXRlc3BhY2UoX2Z1bmN0aW9uWzhdKS5yZXBsYWNlKC9eXFxzKjtcXHMqL2dtLCAnJykpICtcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBfZnVuY3Rpb25bOF0gPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBfZnVuY3Rpb25bOV0gPT09ICd1bmRlZmluZWQnID8gJycgOiAnXFxuXFxuJykgK1xuICAgICAgICAgICAgICAgICh0eXBlb2YgX2Z1bmN0aW9uWzldID09PSAndW5kZWZpbmVkJyA/ICcnIDogdHJpbVdoaXRlc3BhY2UoX2Z1bmN0aW9uWzldKS5yZXBsYWNlKC9eXFxzKjtcXHMqL2dtLCAnJykpLFxuXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBwYXJzZVBhcmFtZXRlcnMoX2Z1bmN0aW9uWzVdID8/ICcnKSxcbiAgICAgICAgICAgIGdsb2JhbDogdHlwZW9mIF9mdW5jdGlvbls2XSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIF9mdW5jdGlvbls4XSAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICBuYXRpdmU6IHR5cGVvZiBfZnVuY3Rpb25bN10gIT09ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgYm9keTogX2Z1bmN0aW9uWzExXSA9PT0gJ3N0cmluZycgPyB0cmltV2hpdGVzcGFjZShfZnVuY3Rpb25bOV0gPz8gJycpIDogJydcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbnM7XG59XG5cblxuXG4vKiQkJCQkXFwgICAkJCQkJCRcXCAgJCRcXCAgICAgICQkXFwgICAgICAgJCRcXCAgICQkXFwgICAkJFxcICAgICAkJFxcICQkXFxcbiQkICBfXyQkXFwgJCQgIF9fJCRcXCAkJCRcXCAgICAkJCQgfCAgICAgICQkIHwgICQkIHwgICQkIHwgICAgXFxfX3wkJCB8XG4kJCB8ICAkJCB8JCQgLyAgJCQgfCQkJCRcXCAgJCQkJCB8ICAgICAgJCQgfCAgJCQgfCQkJCQkJFxcICAgJCRcXCAkJCB8ICQkJCQkJCRcXFxuJCQgfCAgJCQgfCQkIHwgICQkIHwkJFxcJCRcXCQkICQkIHwgICAgICAkJCB8ICAkJCB8XFxfJCQgIF98ICAkJCB8JCQgfCQkICBfX19fX3xcbiQkIHwgICQkIHwkJCB8ICAkJCB8JCQgXFwkJCQgICQkIHwgICAgICAkJCB8ICAkJCB8ICAkJCB8ICAgICQkIHwkJCB8XFwkJCQkJCRcXFxuJCQgfCAgJCQgfCQkIHwgICQkIHwkJCB8XFwkICAvJCQgfCAgICAgICQkIHwgICQkIHwgICQkIHwkJFxcICQkIHwkJCB8IFxcX19fXyQkXFxcbiQkJCQkJCQgIHwgJCQkJCQkICB8JCQgfCBcXF8vICQkIHwgICAgICBcXCQkJCQkJCAgfCAgXFwkJCQkICB8JCQgfCQkIHwkJCQkJCQkICB8XG5cXF9fX19fX18vICBcXF9fX19fXy8gXFxfX3wgICAgIFxcX198ICAgICAgIFxcX19fX19fLyAgICBcXF9fX18vIFxcX198XFxfX3xcXF9fX19fXyovXG5cblxuXG5cbi8qKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBnZXQgdGhlIHZhbHVlIG9mIGFuIGlucHV0IGVsZW1lbnQuIFdpbGwgZmlyc3QgYXR0ZW1wdCB0byBnZXQgYSB1c2VyLXN1Ym1pdHRlZCB2YWx1ZSwgdGhlbiB3aWxsIGF0dGVtcHQgdG8gZmV0Y2ggYSBkZWZhdWx0IGZyb20gYGJ1aWxkZXJfZGVmYXVsdGAsIGJlZm9yZSBmaW5hbGx5IHJlc29ydGluZyB0byB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUuXG4gICAgQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgSW5wdXQgZWxlbWVudCB0byBnZXQgdGhlIHZhbHVlIG9mXG4gICAgQHBhcmFtIHtib29sZWFufSBbdXNlUGxhY2Vob2xkZXI9dHJ1ZV0gV2hldGhlciB0byB1c2UgdGhlIGBwbGFjZWhvbGRlcmAuIERlZmF1bHRzIHRvIFRydWUuXG4gICAgQHJldHVybnMge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBlbGVtZW50XG4qL1xuZnVuY3Rpb24gaW5wdXRWYWx1ZShlbGVtZW50OkhUTUxJbnB1dEVsZW1lbnQsIHVzZVBsYWNlaG9sZGVyOmJvb2xlYW4gPSB0cnVlKTpzdHJpbmd7XG4gICAgLy9jb25zb2xlLmxvZyhlbGVtZW50KTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7XG4gICAgdHJ5e1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQudmFsdWUgIT09ICd1bmRlZmluZWQnICYmIGVsZW1lbnQudmFsdWUgIT0gJycpIHJldHVybiBlbGVtZW50LnZhbHVlO1xuXG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncGxhY2Vob2xkZXInKSAmJiB1c2VQbGFjZWhvbGRlcikgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicpID8/ICcnO1xuXG4gICAgfSBmaW5hbGx5IHt9IHJldHVybiAnJztcbn1cblxuXG5mdW5jdGlvbiBzb3J0QXJyYXlPZk9iamVjdEFscGhhQnlLZXk8VEFyciBleHRlbmRzIHVua25vd25bXT4ob2JqOlRBcnIsIGtleTprZXlvZiBUQXJyW251bWJlcl0pOiBUQXJyIHtcbiAgICByZXR1cm4gb2JqLnNvcnQoKGE6VEFycltudW1iZXJdLCBiOlRBcnJbbnVtYmVyXSkgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0QSA9IEpTT04uc3RyaW5naWZ5KGFba2V5XSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdGV4dEIgPSBKU09OLnN0cmluZ2lmeShiW2tleV0pLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiAodGV4dEEgPCB0ZXh0QikgPyAtMSA6ICh0ZXh0QSA+IHRleHRCKSA/IDEgOiAwO1xuICAgIH0pO1xufVxuIl19