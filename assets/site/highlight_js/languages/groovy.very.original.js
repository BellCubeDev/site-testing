function variants(variants, obj = {}) {
    obj.variants = variants;
    return obj;
}
function groovy(hljs) {
    const regex = hljs.regex;
    const IDENT_RE = '[A-Za-z0-9_$]+';
    const COMMENT = variants([
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT('/\\*\\*', '\\*/', {
            relevance: 0,
            contains: [
                {
                    begin: /\w+@/,
                    relevance: 0
                },
                {
                    className: 'doctag',
                    begin: '@[A-Za-z]+'
                }
            ]
        })
    ]);
    const REGEXP = {
        className: 'regexp',
        begin: /~?\/[^\/\n]+\//,
        contains: [hljs.BACKSLASH_ESCAPE]
    };
    const NUMBER = variants([
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE
    ]);
    const STRING = variants([
        {
            begin: /"""/,
            end: /"""/
        },
        {
            begin: /'''/,
            end: /'''/
        },
        {
            begin: "\\$/",
            end: "/\\$",
            relevance: 10
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
    ], { className: "string" });
    const CLASS_DEFINITION = {
        match: [
            /(class|interface|trait|enum|extends|implements)/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
        ],
        scope: {
            1: "keyword",
            3: "title.class",
        }
    };
    const TYPES = [
        "byte",
        "short",
        "char",
        "int",
        "long",
        "boolean",
        "float",
        "double",
        "void"
    ];
    const KEYWORDS = [
        "def",
        "as",
        "in",
        "assert",
        "trait",
        "abstract",
        "static",
        "volatile",
        "transient",
        "public",
        "private",
        "protected",
        "synchronized",
        "final",
        "class",
        "interface",
        "enum",
        "if",
        "else",
        "for",
        "while",
        "switch",
        "case",
        "break",
        "default",
        "continue",
        "throw",
        "throws",
        "try",
        "catch",
        "finally",
        "implements",
        "extends",
        "new",
        "import",
        "package",
        "return",
        "instanceof"
    ];
    return {
        name: 'Groovy',
        keywords: {
            "variable.language": 'this super',
            literal: 'true false null',
            type: TYPES,
            keyword: KEYWORDS
        },
        contains: [
            hljs.SHEBANG({
                binary: "groovy",
                relevance: 10
            }),
            COMMENT,
            STRING,
            REGEXP,
            NUMBER,
            CLASS_DEFINITION,
            {
                className: 'meta',
                begin: '@[A-Za-z]+',
                relevance: 0
            },
            {
                className: 'attr',
                begin: IDENT_RE + '[ \t]*:',
                relevance: 0
            },
            {
                begin: /\?/,
                end: /:/,
                relevance: 0,
                contains: [
                    COMMENT,
                    STRING,
                    REGEXP,
                    NUMBER,
                    'self'
                ]
            },
            {
                className: 'symbol',
                begin: '^[ \t]*' + regex.lookahead(IDENT_RE + ':'),
                excludeBegin: true,
                end: IDENT_RE + ':',
                relevance: 0
            }
        ],
        illegal: /#|<\//
    };
}
export { groovy as default };
//# sourceMappingURL=data:application/json;base64,