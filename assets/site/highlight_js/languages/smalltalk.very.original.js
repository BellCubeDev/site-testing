function smalltalk(hljs) {
    const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
    const CHAR = {
        className: 'string',
        begin: '\\$.{1}'
    };
    const SYMBOL = {
        className: 'symbol',
        begin: '#' + hljs.UNDERSCORE_IDENT_RE
    };
    return {
        name: 'Smalltalk',
        aliases: ['st'],
        keywords: [
            "self",
            "super",
            "nil",
            "true",
            "false",
            "thisContext"
        ],
        contains: [
            hljs.COMMENT('"', '"'),
            hljs.APOS_STRING_MODE,
            {
                className: 'type',
                begin: '\\b[A-Z][A-Za-z0-9_]*',
                relevance: 0
            },
            {
                begin: VAR_IDENT_RE + ':',
                relevance: 0
            },
            hljs.C_NUMBER_MODE,
            SYMBOL,
            CHAR,
            {
                begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
                returnBegin: true,
                end: /\|/,
                illegal: /\S/,
                contains: [{ begin: '(\\|[ ]*)?' + VAR_IDENT_RE }]
            },
            {
                begin: '#\\(',
                end: '\\)',
                contains: [
                    hljs.APOS_STRING_MODE,
                    CHAR,
                    hljs.C_NUMBER_MODE,
                    SYMBOL
                ]
            }
        ]
    };
}
export { smalltalk as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hbGx0YWxrLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvc21hbGx0YWxrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDckIsTUFBTSxZQUFZLEdBQUcsb0JBQW9CLENBQUM7SUFDMUMsTUFBTSxJQUFJLEdBQUc7UUFDWCxTQUFTLEVBQUUsUUFBUTtRQUNuQixLQUFLLEVBQUUsU0FBUztLQUNqQixDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsUUFBUTtRQUNuQixLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUI7S0FDdEMsQ0FBQztJQUNGLE9BQU87UUFDTCxJQUFJLEVBQUUsV0FBVztRQUNqQixPQUFPLEVBQUUsQ0FBRSxJQUFJLENBQUU7UUFDakIsUUFBUSxFQUFFO1lBQ1IsTUFBTTtZQUNOLE9BQU87WUFDUCxLQUFLO1lBQ0wsTUFBTTtZQUNOLE9BQU87WUFDUCxhQUFhO1NBQ2Q7UUFDRCxRQUFRLEVBQUU7WUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDdEIsSUFBSSxDQUFDLGdCQUFnQjtZQUNyQjtnQkFDRSxTQUFTLEVBQUUsTUFBTTtnQkFDakIsS0FBSyxFQUFFLHVCQUF1QjtnQkFDOUIsU0FBUyxFQUFFLENBQUM7YUFDYjtZQUNEO2dCQUNFLEtBQUssRUFBRSxZQUFZLEdBQUcsR0FBRztnQkFDekIsU0FBUyxFQUFFLENBQUM7YUFDYjtZQUNELElBQUksQ0FBQyxhQUFhO1lBQ2xCLE1BQU07WUFDTixJQUFJO1lBQ0o7Z0JBSUUsS0FBSyxFQUFFLFNBQVMsR0FBRyxZQUFZLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxXQUFXO2dCQUN0RSxXQUFXLEVBQUUsSUFBSTtnQkFDakIsR0FBRyxFQUFFLElBQUk7Z0JBQ1QsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsUUFBUSxFQUFFLENBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxHQUFHLFlBQVksRUFBRSxDQUFFO2FBQ3JEO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsUUFBUSxFQUFFO29CQUNSLElBQUksQ0FBQyxnQkFBZ0I7b0JBQ3JCLElBQUk7b0JBQ0osSUFBSSxDQUFDLGFBQWE7b0JBQ2xCLE1BQU07aUJBQ1A7YUFDRjtTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxPQUFPLEVBQUUsU0FBUyxJQUFJLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBTbWFsbHRhbGtcbkRlc2NyaXB0aW9uOiBTbWFsbHRhbGsgaXMgYW4gb2JqZWN0LW9yaWVudGVkLCBkeW5hbWljYWxseSB0eXBlZCByZWZsZWN0aXZlIHByb2dyYW1taW5nIGxhbmd1YWdlLlxuQXV0aG9yOiBWbGFkaW1pciBHdWJhcmtvdiA8eG9uaXh4QGdtYWlsLmNvbT5cbldlYnNpdGU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NtYWxsdGFsa1xuKi9cblxuZnVuY3Rpb24gc21hbGx0YWxrKGhsanMpIHtcbiAgY29uc3QgVkFSX0lERU5UX1JFID0gJ1thLXpdW2EtekEtWjAtOV9dKic7XG4gIGNvbnN0IENIQVIgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogJ1xcXFwkLnsxfSdcbiAgfTtcbiAgY29uc3QgU1lNQk9MID0ge1xuICAgIGNsYXNzTmFtZTogJ3N5bWJvbCcsXG4gICAgYmVnaW46ICcjJyArIGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRVxuICB9O1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdTbWFsbHRhbGsnLFxuICAgIGFsaWFzZXM6IFsgJ3N0JyBdLFxuICAgIGtleXdvcmRzOiBbXG4gICAgICBcInNlbGZcIixcbiAgICAgIFwic3VwZXJcIixcbiAgICAgIFwibmlsXCIsXG4gICAgICBcInRydWVcIixcbiAgICAgIFwiZmFsc2VcIixcbiAgICAgIFwidGhpc0NvbnRleHRcIlxuICAgIF0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIGhsanMuQ09NTUVOVCgnXCInLCAnXCInKSxcbiAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndHlwZScsXG4gICAgICAgIGJlZ2luOiAnXFxcXGJbQS1aXVtBLVphLXowLTlfXSonLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBWQVJfSURFTlRfUkUgKyAnOicsXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIGhsanMuQ19OVU1CRVJfTU9ERSxcbiAgICAgIFNZTUJPTCxcbiAgICAgIENIQVIsXG4gICAgICB7XG4gICAgICAgIC8vIFRoaXMgbG9va3MgbW9yZSBjb21wbGljYXRlZCB0aGFuIG5lZWRlZCB0byBhdm9pZCBjb21iaW5hdG9yaWFsXG4gICAgICAgIC8vIGV4cGxvc2lvbiB1bmRlciBWOC4gSXQgZWZmZWN0aXZlbHkgbWVhbnMgYHwgdmFyMSB2YXIyIC4uLiB8YCB3aXRoXG4gICAgICAgIC8vIHdoaXRlc3BhY2UgYWRqYWNlbnQgdG8gYHxgIGJlaW5nIG9wdGlvbmFsLlxuICAgICAgICBiZWdpbjogJ1xcXFx8WyBdKicgKyBWQVJfSURFTlRfUkUgKyAnKFsgXSsnICsgVkFSX0lERU5UX1JFICsgJykqWyBdKlxcXFx8JyxcbiAgICAgICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgIGVuZDogL1xcfC8sXG4gICAgICAgIGlsbGVnYWw6IC9cXFMvLFxuICAgICAgICBjb250YWluczogWyB7IGJlZ2luOiAnKFxcXFx8WyBdKik/JyArIFZBUl9JREVOVF9SRSB9IF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnI1xcXFwoJyxcbiAgICAgICAgZW5kOiAnXFxcXCknLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgICBDSEFSLFxuICAgICAgICAgIGhsanMuQ19OVU1CRVJfTU9ERSxcbiAgICAgICAgICBTWU1CT0xcbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgc21hbGx0YWxrIGFzIGRlZmF1bHQgfTtcbiJdfQ==