function cal(hljs) {
    const regex = hljs.regex;
    const KEYWORDS = [
        "div",
        "mod",
        "in",
        "and",
        "or",
        "not",
        "xor",
        "asserterror",
        "begin",
        "case",
        "do",
        "downto",
        "else",
        "end",
        "exit",
        "for",
        "local",
        "if",
        "of",
        "repeat",
        "then",
        "to",
        "until",
        "while",
        "with",
        "var"
    ];
    const LITERALS = 'false true';
    const COMMENT_MODES = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
        hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ];
    const STRING = {
        className: 'string',
        begin: /'/,
        end: /'/,
        contains: [{ begin: /''/ }]
    };
    const CHAR_STRING = {
        className: 'string',
        begin: /(#\d+)+/
    };
    const DATE = {
        className: 'number',
        begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
        relevance: 0
    };
    const DBL_QUOTED_VARIABLE = {
        className: 'string',
        begin: '"',
        end: '"'
    };
    const PROCEDURE = {
        match: [
            /procedure/,
            /\s+/,
            /[a-zA-Z_][\w@]*/,
            /\s*/
        ],
        scope: {
            1: "keyword",
            3: "title.function"
        },
        contains: [
            {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                contains: [
                    STRING,
                    CHAR_STRING,
                    hljs.NUMBER_MODE
                ]
            },
            ...COMMENT_MODES
        ]
    };
    const OBJECT_TYPES = [
        "Table",
        "Form",
        "Report",
        "Dataport",
        "Codeunit",
        "XMLport",
        "MenuSuite",
        "Page",
        "Query"
    ];
    const OBJECT = {
        match: [
            /OBJECT/,
            /\s+/,
            regex.either(...OBJECT_TYPES),
            /\s+/,
            /\d+/,
            /\s+(?=[^\s])/,
            /.*/,
            /$/
        ],
        relevance: 3,
        scope: {
            1: "keyword",
            3: "type",
            5: "number",
            7: "title"
        }
    };
    const PROPERTY = {
        match: /[\w]+(?=\=)/,
        scope: "attribute",
        relevance: 0
    };
    return {
        name: 'C/AL',
        case_insensitive: true,
        keywords: {
            keyword: KEYWORDS,
            literal: LITERALS
        },
        illegal: /\/\*/,
        contains: [
            PROPERTY,
            STRING,
            CHAR_STRING,
            DATE,
            DBL_QUOTED_VARIABLE,
            hljs.NUMBER_MODE,
            OBJECT,
            PROCEDURE
        ]
    };
}
export { cal as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvY2FsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLFNBQVMsR0FBRyxDQUFDLElBQUk7SUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sUUFBUSxHQUFHO1FBQ2YsS0FBSztRQUNMLEtBQUs7UUFDTCxJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixLQUFLO1FBQ0wsS0FBSztRQUNMLGFBQWE7UUFDYixPQUFPO1FBQ1AsTUFBTTtRQUNOLElBQUk7UUFDSixRQUFRO1FBQ1IsTUFBTTtRQUNOLEtBQUs7UUFDTCxNQUFNO1FBQ04sS0FBSztRQUNMLE9BQU87UUFDUCxJQUFJO1FBQ0osSUFBSTtRQUNKLFFBQVE7UUFDUixNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU87UUFDUCxPQUFPO1FBQ1AsTUFBTTtRQUNOLEtBQUs7S0FDTixDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBQzlCLE1BQU0sYUFBYSxHQUFHO1FBQ3BCLElBQUksQ0FBQyxtQkFBbUI7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FDVixJQUFJLEVBQ0osSUFBSSxFQUNKLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUNqQjtRQUNELElBQUksQ0FBQyxPQUFPLENBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FDbEI7S0FDRixDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsUUFBUTtRQUNuQixLQUFLLEVBQUUsR0FBRztRQUNWLEdBQUcsRUFBRSxHQUFHO1FBQ1IsUUFBUSxFQUFFLENBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUU7S0FDOUIsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUFHO1FBQ2xCLFNBQVMsRUFBRSxRQUFRO1FBQ25CLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUM7SUFDRixNQUFNLElBQUksR0FBRztRQUNYLFNBQVMsRUFBRSxRQUFRO1FBQ25CLEtBQUssRUFBRSwyQkFBMkI7UUFDbEMsU0FBUyxFQUFFLENBQUM7S0FDYixDQUFDO0lBQ0YsTUFBTSxtQkFBbUIsR0FBRztRQUMxQixTQUFTLEVBQUUsUUFBUTtRQUNuQixLQUFLLEVBQUUsR0FBRztRQUNWLEdBQUcsRUFBRSxHQUFHO0tBQ1QsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHO1FBQ2hCLEtBQUssRUFBRTtZQUNMLFdBQVc7WUFDWCxLQUFLO1lBQ0wsaUJBQWlCO1lBQ2pCLEtBQUs7U0FDTjtRQUNELEtBQUssRUFBRTtZQUNMLENBQUMsRUFBRSxTQUFTO1lBQ1osQ0FBQyxFQUFFLGdCQUFnQjtTQUNwQjtRQUNELFFBQVEsRUFBRTtZQUNSO2dCQUNFLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixLQUFLLEVBQUUsSUFBSTtnQkFDWCxHQUFHLEVBQUUsSUFBSTtnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsUUFBUSxFQUFFO29CQUNSLE1BQU07b0JBQ04sV0FBVztvQkFDWCxJQUFJLENBQUMsV0FBVztpQkFDakI7YUFDRjtZQUNELEdBQUcsYUFBYTtTQUNqQjtLQUNGLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRztRQUNuQixPQUFPO1FBQ1AsTUFBTTtRQUNOLFFBQVE7UUFDUixVQUFVO1FBQ1YsVUFBVTtRQUNWLFNBQVM7UUFDVCxXQUFXO1FBQ1gsTUFBTTtRQUNOLE9BQU87S0FDUixDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUc7UUFDYixLQUFLLEVBQUU7WUFDTCxRQUFRO1lBQ1IsS0FBSztZQUNMLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUM7WUFDN0IsS0FBSztZQUNMLEtBQUs7WUFDTCxjQUFjO1lBQ2QsSUFBSTtZQUNKLEdBQUc7U0FDSjtRQUNELFNBQVMsRUFBRSxDQUFDO1FBQ1osS0FBSyxFQUFFO1lBQ0wsQ0FBQyxFQUFFLFNBQVM7WUFDWixDQUFDLEVBQUUsTUFBTTtZQUNULENBQUMsRUFBRSxRQUFRO1lBQ1gsQ0FBQyxFQUFFLE9BQU87U0FDWDtLQUNGLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRztRQUNmLEtBQUssRUFBRSxhQUFhO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO0tBQ2IsQ0FBQztJQUVGLE9BQU87UUFDTCxJQUFJLEVBQUUsTUFBTTtRQUNaLGdCQUFnQixFQUFFLElBQUk7UUFDdEIsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLFFBQVE7WUFDakIsT0FBTyxFQUFFLFFBQVE7U0FDbEI7UUFDRCxPQUFPLEVBQUUsTUFBTTtRQUNmLFFBQVEsRUFBRTtZQUNSLFFBQVE7WUFDUixNQUFNO1lBQ04sV0FBVztZQUNYLElBQUk7WUFDSixtQkFBbUI7WUFDbkIsSUFBSSxDQUFDLFdBQVc7WUFDaEIsTUFBTTtZQUNOLFNBQVM7U0FDVjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogQy9BTFxuQXV0aG9yOiBLZW5uZXRoIEZ1Z2xzYW5nIENocmlzdGVuc2VuIDxrZnVnbHNhbmdAZ21haWwuY29tPlxuRGVzY3JpcHRpb246IFByb3ZpZGVzIGhpZ2hsaWdodGluZyBvZiBNaWNyb3NvZnQgRHluYW1pY3MgTkFWIEMvQUwgY29kZSBmaWxlc1xuV2Vic2l0ZTogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZHluYW1pY3MtbmF2L3Byb2dyYW1taW5nLWluLWMtYWxcbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBjYWwoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IEtFWVdPUkRTID0gW1xuICAgIFwiZGl2XCIsXG4gICAgXCJtb2RcIixcbiAgICBcImluXCIsXG4gICAgXCJhbmRcIixcbiAgICBcIm9yXCIsXG4gICAgXCJub3RcIixcbiAgICBcInhvclwiLFxuICAgIFwiYXNzZXJ0ZXJyb3JcIixcbiAgICBcImJlZ2luXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJkb1wiLFxuICAgIFwiZG93bnRvXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJlbmRcIixcbiAgICBcImV4aXRcIixcbiAgICBcImZvclwiLFxuICAgIFwibG9jYWxcIixcbiAgICBcImlmXCIsXG4gICAgXCJvZlwiLFxuICAgIFwicmVwZWF0XCIsXG4gICAgXCJ0aGVuXCIsXG4gICAgXCJ0b1wiLFxuICAgIFwidW50aWxcIixcbiAgICBcIndoaWxlXCIsXG4gICAgXCJ3aXRoXCIsXG4gICAgXCJ2YXJcIlxuICBdO1xuICBjb25zdCBMSVRFUkFMUyA9ICdmYWxzZSB0cnVlJztcbiAgY29uc3QgQ09NTUVOVF9NT0RFUyA9IFtcbiAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgaGxqcy5DT01NRU5UKFxuICAgICAgL1xcey8sXG4gICAgICAvXFx9LyxcbiAgICAgIHsgcmVsZXZhbmNlOiAwIH1cbiAgICApLFxuICAgIGhsanMuQ09NTUVOVChcbiAgICAgIC9cXChcXCovLFxuICAgICAgL1xcKlxcKS8sXG4gICAgICB7IHJlbGV2YW5jZTogMTAgfVxuICAgIClcbiAgXTtcbiAgY29uc3QgU1RSSU5HID0ge1xuICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgYmVnaW46IC8nLyxcbiAgICBlbmQ6IC8nLyxcbiAgICBjb250YWluczogWyB7IGJlZ2luOiAvJycvIH0gXVxuICB9O1xuICBjb25zdCBDSEFSX1NUUklORyA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvKCNcXGQrKSsvXG4gIH07XG4gIGNvbnN0IERBVEUgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICBiZWdpbjogJ1xcXFxiXFxcXGQrKFxcXFwuXFxcXGQrKT8oRFR8RHxUKScsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGNvbnN0IERCTF9RVU9URURfVkFSSUFCTEUgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJywgLy8gbm90IGEgc3RyaW5nIHRlY2huaWNhbGx5IGJ1dCBtYWtlcyBzZW5zZSB0byBiZSBoaWdobGlnaHRlZCBpbiB0aGUgc2FtZSBzdHlsZVxuICAgIGJlZ2luOiAnXCInLFxuICAgIGVuZDogJ1wiJ1xuICB9O1xuXG4gIGNvbnN0IFBST0NFRFVSRSA9IHtcbiAgICBtYXRjaDogW1xuICAgICAgL3Byb2NlZHVyZS8sXG4gICAgICAvXFxzKy8sXG4gICAgICAvW2EtekEtWl9dW1xcd0BdKi8sXG4gICAgICAvXFxzKi9cbiAgICBdLFxuICAgIHNjb3BlOiB7XG4gICAgICAxOiBcImtleXdvcmRcIixcbiAgICAgIDM6IFwidGl0bGUuZnVuY3Rpb25cIlxuICAgIH0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgYmVnaW46IC9cXCgvLFxuICAgICAgICBlbmQ6IC9cXCkvLFxuICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgU1RSSU5HLFxuICAgICAgICAgIENIQVJfU1RSSU5HLFxuICAgICAgICAgIGhsanMuTlVNQkVSX01PREVcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIC4uLkNPTU1FTlRfTU9ERVNcbiAgICBdXG4gIH07XG5cbiAgY29uc3QgT0JKRUNUX1RZUEVTID0gW1xuICAgIFwiVGFibGVcIixcbiAgICBcIkZvcm1cIixcbiAgICBcIlJlcG9ydFwiLFxuICAgIFwiRGF0YXBvcnRcIixcbiAgICBcIkNvZGV1bml0XCIsXG4gICAgXCJYTUxwb3J0XCIsXG4gICAgXCJNZW51U3VpdGVcIixcbiAgICBcIlBhZ2VcIixcbiAgICBcIlF1ZXJ5XCJcbiAgXTtcbiAgY29uc3QgT0JKRUNUID0ge1xuICAgIG1hdGNoOiBbXG4gICAgICAvT0JKRUNULyxcbiAgICAgIC9cXHMrLyxcbiAgICAgIHJlZ2V4LmVpdGhlciguLi5PQkpFQ1RfVFlQRVMpLFxuICAgICAgL1xccysvLFxuICAgICAgL1xcZCsvLFxuICAgICAgL1xccysoPz1bXlxcc10pLyxcbiAgICAgIC8uKi8sXG4gICAgICAvJC9cbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMyxcbiAgICBzY29wZToge1xuICAgICAgMTogXCJrZXl3b3JkXCIsXG4gICAgICAzOiBcInR5cGVcIixcbiAgICAgIDU6IFwibnVtYmVyXCIsXG4gICAgICA3OiBcInRpdGxlXCJcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgUFJPUEVSVFkgPSB7XG4gICAgbWF0Y2g6IC9bXFx3XSsoPz1cXD0pLyxcbiAgICBzY29wZTogXCJhdHRyaWJ1dGVcIixcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdDL0FMJyxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICBrZXl3b3JkOiBLRVlXT1JEUyxcbiAgICAgIGxpdGVyYWw6IExJVEVSQUxTXG4gICAgfSxcbiAgICBpbGxlZ2FsOiAvXFwvXFwqLyxcbiAgICBjb250YWluczogW1xuICAgICAgUFJPUEVSVFksXG4gICAgICBTVFJJTkcsXG4gICAgICBDSEFSX1NUUklORyxcbiAgICAgIERBVEUsXG4gICAgICBEQkxfUVVPVEVEX1ZBUklBQkxFLFxuICAgICAgaGxqcy5OVU1CRVJfTU9ERSxcbiAgICAgIE9CSkVDVCxcbiAgICAgIFBST0NFRFVSRVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgY2FsIGFzIGRlZmF1bHQgfTtcbiJdfQ==