const KEYWORDS = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
];
const LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
];
const TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
];
const ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
];
const BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
];
const BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
function coffeescript(hljs) {
    const COFFEE_BUILT_INS = [
        'npm',
        'print'
    ];
    const COFFEE_LITERALS = [
        'yes',
        'no',
        'on',
        'off'
    ];
    const COFFEE_KEYWORDS = [
        'then',
        'unless',
        'until',
        'loop',
        'by',
        'when',
        'and',
        'or',
        'is',
        'isnt',
        'not'
    ];
    const NOT_VALID_KEYWORDS = [
        "var",
        "const",
        "let",
        "function",
        "static"
    ];
    const excluding = (list) => (kw) => !list.includes(kw);
    const KEYWORDS$1 = {
        keyword: KEYWORDS.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
        literal: LITERALS.concat(COFFEE_LITERALS),
        built_in: BUILT_INS.concat(COFFEE_BUILT_INS)
    };
    const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
    const SUBST = {
        className: 'subst',
        begin: /#\{/,
        end: /\}/,
        keywords: KEYWORDS$1
    };
    const EXPRESSIONS = [
        hljs.BINARY_NUMBER_MODE,
        hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
                end: '(\\s*/)?',
                relevance: 0
            } }),
        {
            className: 'string',
            variants: [
                {
                    begin: /'''/,
                    end: /'''/,
                    contains: [hljs.BACKSLASH_ESCAPE]
                },
                {
                    begin: /'/,
                    end: /'/,
                    contains: [hljs.BACKSLASH_ESCAPE]
                },
                {
                    begin: /"""/,
                    end: /"""/,
                    contains: [
                        hljs.BACKSLASH_ESCAPE,
                        SUBST
                    ]
                },
                {
                    begin: /"/,
                    end: /"/,
                    contains: [
                        hljs.BACKSLASH_ESCAPE,
                        SUBST
                    ]
                }
            ]
        },
        {
            className: 'regexp',
            variants: [
                {
                    begin: '///',
                    end: '///',
                    contains: [
                        SUBST,
                        hljs.HASH_COMMENT_MODE
                    ]
                },
                {
                    begin: '//[gim]{0,3}(?=\\W)',
                    relevance: 0
                },
                {
                    begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
                }
            ]
        },
        { begin: '@' + JS_IDENT_RE
        },
        {
            subLanguage: 'javascript',
            excludeBegin: true,
            excludeEnd: true,
            variants: [
                {
                    begin: '```',
                    end: '```'
                },
                {
                    begin: '`',
                    end: '`'
                }
            ]
        }
    ];
    SUBST.contains = EXPRESSIONS;
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
    const PARAMS = {
        className: 'params',
        begin: '\\([^\\(]',
        returnBegin: true,
        contains: [
            {
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS$1,
                contains: ['self'].concat(EXPRESSIONS)
            }
        ]
    };
    const CLASS_DEFINITION = {
        variants: [
            { match: [
                    /class\s+/,
                    JS_IDENT_RE,
                    /\s+extends\s+/,
                    JS_IDENT_RE
                ] },
            { match: [
                    /class\s+/,
                    JS_IDENT_RE
                ] }
        ],
        scope: {
            2: "title.class",
            4: "title.class.inherited"
        },
        keywords: KEYWORDS$1
    };
    return {
        name: 'CoffeeScript',
        aliases: [
            'coffee',
            'cson',
            'iced'
        ],
        keywords: KEYWORDS$1,
        illegal: /\/\*/,
        contains: [
            ...EXPRESSIONS,
            hljs.COMMENT('###', '###'),
            hljs.HASH_COMMENT_MODE,
            {
                className: 'function',
                begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
                end: '[-=]>',
                returnBegin: true,
                contains: [
                    TITLE,
                    PARAMS
                ]
            },
            {
                begin: /[:\(,=]\s*/,
                relevance: 0,
                contains: [
                    {
                        className: 'function',
                        begin: POSSIBLE_PARAMS_RE,
                        end: '[-=]>',
                        returnBegin: true,
                        contains: [PARAMS]
                    }
                ]
            },
            CLASS_DEFINITION,
            {
                begin: JS_IDENT_RE + ':',
                end: ':',
                returnBegin: true,
                returnEnd: true,
                relevance: 0
            }
        ]
    };
}
export { coffeescript as default };
//# sourceMappingURL=data:application/json;base64,