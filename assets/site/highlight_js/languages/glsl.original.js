function glsl(hljs) {
    return {
        name: 'GLSL',
        keywords: {
            keyword: 'break continue discard do else for if return while switch case default '
                + 'attribute binding buffer ccw centroid centroid varying coherent column_major const cw '
                + 'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing '
                + 'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant '
                + 'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y '
                + 'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left '
                + 'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '
                + 'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict '
                + 'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 '
                + 'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 '
                + 'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip '
                + 'triangles triangles_adjacency uniform varying vertices volatile writeonly',
            type: 'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 '
                + 'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray '
                + 'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer '
                + 'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray '
                + 'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray '
                + 'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D '
                + 'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 '
                + 'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray '
                + 'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow '
                + 'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D '
                + 'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow '
                + 'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect '
                + 'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray '
                + 'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D '
                + 'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
            built_in: 'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes '
                + 'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms '
                + 'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers '
                + 'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits '
                + 'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize '
                + 'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters '
                + 'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors '
                + 'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers '
                + 'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents '
                + 'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits '
                + 'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents '
                + 'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset '
                + 'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms '
                + 'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits '
                + 'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents '
                + 'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters '
                + 'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents '
                + 'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents '
                + 'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits '
                + 'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors '
                + 'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms '
                + 'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits '
                + 'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset '
                + 'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial '
                + 'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color '
                + 'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord '
                + 'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor '
                + 'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial '
                + 'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel '
                + 'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix '
                + 'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose '
                + 'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose '
                + 'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 '
                + 'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 '
                + 'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ '
                + 'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord '
                + 'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse '
                + 'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask '
                + 'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter '
                + 'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose '
                + 'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out '
                + 'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin '
                + 'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement '
                + 'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier '
                + 'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross '
                + 'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB '
                + 'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan '
                + 'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap '
                + 'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad '
                + 'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset '
                + 'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log '
                + 'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer '
                + 'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 '
                + 'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 '
                + 'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod '
                + 'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh '
                + 'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod '
                + 'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod '
                + 'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod '
                + 'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset '
                + 'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset '
                + 'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod '
                + 'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 '
                + 'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
            literal: 'true false'
        },
        illegal: '"',
        contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.C_NUMBER_MODE,
            {
                className: 'meta',
                begin: '#',
                end: '$'
            }
        ]
    };
}
export { glsl as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xzbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQmVsbEN1YmVEZXYvc2l0ZS10ZXN0aW5nL2RlcGxveW1lbnQvIiwic291cmNlcyI6WyJhc3NldHMvc2l0ZS9oaWdobGlnaHRfanMvbGFuZ3VhZ2VzL2dsc2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsU0FBUyxJQUFJLENBQUMsSUFBSTtJQUNoQixPQUFPO1FBQ0wsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUU7WUFDUixPQUFPLEVBRUwseUVBQXlFO2tCQUV2RSx3RkFBd0Y7a0JBQ3hGLHdGQUF3RjtrQkFDeEYscUZBQXFGO2tCQUNyRix5RkFBeUY7a0JBQ3pGLHlGQUF5RjtrQkFDekYsaUdBQWlHO2tCQUNqRyx1RkFBdUY7a0JBQ3ZGLDBGQUEwRjtrQkFDMUYseUZBQXlGO2tCQUN6RixnR0FBZ0c7a0JBQ2hHLDJFQUEyRTtZQUMvRSxJQUFJLEVBQ0YseUZBQXlGO2tCQUN2Riw4RkFBOEY7a0JBQzlGLHVGQUF1RjtrQkFDdkYsZ0dBQWdHO2tCQUNoRywwRkFBMEY7a0JBQzFGLHNGQUFzRjtrQkFDdEYscUZBQXFGO2tCQUNyRixzRkFBc0Y7a0JBQ3RGLHFGQUFxRjtrQkFDckYsMkZBQTJGO2tCQUMzRixzRkFBc0Y7a0JBQ3RGLHVGQUF1RjtrQkFDdkYsbUZBQW1GO2tCQUNuRixzRkFBc0Y7a0JBQ3RGLG9GQUFvRjtZQUN4RixRQUFRLEVBRU4saUdBQWlHO2tCQUMvRiw4RkFBOEY7a0JBQzlGLCtHQUErRztrQkFDL0csd0ZBQXdGO2tCQUN4Rix3RkFBd0Y7a0JBQ3hGLG9GQUFvRjtrQkFDcEYsdUZBQXVGO2tCQUN2RixrR0FBa0c7a0JBQ2xHLHlGQUF5RjtrQkFDekYsOEZBQThGO2tCQUM5RixzR0FBc0c7a0JBQ3RHLGdHQUFnRztrQkFDaEcsdUdBQXVHO2tCQUN2Ryx3R0FBd0c7a0JBQ3hHLDRFQUE0RTtrQkFDNUUsOEVBQThFO2tCQUM5RSw2R0FBNkc7a0JBQzdHLDhFQUE4RTtrQkFDOUUsMkZBQTJGO2tCQUMzRixzRkFBc0Y7a0JBQ3RGLDRHQUE0RztrQkFDNUcsdUZBQXVGO2tCQUN2RixvR0FBb0c7a0JBRXBHLDRFQUE0RTtrQkFDNUUsNEVBQTRFO2tCQUM1RSx1RkFBdUY7a0JBQ3ZGLG1GQUFtRjtrQkFDbkYsaUZBQWlGO2tCQUNqRixvR0FBb0c7a0JBQ3BHLGlGQUFpRjtrQkFDakYsMkZBQTJGO2tCQUMzRixnSEFBZ0g7a0JBQ2hILDhGQUE4RjtrQkFDOUYsNEZBQTRGO2tCQUM1RiwwRkFBMEY7a0JBQzFGLDRGQUE0RjtrQkFDNUYsMEdBQTBHO2tCQUMxRyw2RkFBNkY7a0JBQzdGLHVHQUF1RztrQkFDdkcsMkdBQTJHO2tCQUMzRyxnSEFBZ0g7a0JBRWhILDBGQUEwRjtrQkFDMUYsMkZBQTJGO2tCQUMzRix1RkFBdUY7a0JBQ3ZGLG9GQUFvRjtrQkFDcEYsd0ZBQXdGO2tCQUN4RixxRkFBcUY7a0JBQ3JGLHdGQUF3RjtrQkFDeEYsMkZBQTJGO2tCQUMzRiw2RkFBNkY7a0JBQzdGLDhGQUE4RjtrQkFDOUYsdUZBQXVGO2tCQUN2RixzRkFBc0Y7a0JBQ3RGLDZGQUE2RjtrQkFDN0YsOEZBQThGO2tCQUM5RiwrRkFBK0Y7a0JBQy9GLDJGQUEyRjtrQkFDM0YsdUZBQXVGO2tCQUN2RixtRkFBbUY7a0JBQ25GLHVGQUF1RjtrQkFDdkYsOEZBQThGO2tCQUM5RiwyRkFBMkY7a0JBQzNGLHNGQUFzRjtrQkFDdEYseUZBQXlGO1lBQzdGLE9BQU8sRUFBRSxZQUFZO1NBQ3RCO1FBQ0QsT0FBTyxFQUFFLEdBQUc7UUFDWixRQUFRLEVBQUU7WUFDUixJQUFJLENBQUMsbUJBQW1CO1lBQ3hCLElBQUksQ0FBQyxvQkFBb0I7WUFDekIsSUFBSSxDQUFDLGFBQWE7WUFDbEI7Z0JBQ0UsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLEtBQUssRUFBRSxHQUFHO2dCQUNWLEdBQUcsRUFBRSxHQUFHO2FBQ1Q7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLElBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogR0xTTFxuRGVzY3JpcHRpb246IE9wZW5HTCBTaGFkaW5nIExhbmd1YWdlXG5BdXRob3I6IFNlcmdleSBUaWtob21pcm92IDxzZXJnZXlAdGlraG9taXJvdi5pbz5cbldlYnNpdGU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09wZW5HTF9TaGFkaW5nX0xhbmd1YWdlXG5DYXRlZ29yeTogZ3JhcGhpY3NcbiovXG5cbmZ1bmN0aW9uIGdsc2woaGxqcykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdHTFNMJyxcbiAgICBrZXl3b3Jkczoge1xuICAgICAga2V5d29yZDpcbiAgICAgICAgLy8gU3RhdGVtZW50c1xuICAgICAgICAnYnJlYWsgY29udGludWUgZGlzY2FyZCBkbyBlbHNlIGZvciBpZiByZXR1cm4gd2hpbGUgc3dpdGNoIGNhc2UgZGVmYXVsdCAnXG4gICAgICAgIC8vIFF1YWxpZmllcnNcbiAgICAgICAgKyAnYXR0cmlidXRlIGJpbmRpbmcgYnVmZmVyIGNjdyBjZW50cm9pZCBjZW50cm9pZCB2YXJ5aW5nIGNvaGVyZW50IGNvbHVtbl9tYWpvciBjb25zdCBjdyAnXG4gICAgICAgICsgJ2RlcHRoX2FueSBkZXB0aF9ncmVhdGVyIGRlcHRoX2xlc3MgZGVwdGhfdW5jaGFuZ2VkIGVhcmx5X2ZyYWdtZW50X3Rlc3RzIGVxdWFsX3NwYWNpbmcgJ1xuICAgICAgICArICdmbGF0IGZyYWN0aW9uYWxfZXZlbl9zcGFjaW5nIGZyYWN0aW9uYWxfb2RkX3NwYWNpbmcgaGlnaHAgaW4gaW5kZXggaW5vdXQgaW52YXJpYW50ICdcbiAgICAgICAgKyAnaW52b2NhdGlvbnMgaXNvbGluZXMgbGF5b3V0IGxpbmVfc3RyaXAgbGluZXMgbGluZXNfYWRqYWNlbmN5IGxvY2FsX3NpemVfeCBsb2NhbF9zaXplX3kgJ1xuICAgICAgICArICdsb2NhbF9zaXplX3ogbG9jYXRpb24gbG93cCBtYXhfdmVydGljZXMgbWVkaXVtcCBub3BlcnNwZWN0aXZlIG9mZnNldCBvcmlnaW5fdXBwZXJfbGVmdCAnXG4gICAgICAgICsgJ291dCBwYWNrZWQgcGF0Y2ggcGl4ZWxfY2VudGVyX2ludGVnZXIgcG9pbnRfbW9kZSBwb2ludHMgcHJlY2lzZSBwcmVjaXNpb24gcXVhZHMgcjExZl9nMTFmX2IxMGYgJ1xuICAgICAgICArICdyMTYgcjE2X3Nub3JtIHIxNmYgcjE2aSByMTZ1aSByMzJmIHIzMmkgcjMydWkgcjggcjhfc25vcm0gcjhpIHI4dWkgcmVhZG9ubHkgcmVzdHJpY3QgJ1xuICAgICAgICArICdyZzE2IHJnMTZfc25vcm0gcmcxNmYgcmcxNmkgcmcxNnVpIHJnMzJmIHJnMzJpIHJnMzJ1aSByZzggcmc4X3Nub3JtIHJnOGkgcmc4dWkgcmdiMTBfYTIgJ1xuICAgICAgICArICdyZ2IxMF9hMnVpIHJnYmExNiByZ2JhMTZfc25vcm0gcmdiYTE2ZiByZ2JhMTZpIHJnYmExNnVpIHJnYmEzMmYgcmdiYTMyaSByZ2JhMzJ1aSByZ2JhOCAnXG4gICAgICAgICsgJ3JnYmE4X3Nub3JtIHJnYmE4aSByZ2JhOHVpIHJvd19tYWpvciBzYW1wbGUgc2hhcmVkIHNtb290aCBzdGQxNDAgc3RkNDMwIHN0cmVhbSB0cmlhbmdsZV9zdHJpcCAnXG4gICAgICAgICsgJ3RyaWFuZ2xlcyB0cmlhbmdsZXNfYWRqYWNlbmN5IHVuaWZvcm0gdmFyeWluZyB2ZXJ0aWNlcyB2b2xhdGlsZSB3cml0ZW9ubHknLFxuICAgICAgdHlwZTpcbiAgICAgICAgJ2F0b21pY191aW50IGJvb2wgYnZlYzIgYnZlYzMgYnZlYzQgZG1hdDIgZG1hdDJ4MiBkbWF0MngzIGRtYXQyeDQgZG1hdDMgZG1hdDN4MiBkbWF0M3gzICdcbiAgICAgICAgKyAnZG1hdDN4NCBkbWF0NCBkbWF0NHgyIGRtYXQ0eDMgZG1hdDR4NCBkb3VibGUgZHZlYzIgZHZlYzMgZHZlYzQgZmxvYXQgaWltYWdlMUQgaWltYWdlMURBcnJheSAnXG4gICAgICAgICsgJ2lpbWFnZTJEIGlpbWFnZTJEQXJyYXkgaWltYWdlMkRNUyBpaW1hZ2UyRE1TQXJyYXkgaWltYWdlMkRSZWN0IGlpbWFnZTNEIGlpbWFnZUJ1ZmZlciAnXG4gICAgICAgICsgJ2lpbWFnZUN1YmUgaWltYWdlQ3ViZUFycmF5IGltYWdlMUQgaW1hZ2UxREFycmF5IGltYWdlMkQgaW1hZ2UyREFycmF5IGltYWdlMkRNUyBpbWFnZTJETVNBcnJheSAnXG4gICAgICAgICsgJ2ltYWdlMkRSZWN0IGltYWdlM0QgaW1hZ2VCdWZmZXIgaW1hZ2VDdWJlIGltYWdlQ3ViZUFycmF5IGludCBpc2FtcGxlcjFEIGlzYW1wbGVyMURBcnJheSAnXG4gICAgICAgICsgJ2lzYW1wbGVyMkQgaXNhbXBsZXIyREFycmF5IGlzYW1wbGVyMkRNUyBpc2FtcGxlcjJETVNBcnJheSBpc2FtcGxlcjJEUmVjdCBpc2FtcGxlcjNEICdcbiAgICAgICAgKyAnaXNhbXBsZXJCdWZmZXIgaXNhbXBsZXJDdWJlIGlzYW1wbGVyQ3ViZUFycmF5IGl2ZWMyIGl2ZWMzIGl2ZWM0IG1hdDIgbWF0MngyIG1hdDJ4MyAnXG4gICAgICAgICsgJ21hdDJ4NCBtYXQzIG1hdDN4MiBtYXQzeDMgbWF0M3g0IG1hdDQgbWF0NHgyIG1hdDR4MyBtYXQ0eDQgc2FtcGxlcjFEIHNhbXBsZXIxREFycmF5ICdcbiAgICAgICAgKyAnc2FtcGxlcjFEQXJyYXlTaGFkb3cgc2FtcGxlcjFEU2hhZG93IHNhbXBsZXIyRCBzYW1wbGVyMkRBcnJheSBzYW1wbGVyMkRBcnJheVNoYWRvdyAnXG4gICAgICAgICsgJ3NhbXBsZXIyRE1TIHNhbXBsZXIyRE1TQXJyYXkgc2FtcGxlcjJEUmVjdCBzYW1wbGVyMkRSZWN0U2hhZG93IHNhbXBsZXIyRFNoYWRvdyBzYW1wbGVyM0QgJ1xuICAgICAgICArICdzYW1wbGVyQnVmZmVyIHNhbXBsZXJDdWJlIHNhbXBsZXJDdWJlQXJyYXkgc2FtcGxlckN1YmVBcnJheVNoYWRvdyBzYW1wbGVyQ3ViZVNoYWRvdyAnXG4gICAgICAgICsgJ2ltYWdlMUQgdWltYWdlMURBcnJheSB1aW1hZ2UyRCB1aW1hZ2UyREFycmF5IHVpbWFnZTJETVMgdWltYWdlMkRNU0FycmF5IHVpbWFnZTJEUmVjdCAnXG4gICAgICAgICsgJ3VpbWFnZTNEIHVpbWFnZUJ1ZmZlciB1aW1hZ2VDdWJlIHVpbWFnZUN1YmVBcnJheSB1aW50IHVzYW1wbGVyMUQgdXNhbXBsZXIxREFycmF5ICdcbiAgICAgICAgKyAndXNhbXBsZXIyRCB1c2FtcGxlcjJEQXJyYXkgdXNhbXBsZXIyRE1TIHVzYW1wbGVyMkRNU0FycmF5IHVzYW1wbGVyMkRSZWN0IHVzYW1wbGVyM0QgJ1xuICAgICAgICArICdzYW1wbGVyQnVmZmVyIHVzYW1wbGVyQ3ViZSB1c2FtcGxlckN1YmVBcnJheSB1dmVjMiB1dmVjMyB1dmVjNCB2ZWMyIHZlYzMgdmVjNCB2b2lkJyxcbiAgICAgIGJ1aWx0X2luOlxuICAgICAgICAvLyBDb25zdGFudHNcbiAgICAgICAgJ2dsX01heEF0b21pY0NvdW50ZXJCaW5kaW5ncyBnbF9NYXhBdG9taWNDb3VudGVyQnVmZmVyU2l6ZSBnbF9NYXhDbGlwRGlzdGFuY2VzIGdsX01heENsaXBQbGFuZXMgJ1xuICAgICAgICArICdnbF9NYXhDb21iaW5lZEF0b21pY0NvdW50ZXJCdWZmZXJzIGdsX01heENvbWJpbmVkQXRvbWljQ291bnRlcnMgZ2xfTWF4Q29tYmluZWRJbWFnZVVuaWZvcm1zICdcbiAgICAgICAgKyAnZ2xfTWF4Q29tYmluZWRJbWFnZVVuaXRzQW5kRnJhZ21lbnRPdXRwdXRzIGdsX01heENvbWJpbmVkVGV4dHVyZUltYWdlVW5pdHMgZ2xfTWF4Q29tcHV0ZUF0b21pY0NvdW50ZXJCdWZmZXJzICdcbiAgICAgICAgKyAnZ2xfTWF4Q29tcHV0ZUF0b21pY0NvdW50ZXJzIGdsX01heENvbXB1dGVJbWFnZVVuaWZvcm1zIGdsX01heENvbXB1dGVUZXh0dXJlSW1hZ2VVbml0cyAnXG4gICAgICAgICsgJ2dsX01heENvbXB1dGVVbmlmb3JtQ29tcG9uZW50cyBnbF9NYXhDb21wdXRlV29ya0dyb3VwQ291bnQgZ2xfTWF4Q29tcHV0ZVdvcmtHcm91cFNpemUgJ1xuICAgICAgICArICdnbF9NYXhEcmF3QnVmZmVycyBnbF9NYXhGcmFnbWVudEF0b21pY0NvdW50ZXJCdWZmZXJzIGdsX01heEZyYWdtZW50QXRvbWljQ291bnRlcnMgJ1xuICAgICAgICArICdnbF9NYXhGcmFnbWVudEltYWdlVW5pZm9ybXMgZ2xfTWF4RnJhZ21lbnRJbnB1dENvbXBvbmVudHMgZ2xfTWF4RnJhZ21lbnRJbnB1dFZlY3RvcnMgJ1xuICAgICAgICArICdnbF9NYXhGcmFnbWVudFVuaWZvcm1Db21wb25lbnRzIGdsX01heEZyYWdtZW50VW5pZm9ybVZlY3RvcnMgZ2xfTWF4R2VvbWV0cnlBdG9taWNDb3VudGVyQnVmZmVycyAnXG4gICAgICAgICsgJ2dsX01heEdlb21ldHJ5QXRvbWljQ291bnRlcnMgZ2xfTWF4R2VvbWV0cnlJbWFnZVVuaWZvcm1zIGdsX01heEdlb21ldHJ5SW5wdXRDb21wb25lbnRzICdcbiAgICAgICAgKyAnZ2xfTWF4R2VvbWV0cnlPdXRwdXRDb21wb25lbnRzIGdsX01heEdlb21ldHJ5T3V0cHV0VmVydGljZXMgZ2xfTWF4R2VvbWV0cnlUZXh0dXJlSW1hZ2VVbml0cyAnXG4gICAgICAgICsgJ2dsX01heEdlb21ldHJ5VG90YWxPdXRwdXRDb21wb25lbnRzIGdsX01heEdlb21ldHJ5VW5pZm9ybUNvbXBvbmVudHMgZ2xfTWF4R2VvbWV0cnlWYXJ5aW5nQ29tcG9uZW50cyAnXG4gICAgICAgICsgJ2dsX01heEltYWdlU2FtcGxlcyBnbF9NYXhJbWFnZVVuaXRzIGdsX01heExpZ2h0cyBnbF9NYXhQYXRjaFZlcnRpY2VzIGdsX01heFByb2dyYW1UZXhlbE9mZnNldCAnXG4gICAgICAgICsgJ2dsX01heFRlc3NDb250cm9sQXRvbWljQ291bnRlckJ1ZmZlcnMgZ2xfTWF4VGVzc0NvbnRyb2xBdG9taWNDb3VudGVycyBnbF9NYXhUZXNzQ29udHJvbEltYWdlVW5pZm9ybXMgJ1xuICAgICAgICArICdnbF9NYXhUZXNzQ29udHJvbElucHV0Q29tcG9uZW50cyBnbF9NYXhUZXNzQ29udHJvbE91dHB1dENvbXBvbmVudHMgZ2xfTWF4VGVzc0NvbnRyb2xUZXh0dXJlSW1hZ2VVbml0cyAnXG4gICAgICAgICsgJ2dsX01heFRlc3NDb250cm9sVG90YWxPdXRwdXRDb21wb25lbnRzIGdsX01heFRlc3NDb250cm9sVW5pZm9ybUNvbXBvbmVudHMgJ1xuICAgICAgICArICdnbF9NYXhUZXNzRXZhbHVhdGlvbkF0b21pY0NvdW50ZXJCdWZmZXJzIGdsX01heFRlc3NFdmFsdWF0aW9uQXRvbWljQ291bnRlcnMgJ1xuICAgICAgICArICdnbF9NYXhUZXNzRXZhbHVhdGlvbkltYWdlVW5pZm9ybXMgZ2xfTWF4VGVzc0V2YWx1YXRpb25JbnB1dENvbXBvbmVudHMgZ2xfTWF4VGVzc0V2YWx1YXRpb25PdXRwdXRDb21wb25lbnRzICdcbiAgICAgICAgKyAnZ2xfTWF4VGVzc0V2YWx1YXRpb25UZXh0dXJlSW1hZ2VVbml0cyBnbF9NYXhUZXNzRXZhbHVhdGlvblVuaWZvcm1Db21wb25lbnRzICdcbiAgICAgICAgKyAnZ2xfTWF4VGVzc0dlbkxldmVsIGdsX01heFRlc3NQYXRjaENvbXBvbmVudHMgZ2xfTWF4VGV4dHVyZUNvb3JkcyBnbF9NYXhUZXh0dXJlSW1hZ2VVbml0cyAnXG4gICAgICAgICsgJ2dsX01heFRleHR1cmVVbml0cyBnbF9NYXhWYXJ5aW5nQ29tcG9uZW50cyBnbF9NYXhWYXJ5aW5nRmxvYXRzIGdsX01heFZhcnlpbmdWZWN0b3JzICdcbiAgICAgICAgKyAnZ2xfTWF4VmVydGV4QXRvbWljQ291bnRlckJ1ZmZlcnMgZ2xfTWF4VmVydGV4QXRvbWljQ291bnRlcnMgZ2xfTWF4VmVydGV4QXR0cmlicyBnbF9NYXhWZXJ0ZXhJbWFnZVVuaWZvcm1zICdcbiAgICAgICAgKyAnZ2xfTWF4VmVydGV4T3V0cHV0Q29tcG9uZW50cyBnbF9NYXhWZXJ0ZXhPdXRwdXRWZWN0b3JzIGdsX01heFZlcnRleFRleHR1cmVJbWFnZVVuaXRzICdcbiAgICAgICAgKyAnZ2xfTWF4VmVydGV4VW5pZm9ybUNvbXBvbmVudHMgZ2xfTWF4VmVydGV4VW5pZm9ybVZlY3RvcnMgZ2xfTWF4Vmlld3BvcnRzIGdsX01pblByb2dyYW1UZXhlbE9mZnNldCAnXG4gICAgICAgIC8vIFZhcmlhYmxlc1xuICAgICAgICArICdnbF9CYWNrQ29sb3IgZ2xfQmFja0xpZ2h0TW9kZWxQcm9kdWN0IGdsX0JhY2tMaWdodFByb2R1Y3QgZ2xfQmFja01hdGVyaWFsICdcbiAgICAgICAgKyAnZ2xfQmFja1NlY29uZGFyeUNvbG9yIGdsX0NsaXBEaXN0YW5jZSBnbF9DbGlwUGxhbmUgZ2xfQ2xpcFZlcnRleCBnbF9Db2xvciAnXG4gICAgICAgICsgJ2dsX0RlcHRoUmFuZ2UgZ2xfRXllUGxhbmVRIGdsX0V5ZVBsYW5lUiBnbF9FeWVQbGFuZVMgZ2xfRXllUGxhbmVUIGdsX0ZvZyBnbF9Gb2dDb29yZCAnXG4gICAgICAgICsgJ2dsX0ZvZ0ZyYWdDb29yZCBnbF9GcmFnQ29sb3IgZ2xfRnJhZ0Nvb3JkIGdsX0ZyYWdEYXRhIGdsX0ZyYWdEZXB0aCBnbF9Gcm9udENvbG9yICdcbiAgICAgICAgKyAnZ2xfRnJvbnRGYWNpbmcgZ2xfRnJvbnRMaWdodE1vZGVsUHJvZHVjdCBnbF9Gcm9udExpZ2h0UHJvZHVjdCBnbF9Gcm9udE1hdGVyaWFsICdcbiAgICAgICAgKyAnZ2xfRnJvbnRTZWNvbmRhcnlDb2xvciBnbF9HbG9iYWxJbnZvY2F0aW9uSUQgZ2xfSW5zdGFuY2VJRCBnbF9JbnZvY2F0aW9uSUQgZ2xfTGF5ZXIgZ2xfTGlnaHRNb2RlbCAnXG4gICAgICAgICsgJ2dsX0xpZ2h0U291cmNlIGdsX0xvY2FsSW52b2NhdGlvbklEIGdsX0xvY2FsSW52b2NhdGlvbkluZGV4IGdsX01vZGVsVmlld01hdHJpeCAnXG4gICAgICAgICsgJ2dsX01vZGVsVmlld01hdHJpeEludmVyc2UgZ2xfTW9kZWxWaWV3TWF0cml4SW52ZXJzZVRyYW5zcG9zZSBnbF9Nb2RlbFZpZXdNYXRyaXhUcmFuc3Bvc2UgJ1xuICAgICAgICArICdnbF9Nb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4IGdsX01vZGVsVmlld1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlIGdsX01vZGVsVmlld1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlVHJhbnNwb3NlICdcbiAgICAgICAgKyAnZ2xfTW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeFRyYW5zcG9zZSBnbF9NdWx0aVRleENvb3JkMCBnbF9NdWx0aVRleENvb3JkMSBnbF9NdWx0aVRleENvb3JkMiAnXG4gICAgICAgICsgJ2dsX011bHRpVGV4Q29vcmQzIGdsX011bHRpVGV4Q29vcmQ0IGdsX011bHRpVGV4Q29vcmQ1IGdsX011bHRpVGV4Q29vcmQ2IGdsX011bHRpVGV4Q29vcmQ3ICdcbiAgICAgICAgKyAnZ2xfTm9ybWFsIGdsX05vcm1hbE1hdHJpeCBnbF9Ob3JtYWxTY2FsZSBnbF9OdW1TYW1wbGVzIGdsX051bVdvcmtHcm91cHMgZ2xfT2JqZWN0UGxhbmVRICdcbiAgICAgICAgKyAnZ2xfT2JqZWN0UGxhbmVSIGdsX09iamVjdFBsYW5lUyBnbF9PYmplY3RQbGFuZVQgZ2xfUGF0Y2hWZXJ0aWNlc0luIGdsX1BvaW50IGdsX1BvaW50Q29vcmQgJ1xuICAgICAgICArICdnbF9Qb2ludFNpemUgZ2xfUG9zaXRpb24gZ2xfUHJpbWl0aXZlSUQgZ2xfUHJpbWl0aXZlSURJbiBnbF9Qcm9qZWN0aW9uTWF0cml4IGdsX1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlICdcbiAgICAgICAgKyAnZ2xfUHJvamVjdGlvbk1hdHJpeEludmVyc2VUcmFuc3Bvc2UgZ2xfUHJvamVjdGlvbk1hdHJpeFRyYW5zcG9zZSBnbF9TYW1wbGVJRCBnbF9TYW1wbGVNYXNrICdcbiAgICAgICAgKyAnZ2xfU2FtcGxlTWFza0luIGdsX1NhbXBsZVBvc2l0aW9uIGdsX1NlY29uZGFyeUNvbG9yIGdsX1Rlc3NDb29yZCBnbF9UZXNzTGV2ZWxJbm5lciBnbF9UZXNzTGV2ZWxPdXRlciAnXG4gICAgICAgICsgJ2dsX1RleENvb3JkIGdsX1RleHR1cmVFbnZDb2xvciBnbF9UZXh0dXJlTWF0cml4IGdsX1RleHR1cmVNYXRyaXhJbnZlcnNlIGdsX1RleHR1cmVNYXRyaXhJbnZlcnNlVHJhbnNwb3NlICdcbiAgICAgICAgKyAnZ2xfVGV4dHVyZU1hdHJpeFRyYW5zcG9zZSBnbF9WZXJ0ZXggZ2xfVmVydGV4SUQgZ2xfVmlld3BvcnRJbmRleCBnbF9Xb3JrR3JvdXBJRCBnbF9Xb3JrR3JvdXBTaXplIGdsX2luIGdsX291dCAnXG4gICAgICAgIC8vIEZ1bmN0aW9uc1xuICAgICAgICArICdFbWl0U3RyZWFtVmVydGV4IEVtaXRWZXJ0ZXggRW5kUHJpbWl0aXZlIEVuZFN0cmVhbVByaW1pdGl2ZSBhYnMgYWNvcyBhY29zaCBhbGwgYW55IGFzaW4gJ1xuICAgICAgICArICdhc2luaCBhdGFuIGF0YW5oIGF0b21pY0FkZCBhdG9taWNBbmQgYXRvbWljQ29tcFN3YXAgYXRvbWljQ291bnRlciBhdG9taWNDb3VudGVyRGVjcmVtZW50ICdcbiAgICAgICAgKyAnYXRvbWljQ291bnRlckluY3JlbWVudCBhdG9taWNFeGNoYW5nZSBhdG9taWNNYXggYXRvbWljTWluIGF0b21pY09yIGF0b21pY1hvciBiYXJyaWVyICdcbiAgICAgICAgKyAnYml0Q291bnQgYml0ZmllbGRFeHRyYWN0IGJpdGZpZWxkSW5zZXJ0IGJpdGZpZWxkUmV2ZXJzZSBjZWlsIGNsYW1wIGNvcyBjb3NoIGNyb3NzICdcbiAgICAgICAgKyAnZEZkeCBkRmR5IGRlZ3JlZXMgZGV0ZXJtaW5hbnQgZGlzdGFuY2UgZG90IGVxdWFsIGV4cCBleHAyIGZhY2Vmb3J3YXJkIGZpbmRMU0IgZmluZE1TQiAnXG4gICAgICAgICsgJ2Zsb2F0Qml0c1RvSW50IGZsb2F0Qml0c1RvVWludCBmbG9vciBmbWEgZnJhY3QgZnJleHAgZnRyYW5zZm9ybSBmd2lkdGggZ3JlYXRlclRoYW4gJ1xuICAgICAgICArICdncmVhdGVyVGhhbkVxdWFsIGdyb3VwTWVtb3J5QmFycmllciBpbWFnZUF0b21pY0FkZCBpbWFnZUF0b21pY0FuZCBpbWFnZUF0b21pY0NvbXBTd2FwICdcbiAgICAgICAgKyAnaW1hZ2VBdG9taWNFeGNoYW5nZSBpbWFnZUF0b21pY01heCBpbWFnZUF0b21pY01pbiBpbWFnZUF0b21pY09yIGltYWdlQXRvbWljWG9yIGltYWdlTG9hZCAnXG4gICAgICAgICsgJ2ltYWdlU2l6ZSBpbWFnZVN0b3JlIGltdWxFeHRlbmRlZCBpbnRCaXRzVG9GbG9hdCBpbnRlcnBvbGF0ZUF0Q2VudHJvaWQgaW50ZXJwb2xhdGVBdE9mZnNldCAnXG4gICAgICAgICsgJ2ludGVycG9sYXRlQXRTYW1wbGUgaW52ZXJzZSBpbnZlcnNlc3FydCBpc2luZiBpc25hbiBsZGV4cCBsZW5ndGggbGVzc1RoYW4gbGVzc1RoYW5FcXVhbCBsb2cgJ1xuICAgICAgICArICdsb2cyIG1hdHJpeENvbXBNdWx0IG1heCBtZW1vcnlCYXJyaWVyIG1lbW9yeUJhcnJpZXJBdG9taWNDb3VudGVyIG1lbW9yeUJhcnJpZXJCdWZmZXIgJ1xuICAgICAgICArICdtZW1vcnlCYXJyaWVySW1hZ2UgbWVtb3J5QmFycmllclNoYXJlZCBtaW4gbWl4IG1vZCBtb2RmIG5vaXNlMSBub2lzZTIgbm9pc2UzIG5vaXNlNCAnXG4gICAgICAgICsgJ25vcm1hbGl6ZSBub3Qgbm90RXF1YWwgb3V0ZXJQcm9kdWN0IHBhY2tEb3VibGUyeDMyIHBhY2tIYWxmMngxNiBwYWNrU25vcm0yeDE2IHBhY2tTbm9ybTR4OCAnXG4gICAgICAgICsgJ3BhY2tVbm9ybTJ4MTYgcGFja1Vub3JtNHg4IHBvdyByYWRpYW5zIHJlZmxlY3QgcmVmcmFjdCByb3VuZCByb3VuZEV2ZW4gc2hhZG93MUQgc2hhZG93MURMb2QgJ1xuICAgICAgICArICdzaGFkb3cxRFByb2ogc2hhZG93MURQcm9qTG9kIHNoYWRvdzJEIHNoYWRvdzJETG9kIHNoYWRvdzJEUHJvaiBzaGFkb3cyRFByb2pMb2Qgc2lnbiBzaW4gc2luaCAnXG4gICAgICAgICsgJ3Ntb290aHN0ZXAgc3FydCBzdGVwIHRhbiB0YW5oIHRleGVsRmV0Y2ggdGV4ZWxGZXRjaE9mZnNldCB0ZXh0dXJlIHRleHR1cmUxRCB0ZXh0dXJlMURMb2QgJ1xuICAgICAgICArICd0ZXh0dXJlMURQcm9qIHRleHR1cmUxRFByb2pMb2QgdGV4dHVyZTJEIHRleHR1cmUyRExvZCB0ZXh0dXJlMkRQcm9qIHRleHR1cmUyRFByb2pMb2QgJ1xuICAgICAgICArICd0ZXh0dXJlM0QgdGV4dHVyZTNETG9kIHRleHR1cmUzRFByb2ogdGV4dHVyZTNEUHJvakxvZCB0ZXh0dXJlQ3ViZSB0ZXh0dXJlQ3ViZUxvZCAnXG4gICAgICAgICsgJ3RleHR1cmVHYXRoZXIgdGV4dHVyZUdhdGhlck9mZnNldCB0ZXh0dXJlR2F0aGVyT2Zmc2V0cyB0ZXh0dXJlR3JhZCB0ZXh0dXJlR3JhZE9mZnNldCAnXG4gICAgICAgICsgJ3RleHR1cmVMb2QgdGV4dHVyZUxvZE9mZnNldCB0ZXh0dXJlT2Zmc2V0IHRleHR1cmVQcm9qIHRleHR1cmVQcm9qR3JhZCB0ZXh0dXJlUHJvakdyYWRPZmZzZXQgJ1xuICAgICAgICArICd0ZXh0dXJlUHJvakxvZCB0ZXh0dXJlUHJvakxvZE9mZnNldCB0ZXh0dXJlUHJvak9mZnNldCB0ZXh0dXJlUXVlcnlMZXZlbHMgdGV4dHVyZVF1ZXJ5TG9kICdcbiAgICAgICAgKyAndGV4dHVyZVNpemUgdHJhbnNwb3NlIHRydW5jIHVhZGRDYXJyeSB1aW50Qml0c1RvRmxvYXQgdW11bEV4dGVuZGVkIHVucGFja0RvdWJsZTJ4MzIgJ1xuICAgICAgICArICd1bnBhY2tIYWxmMngxNiB1bnBhY2tTbm9ybTJ4MTYgdW5wYWNrU25vcm00eDggdW5wYWNrVW5vcm0yeDE2IHVucGFja1Vub3JtNHg4IHVzdWJCb3Jyb3cnLFxuICAgICAgbGl0ZXJhbDogJ3RydWUgZmFsc2UnXG4gICAgfSxcbiAgICBpbGxlZ2FsOiAnXCInLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX05VTUJFUl9NT0RFLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICAgICAgYmVnaW46ICcjJyxcbiAgICAgICAgZW5kOiAnJCdcbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IGdsc2wgYXMgZGVmYXVsdCB9O1xuIl19