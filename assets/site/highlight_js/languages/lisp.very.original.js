function lisp(hljs) {
    const LISP_IDENT_RE = '[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*';
    const MEC_RE = '\\|[^]*?\\|';
    const LISP_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?';
    const LITERAL = {
        className: 'literal',
        begin: '\\b(t{1}|nil)\\b'
    };
    const NUMBER = {
        className: 'number',
        variants: [
            {
                begin: LISP_SIMPLE_NUMBER_RE,
                relevance: 0
            },
            { begin: '#(b|B)[0-1]+(/[0-1]+)?' },
            { begin: '#(o|O)[0-7]+(/[0-7]+)?' },
            { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },
            {
                begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,
                end: '\\)'
            }
        ]
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMENT = hljs.COMMENT(';', '$', { relevance: 0 });
    const VARIABLE = {
        begin: '\\*',
        end: '\\*'
    };
    const KEYWORD = {
        className: 'symbol',
        begin: '[:&]' + LISP_IDENT_RE
    };
    const IDENT = {
        begin: LISP_IDENT_RE,
        relevance: 0
    };
    const MEC = { begin: MEC_RE };
    const QUOTED_LIST = {
        begin: '\\(',
        end: '\\)',
        contains: [
            'self',
            LITERAL,
            STRING,
            NUMBER,
            IDENT
        ]
    };
    const QUOTED = {
        contains: [
            NUMBER,
            STRING,
            VARIABLE,
            KEYWORD,
            QUOTED_LIST,
            IDENT
        ],
        variants: [
            {
                begin: '[\'`]\\(',
                end: '\\)'
            },
            {
                begin: '\\(quote ',
                end: '\\)',
                keywords: { name: 'quote' }
            },
            { begin: '\'' + MEC_RE }
        ]
    };
    const QUOTED_ATOM = { variants: [
            { begin: '\'' + LISP_IDENT_RE },
            { begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }
        ] };
    const LIST = {
        begin: '\\(\\s*',
        end: '\\)'
    };
    const BODY = {
        endsWithParent: true,
        relevance: 0
    };
    LIST.contains = [
        {
            className: 'name',
            variants: [
                {
                    begin: LISP_IDENT_RE,
                    relevance: 0,
                },
                { begin: MEC_RE }
            ]
        },
        BODY
    ];
    BODY.contains = [
        QUOTED,
        QUOTED_ATOM,
        LIST,
        LITERAL,
        NUMBER,
        STRING,
        COMMENT,
        VARIABLE,
        KEYWORD,
        MEC,
        IDENT
    ];
    return {
        name: 'Lisp',
        illegal: /\S/,
        contains: [
            NUMBER,
            hljs.SHEBANG(),
            LITERAL,
            STRING,
            COMMENT,
            QUOTED,
            QUOTED_ATOM,
            LIST,
            IDENT
        ]
    };
}
export { lisp as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzcC5qcyIsInNvdXJjZVJvb3QiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQmVsbEN1YmVEZXYvc2l0ZS10ZXN0aW5nL2RlcGxveW1lbnQvIiwic291cmNlcyI6WyJhc3NldHMvc2l0ZS9oaWdobGlnaHRfanMvbGFuZ3VhZ2VzL2xpc3AuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsU0FBUyxJQUFJLENBQUMsSUFBSTtJQUNoQixNQUFNLGFBQWEsR0FBRyxxREFBcUQsQ0FBQztJQUM1RSxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUM7SUFDN0IsTUFBTSxxQkFBcUIsR0FBRyxvRUFBb0UsQ0FBQztJQUNuRyxNQUFNLE9BQU8sR0FBRztRQUNkLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLEtBQUssRUFBRSxrQkFBa0I7S0FDMUIsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLFFBQVE7UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsS0FBSyxFQUFFLHFCQUFxQjtnQkFDNUIsU0FBUyxFQUFFLENBQUM7YUFDYjtZQUNELEVBQUUsS0FBSyxFQUFFLHdCQUF3QixFQUFFO1lBQ25DLEVBQUUsS0FBSyxFQUFFLHdCQUF3QixFQUFFO1lBQ25DLEVBQUUsS0FBSyxFQUFFLG9DQUFvQyxFQUFFO1lBQy9DO2dCQUNFLEtBQUssRUFBRSxXQUFXLEdBQUcscUJBQXFCLEdBQUcsSUFBSSxHQUFHLHFCQUFxQjtnQkFDekUsR0FBRyxFQUFFLEtBQUs7YUFDWDtTQUNGO0tBQ0YsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDMUIsR0FBRyxFQUFFLEdBQUcsRUFDUixFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FDakIsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsS0FBSyxFQUFFLEtBQUs7UUFDWixHQUFHLEVBQUUsS0FBSztLQUNYLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRztRQUNkLFNBQVMsRUFBRSxRQUFRO1FBQ25CLEtBQUssRUFBRSxNQUFNLEdBQUcsYUFBYTtLQUM5QixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUc7UUFDWixLQUFLLEVBQUUsYUFBYTtRQUNwQixTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUM5QixNQUFNLFdBQVcsR0FBRztRQUNsQixLQUFLLEVBQUUsS0FBSztRQUNaLEdBQUcsRUFBRSxLQUFLO1FBQ1YsUUFBUSxFQUFFO1lBQ1IsTUFBTTtZQUNOLE9BQU87WUFDUCxNQUFNO1lBQ04sTUFBTTtZQUNOLEtBQUs7U0FDTjtLQUNGLENBQUM7SUFDRixNQUFNLE1BQU0sR0FBRztRQUNiLFFBQVEsRUFBRTtZQUNSLE1BQU07WUFDTixNQUFNO1lBQ04sUUFBUTtZQUNSLE9BQU87WUFDUCxXQUFXO1lBQ1gsS0FBSztTQUNOO1FBQ0QsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLEdBQUcsRUFBRSxLQUFLO2FBQ1g7WUFDRDtnQkFDRSxLQUFLLEVBQUUsV0FBVztnQkFDbEIsR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTthQUM1QjtZQUNELEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxNQUFNLEVBQUU7U0FDekI7S0FDRixDQUFDO0lBQ0YsTUFBTSxXQUFXLEdBQUcsRUFBRSxRQUFRLEVBQUU7WUFDOUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLGFBQWEsRUFBRTtZQUMvQixFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsYUFBYSxHQUFHLEtBQUssR0FBRyxhQUFhLEdBQUcsSUFBSSxFQUFFO1NBQ2hFLEVBQUUsQ0FBQztJQUNKLE1BQU0sSUFBSSxHQUFHO1FBQ1gsS0FBSyxFQUFFLFNBQVM7UUFDaEIsR0FBRyxFQUFFLEtBQUs7S0FDWCxDQUFDO0lBQ0YsTUFBTSxJQUFJLEdBQUc7UUFDWCxjQUFjLEVBQUUsSUFBSTtRQUNwQixTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFDRixJQUFJLENBQUMsUUFBUSxHQUFHO1FBQ2Q7WUFDRSxTQUFTLEVBQUUsTUFBTTtZQUNqQixRQUFRLEVBQUU7Z0JBQ1I7b0JBQ0UsS0FBSyxFQUFFLGFBQWE7b0JBQ3BCLFNBQVMsRUFBRSxDQUFDO2lCQUNiO2dCQUNELEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTthQUNsQjtTQUNGO1FBQ0QsSUFBSTtLQUNMLENBQUM7SUFDRixJQUFJLENBQUMsUUFBUSxHQUFHO1FBQ2QsTUFBTTtRQUNOLFdBQVc7UUFDWCxJQUFJO1FBQ0osT0FBTztRQUNQLE1BQU07UUFDTixNQUFNO1FBQ04sT0FBTztRQUNQLFFBQVE7UUFDUixPQUFPO1FBQ1AsR0FBRztRQUNILEtBQUs7S0FDTixDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxNQUFNO1FBQ1osT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUU7WUFDUixNQUFNO1lBQ04sSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLE9BQU87WUFDUCxNQUFNO1lBQ04sT0FBTztZQUNQLE1BQU07WUFDTixXQUFXO1lBQ1gsSUFBSTtZQUNKLEtBQUs7U0FDTjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLElBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogTGlzcFxuRGVzY3JpcHRpb246IEdlbmVyaWMgbGlzcCBzeW50YXhcbkF1dGhvcjogVmFzaWx5IFBvbG92bnlvdiA8dmFzdEB3aGl0ZWFudHMubmV0PlxuQ2F0ZWdvcnk6IGxpc3BcbiovXG5cbmZ1bmN0aW9uIGxpc3AoaGxqcykge1xuICBjb25zdCBMSVNQX0lERU5UX1JFID0gJ1thLXpBLVpfXFxcXC0rXFxcXCpcXFxcLzw9PiYjXVthLXpBLVowLTlfXFxcXC0rKlxcXFwvPD0+JiMhXSonO1xuICBjb25zdCBNRUNfUkUgPSAnXFxcXHxbXl0qP1xcXFx8JztcbiAgY29uc3QgTElTUF9TSU1QTEVfTlVNQkVSX1JFID0gJygtfFxcXFwrKT9cXFxcZCsoXFxcXC5cXFxcZCt8XFxcXC9cXFxcZCspPygoZHxlfGZ8bHxzfER8RXxGfEx8UykoXFxcXCt8LSk/XFxcXGQrKT8nO1xuICBjb25zdCBMSVRFUkFMID0ge1xuICAgIGNsYXNzTmFtZTogJ2xpdGVyYWwnLFxuICAgIGJlZ2luOiAnXFxcXGIodHsxfXxuaWwpXFxcXGInXG4gIH07XG4gIGNvbnN0IE5VTUJFUiA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBMSVNQX1NJTVBMRV9OVU1CRVJfUkUsXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHsgYmVnaW46ICcjKGJ8QilbMC0xXSsoL1swLTFdKyk/JyB9LFxuICAgICAgeyBiZWdpbjogJyMob3xPKVswLTddKygvWzAtN10rKT8nIH0sXG4gICAgICB7IGJlZ2luOiAnIyh4fFgpWzAtOWEtZkEtRl0rKC9bMC05YS1mQS1GXSspPycgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICcjKGN8QylcXFxcKCcgKyBMSVNQX1NJTVBMRV9OVU1CRVJfUkUgKyAnICsnICsgTElTUF9TSU1QTEVfTlVNQkVSX1JFLFxuICAgICAgICBlbmQ6ICdcXFxcKSdcbiAgICAgIH1cbiAgICBdXG4gIH07XG4gIGNvbnN0IFNUUklORyA9IGhsanMuaW5oZXJpdChobGpzLlFVT1RFX1NUUklOR19NT0RFLCB7IGlsbGVnYWw6IG51bGwgfSk7XG4gIGNvbnN0IENPTU1FTlQgPSBobGpzLkNPTU1FTlQoXG4gICAgJzsnLCAnJCcsXG4gICAgeyByZWxldmFuY2U6IDAgfVxuICApO1xuICBjb25zdCBWQVJJQUJMRSA9IHtcbiAgICBiZWdpbjogJ1xcXFwqJyxcbiAgICBlbmQ6ICdcXFxcKidcbiAgfTtcbiAgY29uc3QgS0VZV09SRCA9IHtcbiAgICBjbGFzc05hbWU6ICdzeW1ib2wnLFxuICAgIGJlZ2luOiAnWzomXScgKyBMSVNQX0lERU5UX1JFXG4gIH07XG4gIGNvbnN0IElERU5UID0ge1xuICAgIGJlZ2luOiBMSVNQX0lERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBjb25zdCBNRUMgPSB7IGJlZ2luOiBNRUNfUkUgfTtcbiAgY29uc3QgUVVPVEVEX0xJU1QgPSB7XG4gICAgYmVnaW46ICdcXFxcKCcsXG4gICAgZW5kOiAnXFxcXCknLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICAnc2VsZicsXG4gICAgICBMSVRFUkFMLFxuICAgICAgU1RSSU5HLFxuICAgICAgTlVNQkVSLFxuICAgICAgSURFTlRcbiAgICBdXG4gIH07XG4gIGNvbnN0IFFVT1RFRCA9IHtcbiAgICBjb250YWluczogW1xuICAgICAgTlVNQkVSLFxuICAgICAgU1RSSU5HLFxuICAgICAgVkFSSUFCTEUsXG4gICAgICBLRVlXT1JELFxuICAgICAgUVVPVEVEX0xJU1QsXG4gICAgICBJREVOVFxuICAgIF0sXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdbXFwnYF1cXFxcKCcsXG4gICAgICAgIGVuZDogJ1xcXFwpJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdcXFxcKHF1b3RlICcsXG4gICAgICAgIGVuZDogJ1xcXFwpJyxcbiAgICAgICAga2V5d29yZHM6IHsgbmFtZTogJ3F1b3RlJyB9XG4gICAgICB9LFxuICAgICAgeyBiZWdpbjogJ1xcJycgKyBNRUNfUkUgfVxuICAgIF1cbiAgfTtcbiAgY29uc3QgUVVPVEVEX0FUT00gPSB7IHZhcmlhbnRzOiBbXG4gICAgeyBiZWdpbjogJ1xcJycgKyBMSVNQX0lERU5UX1JFIH0sXG4gICAgeyBiZWdpbjogJyNcXCcnICsgTElTUF9JREVOVF9SRSArICcoOjonICsgTElTUF9JREVOVF9SRSArICcpKicgfVxuICBdIH07XG4gIGNvbnN0IExJU1QgPSB7XG4gICAgYmVnaW46ICdcXFxcKFxcXFxzKicsXG4gICAgZW5kOiAnXFxcXCknXG4gIH07XG4gIGNvbnN0IEJPRFkgPSB7XG4gICAgZW5kc1dpdGhQYXJlbnQ6IHRydWUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIExJU1QuY29udGFpbnMgPSBbXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiAnbmFtZScsXG4gICAgICB2YXJpYW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46IExJU1BfSURFTlRfUkUsXG4gICAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICB9LFxuICAgICAgICB7IGJlZ2luOiBNRUNfUkUgfVxuICAgICAgXVxuICAgIH0sXG4gICAgQk9EWVxuICBdO1xuICBCT0RZLmNvbnRhaW5zID0gW1xuICAgIFFVT1RFRCxcbiAgICBRVU9URURfQVRPTSxcbiAgICBMSVNULFxuICAgIExJVEVSQUwsXG4gICAgTlVNQkVSLFxuICAgIFNUUklORyxcbiAgICBDT01NRU5ULFxuICAgIFZBUklBQkxFLFxuICAgIEtFWVdPUkQsXG4gICAgTUVDLFxuICAgIElERU5UXG4gIF07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTGlzcCcsXG4gICAgaWxsZWdhbDogL1xcUy8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIE5VTUJFUixcbiAgICAgIGhsanMuU0hFQkFORygpLFxuICAgICAgTElURVJBTCxcbiAgICAgIFNUUklORyxcbiAgICAgIENPTU1FTlQsXG4gICAgICBRVU9URUQsXG4gICAgICBRVU9URURfQVRPTSxcbiAgICAgIExJU1QsXG4gICAgICBJREVOVFxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgbGlzcCBhcyBkZWZhdWx0IH07XG4iXX0=