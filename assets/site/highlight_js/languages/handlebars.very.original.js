function handlebars(hljs) {
    const regex = hljs.regex;
    const BUILT_INS = {
        $pattern: /[\w.\/]+/,
        built_in: [
            'action',
            'bindattr',
            'collection',
            'component',
            'concat',
            'debugger',
            'each',
            'each-in',
            'get',
            'hash',
            'if',
            'in',
            'input',
            'link-to',
            'loc',
            'log',
            'lookup',
            'mut',
            'outlet',
            'partial',
            'query-params',
            'render',
            'template',
            'textarea',
            'unbound',
            'unless',
            'view',
            'with',
            'yield'
        ]
    };
    const LITERALS = {
        $pattern: /[\w.\/]+/,
        literal: [
            'true',
            'false',
            'undefined',
            'null'
        ]
    };
    const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
    const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
    const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
    const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
    const PATH_DELIMITER_REGEX = /(\.|\/)/;
    const ANY_ID = regex.either(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);
    const IDENTIFIER_REGEX = regex.concat(regex.optional(/\.|\.\/|\//), ANY_ID, regex.anyNumberOfTimes(regex.concat(PATH_DELIMITER_REGEX, ANY_ID)));
    const HASH_PARAM_REGEX = regex.concat('(', BRACKET_QUOTED_ID_REGEX, '|', PLAIN_ID_REGEX, ')(?==)');
    const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };
    const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS });
    const SUB_EXPRESSION = {
        begin: /\(/,
        end: /\)/
    };
    const HASH = {
        className: 'attr',
        begin: HASH_PARAM_REGEX,
        relevance: 0,
        starts: {
            begin: /=/,
            end: /=/,
            starts: { contains: [
                    hljs.NUMBER_MODE,
                    hljs.QUOTE_STRING_MODE,
                    hljs.APOS_STRING_MODE,
                    HELPER_PARAMETER,
                    SUB_EXPRESSION
                ] }
        }
    };
    const BLOCK_PARAMS = {
        begin: /as\s+\|/,
        keywords: { keyword: 'as' },
        end: /\|/,
        contains: [
            {
                begin: /\w+/
            }
        ]
    };
    const HELPER_PARAMETERS = {
        contains: [
            hljs.NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            BLOCK_PARAMS,
            HASH,
            HELPER_PARAMETER,
            SUB_EXPRESSION
        ],
        returnEnd: true
    };
    const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
        className: 'name',
        keywords: BUILT_INS,
        starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
    });
    SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];
    const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
        keywords: BUILT_INS,
        className: 'name',
        starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
        keywords: BUILT_INS,
        className: 'name'
    });
    const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
        className: 'name',
        keywords: BUILT_INS,
        starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
        begin: /\\\{\{/,
        skip: true
    };
    const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
        begin: /\\\\(?=\{\{)/,
        skip: true
    };
    return {
        name: 'Handlebars',
        aliases: [
            'hbs',
            'html.hbs',
            'html.handlebars',
            'htmlbars'
        ],
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
            ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
            PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
            hljs.COMMENT(/\{\{!--/, /--\}\}/),
            hljs.COMMENT(/\{\{!/, /\}\}/),
            {
                className: 'template-tag',
                begin: /\{\{\{\{(?!\/)/,
                end: /\}\}\}\}/,
                contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],
                starts: {
                    end: /\{\{\{\{\//,
                    returnEnd: true,
                    subLanguage: 'xml'
                }
            },
            {
                className: 'template-tag',
                begin: /\{\{\{\{\//,
                end: /\}\}\}\}/,
                contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
            },
            {
                className: 'template-tag',
                begin: /\{\{#/,
                end: /\}\}/,
                contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]
            },
            {
                className: 'template-tag',
                begin: /\{\{(?=else\}\})/,
                end: /\}\}/,
                keywords: 'else'
            },
            {
                className: 'template-tag',
                begin: /\{\{(?=else if)/,
                end: /\}\}/,
                keywords: 'else if'
            },
            {
                className: 'template-tag',
                begin: /\{\{\//,
                end: /\}\}/,
                contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
            },
            {
                className: 'template-variable',
                begin: /\{\{\{/,
                end: /\}\}\}/,
                contains: [BASIC_MUSTACHE_CONTENTS]
            },
            {
                className: 'template-variable',
                begin: /\{\{/,
                end: /\}\}/,
                contains: [BASIC_MUSTACHE_CONTENTS]
            }
        ]
    };
}
export { handlebars as default };
//# sourceMappingURL=data:application/json;base64,