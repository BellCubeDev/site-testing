function purebasic(hljs) {
    const STRINGS = {
        className: 'string',
        begin: '(~)?"',
        end: '"',
        illegal: '\\n'
    };
    const CONSTANTS = {
        className: 'symbol',
        begin: '#[a-zA-Z_]\\w*\\$?'
    };
    return {
        name: 'PureBASIC',
        aliases: [
            'pb',
            'pbi'
        ],
        keywords: 'Align And Array As Break CallDebugger Case CompilerCase CompilerDefault '
            + 'CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError '
            + 'CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug '
            + 'DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default '
            + 'Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM '
            + 'EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration '
            + 'EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect '
            + 'EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends '
            + 'FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC '
            + 'IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount '
            + 'Map Module NewList NewMap Next Not Or Procedure ProcedureC '
            + 'ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim '
            + 'Read Repeat Restore Return Runtime Select Shared Static Step Structure '
            + 'StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule '
            + 'UseModule Wend While With XIncludeFile XOr',
        contains: [
            hljs.COMMENT(';', '$', { relevance: 0 }),
            {
                className: 'function',
                begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
                end: '\\(',
                excludeEnd: true,
                returnBegin: true,
                contains: [
                    {
                        className: 'keyword',
                        begin: '(Procedure|Declare)(C|CDLL|DLL)?',
                        excludeEnd: true
                    },
                    {
                        className: 'type',
                        begin: '\\.\\w*'
                    },
                    hljs.UNDERSCORE_TITLE_MODE
                ]
            },
            STRINGS,
            CONSTANTS
        ]
    };
}
export { purebasic as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZWJhc2ljLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvcHVyZWJhc2ljLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDckIsTUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTLEVBQUUsUUFBUTtRQUNuQixLQUFLLEVBQUUsT0FBTztRQUNkLEdBQUcsRUFBRSxHQUFHO1FBQ1IsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDO0lBQ0YsTUFBTSxTQUFTLEdBQUc7UUFFaEIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsS0FBSyxFQUFFLG9CQUFvQjtLQUM1QixDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxXQUFXO1FBQ2pCLE9BQU8sRUFBRTtZQUNQLElBQUk7WUFDSixLQUFLO1NBQ047UUFDRCxRQUFRLEVBRU4sMEVBQTBFO2NBQ3hFLDRFQUE0RTtjQUM1RSw0RUFBNEU7Y0FDNUUsMkVBQTJFO2NBQzNFLDhFQUE4RTtjQUM5RSxtRkFBbUY7Y0FDbkYseUVBQXlFO2NBQ3pFLCtFQUErRTtjQUMvRSxxRUFBcUU7Y0FDckUsZ0ZBQWdGO2NBQ2hGLDZEQUE2RDtjQUM3RCxrRkFBa0Y7Y0FDbEYseUVBQXlFO2NBQ3pFLHlFQUF5RTtjQUN6RSw0Q0FBNEM7UUFDaEQsUUFBUSxFQUFFO1lBRVIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBRXhDO2dCQUNFLFNBQVMsRUFBRSxVQUFVO2dCQUNyQixLQUFLLEVBQUUsd0NBQXdDO2dCQUMvQyxHQUFHLEVBQUUsS0FBSztnQkFDVixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLFFBQVEsRUFBRTtvQkFDUjt3QkFDRSxTQUFTLEVBQUUsU0FBUzt3QkFDcEIsS0FBSyxFQUFFLGtDQUFrQzt3QkFDekMsVUFBVSxFQUFFLElBQUk7cUJBQ2pCO29CQUNEO3dCQUNFLFNBQVMsRUFBRSxNQUFNO3dCQUNqQixLQUFLLEVBQUUsU0FBUztxQkFFakI7b0JBQ0QsSUFBSSxDQUFDLHFCQUFxQjtpQkFDM0I7YUFDRjtZQUNELE9BQU87WUFDUCxTQUFTO1NBQ1Y7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXdCRCxPQUFPLEVBQUUsU0FBUyxJQUFJLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBQdXJlQkFTSUNcbkF1dGhvcjogVHJpc3Rhbm8gQWptb25lIDx0YWptb25lQGdtYWlsLmNvbT5cbkRlc2NyaXB0aW9uOiBTeW50YXggaGlnaGxpZ2h0aW5nIGZvciBQdXJlQkFTSUMgKHYuNS4wMC01LjYwKS4gTm8gaW5saW5lIEFTTSBoaWdobGlnaHRpbmcuICh2LjEuMiwgTWF5IDIwMTcpXG5DcmVkaXRzOiBJJ3ZlIHRha2VuIGluc3BpcmF0aW9uIGZyb20gdGhlIFB1cmVCYXNpYyBsYW5ndWFnZSBmaWxlIGZvciBHZVNIaSwgY3JlYXRlZCBieSBHdXN0YXZvIEp1bGlvIEZpb3JlbnphIChHdVNoSCkuXG5XZWJzaXRlOiBodHRwczovL3d3dy5wdXJlYmFzaWMuY29tXG4qL1xuXG4vLyBCYXNlIGRlYWZ1bHQgY29sb3JzIGluIFBCIElERTogYmFja2dyb3VuZDogI0ZGRkZERjsgZm9yZWdyb3VuZDogIzAwMDAwMDtcblxuZnVuY3Rpb24gcHVyZWJhc2ljKGhsanMpIHtcbiAgY29uc3QgU1RSSU5HUyA9IHsgLy8gUEIgSURFIGNvbG9yOiAjMDA4MEZGIChBenVyZSBSYWRpYW5jZSlcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAnKH4pP1wiJyxcbiAgICBlbmQ6ICdcIicsXG4gICAgaWxsZWdhbDogJ1xcXFxuJ1xuICB9O1xuICBjb25zdCBDT05TVEFOVFMgPSB7IC8vIFBCIElERSBjb2xvcjogIzkyNEI3MiAoQ2Fubm9uIFBpbmspXG4gICAgLy8gIFwiI1wiICsgYSBsZXR0ZXIgb3IgdW5kZXJzY29yZSArIGxldHRlcnMsIGRpZ2l0cyBvciB1bmRlcnNjb3JlcyArIChvcHRpb25hbCkgXCIkXCJcbiAgICBjbGFzc05hbWU6ICdzeW1ib2wnLFxuICAgIGJlZ2luOiAnI1thLXpBLVpfXVxcXFx3KlxcXFwkPydcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdQdXJlQkFTSUMnLFxuICAgIGFsaWFzZXM6IFtcbiAgICAgICdwYicsXG4gICAgICAncGJpJ1xuICAgIF0sXG4gICAga2V5d29yZHM6IC8vIFBCIElERSBjb2xvcjogIzAwNjY2NiAoQmx1ZSBTdG9uZSkgKyBCb2xkXG4gICAgICAvLyBLZXl3b3JkcyBmcm9tIGFsbCB2ZXJzaW9uIG9mIFB1cmVCQVNJQyA1LjAwIHVwd2FyZCAuLi5cbiAgICAgICdBbGlnbiBBbmQgQXJyYXkgQXMgQnJlYWsgQ2FsbERlYnVnZ2VyIENhc2UgQ29tcGlsZXJDYXNlIENvbXBpbGVyRGVmYXVsdCAnXG4gICAgICArICdDb21waWxlckVsc2UgQ29tcGlsZXJFbHNlSWYgQ29tcGlsZXJFbmRJZiBDb21waWxlckVuZFNlbGVjdCBDb21waWxlckVycm9yICdcbiAgICAgICsgJ0NvbXBpbGVySWYgQ29tcGlsZXJTZWxlY3QgQ29tcGlsZXJXYXJuaW5nIENvbnRpbnVlIERhdGEgRGF0YVNlY3Rpb24gRGVidWcgJ1xuICAgICAgKyAnRGVidWdMZXZlbCBEZWNsYXJlIERlY2xhcmVDIERlY2xhcmVDRExMIERlY2xhcmVETEwgRGVjbGFyZU1vZHVsZSBEZWZhdWx0ICdcbiAgICAgICsgJ0RlZmluZSBEaW0gRGlzYWJsZUFTTSBEaXNhYmxlRGVidWdnZXIgRGlzYWJsZUV4cGxpY2l0IEVsc2UgRWxzZUlmIEVuYWJsZUFTTSAnXG4gICAgICArICdFbmFibGVEZWJ1Z2dlciBFbmFibGVFeHBsaWNpdCBFbmQgRW5kRGF0YVNlY3Rpb24gRW5kRGVjbGFyZU1vZHVsZSBFbmRFbnVtZXJhdGlvbiAnXG4gICAgICArICdFbmRJZiBFbmRJbXBvcnQgRW5kSW50ZXJmYWNlIEVuZE1hY3JvIEVuZE1vZHVsZSBFbmRQcm9jZWR1cmUgRW5kU2VsZWN0ICdcbiAgICAgICsgJ0VuZFN0cnVjdHVyZSBFbmRTdHJ1Y3R1cmVVbmlvbiBFbmRXaXRoIEVudW1lcmF0aW9uIEVudW1lcmF0aW9uQmluYXJ5IEV4dGVuZHMgJ1xuICAgICAgKyAnRmFrZVJldHVybiBGb3IgRm9yRWFjaCBGb3JFdmVyIEdsb2JhbCBHb3N1YiBHb3RvIElmIEltcG9ydCBJbXBvcnRDICdcbiAgICAgICsgJ0luY2x1ZGVCaW5hcnkgSW5jbHVkZUZpbGUgSW5jbHVkZVBhdGggSW50ZXJmYWNlIExpc3QgTWFjcm8gTWFjcm9FeHBhbmRlZENvdW50ICdcbiAgICAgICsgJ01hcCBNb2R1bGUgTmV3TGlzdCBOZXdNYXAgTmV4dCBOb3QgT3IgUHJvY2VkdXJlIFByb2NlZHVyZUMgJ1xuICAgICAgKyAnUHJvY2VkdXJlQ0RMTCBQcm9jZWR1cmVETEwgUHJvY2VkdXJlUmV0dXJuIFByb3RlY3RlZCBQcm90b3R5cGUgUHJvdG90eXBlQyBSZURpbSAnXG4gICAgICArICdSZWFkIFJlcGVhdCBSZXN0b3JlIFJldHVybiBSdW50aW1lIFNlbGVjdCBTaGFyZWQgU3RhdGljIFN0ZXAgU3RydWN0dXJlICdcbiAgICAgICsgJ1N0cnVjdHVyZVVuaW9uIFN3YXAgVGhyZWFkZWQgVG8gVW5kZWZpbmVNYWNybyBVbnRpbCBVbnRpbCAgVW51c2VNb2R1bGUgJ1xuICAgICAgKyAnVXNlTW9kdWxlIFdlbmQgV2hpbGUgV2l0aCBYSW5jbHVkZUZpbGUgWE9yJyxcbiAgICBjb250YWluczogW1xuICAgICAgLy8gQ09NTUVOVFMgfCBQQiBJREUgY29sb3I6ICMwMEFBQUEgKFBlcnNpYW4gR3JlZW4pXG4gICAgICBobGpzLkNPTU1FTlQoJzsnLCAnJCcsIHsgcmVsZXZhbmNlOiAwIH0pLFxuXG4gICAgICB7IC8vIFBST0NFRFVSRVMgREVGSU5JVElPTlNcbiAgICAgICAgY2xhc3NOYW1lOiAnZnVuY3Rpb24nLFxuICAgICAgICBiZWdpbjogJ1xcXFxiKFByb2NlZHVyZXxEZWNsYXJlKShDfENETEx8RExMKT9cXFxcYicsXG4gICAgICAgIGVuZDogJ1xcXFwoJyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgeyAvLyBQUk9DRURVUkUgS0VZV09SRFMgfCBQQiBJREUgY29sb3I6ICMwMDY2NjYgKEJsdWUgU3RvbmUpICsgQm9sZFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAna2V5d29yZCcsXG4gICAgICAgICAgICBiZWdpbjogJyhQcm9jZWR1cmV8RGVjbGFyZSkoQ3xDRExMfERMTCk/JyxcbiAgICAgICAgICAgIGV4Y2x1ZGVFbmQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgLy8gUFJPQ0VEVVJFIFJFVFVSTiBUWVBFIFNFVFRJTkcgfCBQQiBJREUgY29sb3I6ICMwMDAwMDAgKEJsYWNrKVxuICAgICAgICAgICAgY2xhc3NOYW1lOiAndHlwZScsXG4gICAgICAgICAgICBiZWdpbjogJ1xcXFwuXFxcXHcqJ1xuICAgICAgICAgICAgLy8gZW5kOiAnICcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERSAvLyBQUk9DRURVUkUgTkFNRSB8IFBCIElERSBjb2xvcjogIzAwNjY2NiAoQmx1ZSBTdG9uZSlcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIFNUUklOR1MsXG4gICAgICBDT05TVEFOVFNcbiAgICBdXG4gIH07XG59XG5cbi8qICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0hBTkdFTE9HXG4gICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLSB2LjEuMiAoMjAxNy0wNS0xMilcbiAgICAgICAgLS0gQlVHLUZJWDogU29tZSBrZXl3b3JkcyB3ZXJlIGFjY2lkZW50YWxseSBqb3luZWQgdG9nZXRoZXIuIE5vdyBmaXhlZC5cbiAgICAtIHYuMS4xICgyMDE3LTA0LTMwKVxuICAgICAgICAtLSBVcGRhdGVkIHRvIFB1cmVCQVNJQyA1LjYwLlxuICAgICAgICAtLSBLZXl3b3JkcyBsaXN0IG5vdyBidWlsdCBieSBleHRyYWN0aW5nIHRoZW0gZnJvbSB0aGUgUHVyZUJBU0lDIFNESydzXG4gICAgICAgICAgIFwiU3ludGF4SGlsaWdodGluZy5kbGxcIiAoZnJvbSBlYWNoIFB1cmVCQVNJQyB2ZXJzaW9uKS4gVG9rZW5zIGZyb20gZWFjaFxuICAgICAgICAgICB2ZXJzaW9uIGFyZSBhZGRlZCB0byB0aGUgbGlzdCwgYW5kIHJlbmFtZWQgb3IgcmVtb3ZlZCB0b2tlbnMgYXJlIGtlcHRcbiAgICAgICAgICAgZm9yIHRoZSBzYWtlIG9mIGNvdmVyaW5nIGFsbCB2ZXJzaW9ucyBvZiB0aGUgbGFuZ3VhZ2UgZnJvbSBQdXJlQkFTSUNcbiAgICAgICAgICAgdjUuMDAgdXB3YXJkLiAoTk9URTogY3VycmVudGx5LCB0aGVyZSBhcmUgbm8gcmVuYW1lZCBvciBkZXByZWNhdGVkXG4gICAgICAgICAgIHRva2VucyBpbiB0aGUga2V5d29yZHMgbGlzdCkuIEZvciBtb3JlIGluZm8sIHNlZTpcbiAgICAgICAgICAgLS0gaHR0cDovL3d3dy5wdXJlYmFzaWMuZnIvZW5nbGlzaC92aWV3dG9waWMucGhwPyZwPTUwNjI2OVxuICAgICAgICAgICAtLSBodHRwczovL2dpdGh1Yi5jb20vdGFqbW9uZS9wdXJlYmFzaWMtYXJjaGl2ZXMvdHJlZS9tYXN0ZXIvc3ludGF4LWhpZ2hsaWdodGluZy9ndWlkZWxpbmVzXG4gICAgLSB2LjEuMCAoQXByaWwgMjAxNilcbiAgICAgICAgLS0gRmlyc3QgcmVsZWFzZVxuICAgICAgICAtLSBLZXl3b3JkcyBsaXN0IHRha2VuIGFuZCBhZGFwdGVkIGZyb20gR3VTaEgncyAoR3VzdGF2byBKdWxpbyBGaW9yZW56YSlcbiAgICAgICAgICAgUHVyZUJhc2ljIGxhbmd1YWdlIGZpbGUgZm9yIEdlU0hpOlxuICAgICAgICAgICAtLSBodHRwczovL2dpdGh1Yi5jb20vZWFzeWJvb2svZ2VzaGkvYmxvYi9tYXN0ZXIvZ2VzaGkvcHVyZWJhc2ljLnBocFxuKi9cblxuZXhwb3J0IHsgcHVyZWJhc2ljIGFzIGRlZmF1bHQgfTtcbiJdfQ==