function ini(hljs) {
    const regex = hljs.regex;
    const NUMBERS = {
        className: 'number',
        relevance: 0,
        variants: [
            { begin: /([+-]+)?[\d]+_[\d_]+/ },
            { begin: hljs.NUMBER_RE }
        ]
    };
    const COMMENTS = hljs.COMMENT();
    COMMENTS.variants = [
        {
            begin: /;/,
            end: /$/
        },
        {
            begin: /#/,
            end: /$/
        }
    ];
    const VARIABLES = {
        className: 'variable',
        variants: [
            { begin: /\$[\w\d"][\w\d_]*/ },
            { begin: /\$\{(.*?)\}/ }
        ]
    };
    const LITERALS = {
        className: 'literal',
        begin: /\bon|off|true|false|yes|no\b/
    };
    const STRINGS = {
        className: "string",
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
            {
                begin: "'''",
                end: "'''",
                relevance: 10
            },
            {
                begin: '"""',
                end: '"""',
                relevance: 10
            },
            {
                begin: '"',
                end: '"'
            },
            {
                begin: "'",
                end: "'"
            }
        ]
    };
    const ARRAY = {
        begin: /\[/,
        end: /\]/,
        contains: [
            COMMENTS,
            LITERALS,
            VARIABLES,
            STRINGS,
            NUMBERS,
            'self'
        ],
        relevance: 0
    };
    const BARE_KEY = /[A-Za-z0-9_-]+/;
    const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
    const ANY_KEY = regex.either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);
    const DOTTED_KEY = regex.concat(ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*', regex.lookahead(/\s*=\s*[^#\s]/));
    return {
        name: 'TOML, also INI',
        aliases: ['toml'],
        case_insensitive: true,
        illegal: /\S/,
        contains: [
            COMMENTS,
            {
                className: 'section',
                begin: /\[+/,
                end: /\]+/
            },
            {
                begin: DOTTED_KEY,
                className: 'attr',
                starts: {
                    end: /$/,
                    contains: [
                        COMMENTS,
                        ARRAY,
                        LITERALS,
                        VARIABLES,
                        STRINGS,
                        NUMBERS
                    ]
                }
            }
        ]
    };
}
export { ini as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvaW5pLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLFNBQVMsR0FBRyxDQUFDLElBQUk7SUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sT0FBTyxHQUFHO1FBQ2QsU0FBUyxFQUFFLFFBQVE7UUFDbkIsU0FBUyxFQUFFLENBQUM7UUFDWixRQUFRLEVBQUU7WUFDUixFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRTtZQUNqQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO1NBQzFCO0tBQ0YsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxRQUFRLENBQUMsUUFBUSxHQUFHO1FBQ2xCO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixHQUFHLEVBQUUsR0FBRztTQUNUO1FBQ0Q7WUFDRSxLQUFLLEVBQUUsR0FBRztZQUNWLEdBQUcsRUFBRSxHQUFHO1NBQ1Q7S0FDRixDQUFDO0lBQ0YsTUFBTSxTQUFTLEdBQUc7UUFDaEIsU0FBUyxFQUFFLFVBQVU7UUFDckIsUUFBUSxFQUFFO1lBQ1IsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUU7WUFDOUIsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFO1NBQ3pCO0tBQ0YsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsU0FBUyxFQUFFLFNBQVM7UUFDcEIsS0FBSyxFQUFFLDhCQUE4QjtLQUN0QyxDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTLEVBQUUsUUFBUTtRQUNuQixRQUFRLEVBQUUsQ0FBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUU7UUFDbkMsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsU0FBUyxFQUFFLEVBQUU7YUFDZDtZQUNEO2dCQUNFLEtBQUssRUFBRSxLQUFLO2dCQUNaLEdBQUcsRUFBRSxLQUFLO2dCQUNWLFNBQVMsRUFBRSxFQUFFO2FBQ2Q7WUFDRDtnQkFDRSxLQUFLLEVBQUUsR0FBRztnQkFDVixHQUFHLEVBQUUsR0FBRzthQUNUO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLEdBQUc7Z0JBQ1YsR0FBRyxFQUFFLEdBQUc7YUFDVDtTQUNGO0tBQ0YsQ0FBQztJQUNGLE1BQU0sS0FBSyxHQUFHO1FBQ1osS0FBSyxFQUFFLElBQUk7UUFDWCxHQUFHLEVBQUUsSUFBSTtRQUNULFFBQVEsRUFBRTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsU0FBUztZQUNULE9BQU87WUFDUCxPQUFPO1lBQ1AsTUFBTTtTQUNQO1FBQ0QsU0FBUyxFQUFFLENBQUM7S0FDYixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7SUFDbEMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7SUFDaEQsTUFBTSx1QkFBdUIsR0FBRyxTQUFTLENBQUM7SUFDMUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FDMUIsUUFBUSxFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixDQUMzRCxDQUFDO0lBQ0YsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FDN0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUN0QyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUNqQyxDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsT0FBTyxFQUFFLENBQUUsTUFBTSxDQUFFO1FBQ25CLGdCQUFnQixFQUFFLElBQUk7UUFDdEIsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUU7WUFDUixRQUFRO1lBQ1I7Z0JBQ0UsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLEtBQUssRUFBRSxLQUFLO2dCQUNaLEdBQUcsRUFBRSxLQUFLO2FBQ1g7WUFDRDtnQkFDRSxLQUFLLEVBQUUsVUFBVTtnQkFDakIsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLE1BQU0sRUFBRTtvQkFDTixHQUFHLEVBQUUsR0FBRztvQkFDUixRQUFRLEVBQUU7d0JBQ1IsUUFBUTt3QkFDUixLQUFLO3dCQUNMLFFBQVE7d0JBQ1IsU0FBUzt3QkFDVCxPQUFPO3dCQUNQLE9BQU87cUJBQ1I7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxPQUFPLEVBQUUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBUT01MLCBhbHNvIElOSVxuRGVzY3JpcHRpb246IFRPTUwgYWltcyB0byBiZSBhIG1pbmltYWwgY29uZmlndXJhdGlvbiBmaWxlIGZvcm1hdCB0aGF0J3MgZWFzeSB0byByZWFkIGR1ZSB0byBvYnZpb3VzIHNlbWFudGljcy5cbkNvbnRyaWJ1dG9yczogR3VpbGxhdW1lIEdvbWV6IDxndWlsbGF1bWUxLmdvbWV6QGdtYWlsLmNvbT5cbkNhdGVnb3J5OiBjb21tb24sIGNvbmZpZ1xuV2Vic2l0ZTogaHR0cHM6Ly9naXRodWIuY29tL3RvbWwtbGFuZy90b21sXG4qL1xuXG5mdW5jdGlvbiBpbmkoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IE5VTUJFUlMgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICByZWxldmFuY2U6IDAsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46IC8oWystXSspP1tcXGRdK19bXFxkX10rLyB9LFxuICAgICAgeyBiZWdpbjogaGxqcy5OVU1CRVJfUkUgfVxuICAgIF1cbiAgfTtcbiAgY29uc3QgQ09NTUVOVFMgPSBobGpzLkNPTU1FTlQoKTtcbiAgQ09NTUVOVFMudmFyaWFudHMgPSBbXG4gICAge1xuICAgICAgYmVnaW46IC87LyxcbiAgICAgIGVuZDogLyQvXG4gICAgfSxcbiAgICB7XG4gICAgICBiZWdpbjogLyMvLFxuICAgICAgZW5kOiAvJC9cbiAgICB9XG4gIF07XG4gIGNvbnN0IFZBUklBQkxFUyA9IHtcbiAgICBjbGFzc05hbWU6ICd2YXJpYWJsZScsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46IC9cXCRbXFx3XFxkXCJdW1xcd1xcZF9dKi8gfSxcbiAgICAgIHsgYmVnaW46IC9cXCRcXHsoLio/KVxcfS8gfVxuICAgIF1cbiAgfTtcbiAgY29uc3QgTElURVJBTFMgPSB7XG4gICAgY2xhc3NOYW1lOiAnbGl0ZXJhbCcsXG4gICAgYmVnaW46IC9cXGJvbnxvZmZ8dHJ1ZXxmYWxzZXx5ZXN8bm9cXGIvXG4gIH07XG4gIGNvbnN0IFNUUklOR1MgPSB7XG4gICAgY2xhc3NOYW1lOiBcInN0cmluZ1wiLFxuICAgIGNvbnRhaW5zOiBbIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSBdLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBcIicnJ1wiLFxuICAgICAgICBlbmQ6IFwiJycnXCIsXG4gICAgICAgIHJlbGV2YW5jZTogMTBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnXCJcIlwiJyxcbiAgICAgICAgZW5kOiAnXCJcIlwiJyxcbiAgICAgICAgcmVsZXZhbmNlOiAxMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdcIicsXG4gICAgICAgIGVuZDogJ1wiJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IFwiJ1wiLFxuICAgICAgICBlbmQ6IFwiJ1wiXG4gICAgICB9XG4gICAgXVxuICB9O1xuICBjb25zdCBBUlJBWSA9IHtcbiAgICBiZWdpbjogL1xcWy8sXG4gICAgZW5kOiAvXFxdLyxcbiAgICBjb250YWluczogW1xuICAgICAgQ09NTUVOVFMsXG4gICAgICBMSVRFUkFMUyxcbiAgICAgIFZBUklBQkxFUyxcbiAgICAgIFNUUklOR1MsXG4gICAgICBOVU1CRVJTLFxuICAgICAgJ3NlbGYnXG4gICAgXSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICBjb25zdCBCQVJFX0tFWSA9IC9bQS1aYS16MC05Xy1dKy87XG4gIGNvbnN0IFFVT1RFRF9LRVlfRE9VQkxFX1FVT1RFID0gL1wiKFxcXFxcInxbXlwiXSkqXCIvO1xuICBjb25zdCBRVU9URURfS0VZX1NJTkdMRV9RVU9URSA9IC8nW14nXSonLztcbiAgY29uc3QgQU5ZX0tFWSA9IHJlZ2V4LmVpdGhlcihcbiAgICBCQVJFX0tFWSwgUVVPVEVEX0tFWV9ET1VCTEVfUVVPVEUsIFFVT1RFRF9LRVlfU0lOR0xFX1FVT1RFXG4gICk7XG4gIGNvbnN0IERPVFRFRF9LRVkgPSByZWdleC5jb25jYXQoXG4gICAgQU5ZX0tFWSwgJyhcXFxccypcXFxcLlxcXFxzKicsIEFOWV9LRVksICcpKicsXG4gICAgcmVnZXgubG9va2FoZWFkKC9cXHMqPVxccypbXiNcXHNdLylcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdUT01MLCBhbHNvIElOSScsXG4gICAgYWxpYXNlczogWyAndG9tbCcgXSxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGlsbGVnYWw6IC9cXFMvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBDT01NRU5UUyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc2VjdGlvbicsXG4gICAgICAgIGJlZ2luOiAvXFxbKy8sXG4gICAgICAgIGVuZDogL1xcXSsvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogRE9UVEVEX0tFWSxcbiAgICAgICAgY2xhc3NOYW1lOiAnYXR0cicsXG4gICAgICAgIHN0YXJ0czoge1xuICAgICAgICAgIGVuZDogLyQvLFxuICAgICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgICBDT01NRU5UUyxcbiAgICAgICAgICAgIEFSUkFZLFxuICAgICAgICAgICAgTElURVJBTFMsXG4gICAgICAgICAgICBWQVJJQUJMRVMsXG4gICAgICAgICAgICBTVFJJTkdTLFxuICAgICAgICAgICAgTlVNQkVSU1xuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgaW5pIGFzIGRlZmF1bHQgfTtcbiJdfQ==