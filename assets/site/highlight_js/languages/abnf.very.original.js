function abnf(hljs) {
    const regex = hljs.regex;
    const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;
    const KEYWORDS = [
        "ALPHA",
        "BIT",
        "CHAR",
        "CR",
        "CRLF",
        "CTL",
        "DIGIT",
        "DQUOTE",
        "HEXDIG",
        "HTAB",
        "LF",
        "LWSP",
        "OCTET",
        "SP",
        "VCHAR",
        "WSP"
    ];
    const COMMENT = hljs.COMMENT(/;/, /$/);
    const TERMINAL_BINARY = {
        scope: "symbol",
        match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    };
    const TERMINAL_DECIMAL = {
        scope: "symbol",
        match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    };
    const TERMINAL_HEXADECIMAL = {
        scope: "symbol",
        match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    };
    const CASE_SENSITIVITY = {
        scope: "symbol",
        match: /%[si](?=".*")/
    };
    const RULE_DECLARATION = {
        scope: "attribute",
        match: regex.concat(IDENT, /(?=\s*=)/)
    };
    const ASSIGNMENT = {
        scope: "operator",
        match: /=\/?/
    };
    return {
        name: 'Augmented Backus-Naur Form',
        illegal: /[!@#$^&',?+~`|:]/,
        keywords: KEYWORDS,
        contains: [
            ASSIGNMENT,
            RULE_DECLARATION,
            COMMENT,
            TERMINAL_BINARY,
            TERMINAL_DECIMAL,
            TERMINAL_HEXADECIMAL,
            CASE_SENSITIVITY,
            hljs.QUOTE_STRING_MODE,
            hljs.NUMBER_MODE
        ]
    };
}
export { abnf as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJuZi5qcyIsInNvdXJjZVJvb3QiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQmVsbEN1YmVEZXYvc2l0ZS10ZXN0aW5nL2RlcGxveW1lbnQvIiwic291cmNlcyI6WyJhc3NldHMvc2l0ZS9oaWdobGlnaHRfanMvbGFuZ3VhZ2VzL2FibmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsU0FBUyxJQUFJLENBQUMsSUFBSTtJQUNoQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sS0FBSyxHQUFHLHdCQUF3QixDQUFDO0lBRXZDLE1BQU0sUUFBUSxHQUFHO1FBQ2YsT0FBTztRQUNQLEtBQUs7UUFDTCxNQUFNO1FBQ04sSUFBSTtRQUNKLE1BQU07UUFDTixLQUFLO1FBQ0wsT0FBTztRQUNQLFFBQVE7UUFDUixRQUFRO1FBQ1IsTUFBTTtRQUNOLElBQUk7UUFDSixNQUFNO1FBQ04sT0FBTztRQUNQLElBQUk7UUFDSixPQUFPO1FBQ1AsS0FBSztLQUNOLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUV2QyxNQUFNLGVBQWUsR0FBRztRQUN0QixLQUFLLEVBQUUsUUFBUTtRQUNmLEtBQUssRUFBRSxnQ0FBZ0M7S0FDeEMsQ0FBQztJQUVGLE1BQU0sZ0JBQWdCLEdBQUc7UUFDdkIsS0FBSyxFQUFFLFFBQVE7UUFDZixLQUFLLEVBQUUsZ0NBQWdDO0tBQ3hDLENBQUM7SUFFRixNQUFNLG9CQUFvQixHQUFHO1FBQzNCLEtBQUssRUFBRSxRQUFRO1FBQ2YsS0FBSyxFQUFFLHlDQUF5QztLQUNqRCxDQUFDO0lBRUYsTUFBTSxnQkFBZ0IsR0FBRztRQUN2QixLQUFLLEVBQUUsUUFBUTtRQUNmLEtBQUssRUFBRSxlQUFlO0tBQ3ZCLENBQUM7SUFFRixNQUFNLGdCQUFnQixHQUFHO1FBQ3ZCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUM7S0FDdkMsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHO1FBQ2pCLEtBQUssRUFBRSxVQUFVO1FBQ2pCLEtBQUssRUFBRSxNQUFNO0tBQ2QsQ0FBQztJQUVGLE9BQU87UUFDTCxJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsUUFBUSxFQUFFLFFBQVE7UUFDbEIsUUFBUSxFQUFFO1lBQ1IsVUFBVTtZQUNWLGdCQUFnQjtZQUNoQixPQUFPO1lBQ1AsZUFBZTtZQUNmLGdCQUFnQjtZQUNoQixvQkFBb0I7WUFDcEIsZ0JBQWdCO1lBQ2hCLElBQUksQ0FBQyxpQkFBaUI7WUFDdEIsSUFBSSxDQUFDLFdBQVc7U0FDakI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELE9BQU8sRUFBRSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IEF1Z21lbnRlZCBCYWNrdXMtTmF1ciBGb3JtXG5BdXRob3I6IEFsZXggTWNLaWJiZW4gPGFsZXhAbnVsbHNjb3BlLm5ldD5cbldlYnNpdGU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1MjM0XG5BdWRpdDogMjAyMFxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIGFibmYoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IElERU5UID0gL15bYS16QS1aXVthLXpBLVowLTktXSovO1xuXG4gIGNvbnN0IEtFWVdPUkRTID0gW1xuICAgIFwiQUxQSEFcIixcbiAgICBcIkJJVFwiLFxuICAgIFwiQ0hBUlwiLFxuICAgIFwiQ1JcIixcbiAgICBcIkNSTEZcIixcbiAgICBcIkNUTFwiLFxuICAgIFwiRElHSVRcIixcbiAgICBcIkRRVU9URVwiLFxuICAgIFwiSEVYRElHXCIsXG4gICAgXCJIVEFCXCIsXG4gICAgXCJMRlwiLFxuICAgIFwiTFdTUFwiLFxuICAgIFwiT0NURVRcIixcbiAgICBcIlNQXCIsXG4gICAgXCJWQ0hBUlwiLFxuICAgIFwiV1NQXCJcbiAgXTtcblxuICBjb25zdCBDT01NRU5UID0gaGxqcy5DT01NRU5UKC87LywgLyQvKTtcblxuICBjb25zdCBURVJNSU5BTF9CSU5BUlkgPSB7XG4gICAgc2NvcGU6IFwic3ltYm9sXCIsXG4gICAgbWF0Y2g6IC8lYlswLTFdKygtWzAtMV0rfChcXC5bMC0xXSspKyk/L1xuICB9O1xuXG4gIGNvbnN0IFRFUk1JTkFMX0RFQ0lNQUwgPSB7XG4gICAgc2NvcGU6IFwic3ltYm9sXCIsXG4gICAgbWF0Y2g6IC8lZFswLTldKygtWzAtOV0rfChcXC5bMC05XSspKyk/L1xuICB9O1xuXG4gIGNvbnN0IFRFUk1JTkFMX0hFWEFERUNJTUFMID0ge1xuICAgIHNjb3BlOiBcInN5bWJvbFwiLFxuICAgIG1hdGNoOiAvJXhbMC05QS1GXSsoLVswLTlBLUZdK3woXFwuWzAtOUEtRl0rKSspPy9cbiAgfTtcblxuICBjb25zdCBDQVNFX1NFTlNJVElWSVRZID0ge1xuICAgIHNjb3BlOiBcInN5bWJvbFwiLFxuICAgIG1hdGNoOiAvJVtzaV0oPz1cIi4qXCIpL1xuICB9O1xuXG4gIGNvbnN0IFJVTEVfREVDTEFSQVRJT04gPSB7XG4gICAgc2NvcGU6IFwiYXR0cmlidXRlXCIsXG4gICAgbWF0Y2g6IHJlZ2V4LmNvbmNhdChJREVOVCwgLyg/PVxccyo9KS8pXG4gIH07XG5cbiAgY29uc3QgQVNTSUdOTUVOVCA9IHtcbiAgICBzY29wZTogXCJvcGVyYXRvclwiLFxuICAgIG1hdGNoOiAvPVxcLz8vXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnQXVnbWVudGVkIEJhY2t1cy1OYXVyIEZvcm0nLFxuICAgIGlsbGVnYWw6IC9bIUAjJF4mJyw/K35gfDpdLyxcbiAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIEFTU0lHTk1FTlQsXG4gICAgICBSVUxFX0RFQ0xBUkFUSU9OLFxuICAgICAgQ09NTUVOVCxcbiAgICAgIFRFUk1JTkFMX0JJTkFSWSxcbiAgICAgIFRFUk1JTkFMX0RFQ0lNQUwsXG4gICAgICBURVJNSU5BTF9IRVhBREVDSU1BTCxcbiAgICAgIENBU0VfU0VOU0lUSVZJVFksXG4gICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgaGxqcy5OVU1CRVJfTU9ERVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgYWJuZiBhcyBkZWZhdWx0IH07XG4iXX0=