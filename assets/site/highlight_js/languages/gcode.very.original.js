function gcode(hljs) {
    const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
    const GCODE_CLOSE_RE = '%';
    const GCODE_KEYWORDS = {
        $pattern: GCODE_IDENT_RE,
        keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT '
            + 'EQ LT GT NE GE LE OR XOR'
    };
    const GCODE_START = {
        className: 'meta',
        begin: '([O])([0-9]+)'
    };
    const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, { begin: '([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|' + hljs.C_NUMBER_RE });
    const GCODE_CODE = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(/\(/, /\)/),
        NUMBER,
        hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
            className: 'name',
            begin: '([G])([0-9]+\\.?[0-9]?)'
        },
        {
            className: 'name',
            begin: '([M])([0-9]+\\.?[0-9]?)'
        },
        {
            className: 'attr',
            begin: '(VC|VS|#)',
            end: '(\\d+)'
        },
        {
            className: 'attr',
            begin: '(VZOFX|VZOFY|VZOFZ)'
        },
        {
            className: 'built_in',
            begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
            contains: [NUMBER],
            end: '\\]'
        },
        {
            className: 'symbol',
            variants: [
                {
                    begin: 'N',
                    end: '\\d+',
                    illegal: '\\W'
                }
            ]
        }
    ];
    return {
        name: 'G-code (ISO 6983)',
        aliases: ['nc'],
        case_insensitive: true,
        keywords: GCODE_KEYWORDS,
        contains: [
            {
                className: 'meta',
                begin: GCODE_CLOSE_RE
            },
            GCODE_START
        ].concat(GCODE_CODE)
    };
}
export { gcode as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2NvZGUuanMiLCJzb3VyY2VSb290IjoiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JlbGxDdWJlRGV2L3NpdGUtdGVzdGluZy9kZXBsb3ltZW50LyIsInNvdXJjZXMiOlsiYXNzZXRzL3NpdGUvaGlnaGxpZ2h0X2pzL2xhbmd1YWdlcy9nY29kZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxTQUFTLEtBQUssQ0FBQyxJQUFJO0lBQ2pCLE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDO0lBQzNDLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQztJQUMzQixNQUFNLGNBQWMsR0FBRztRQUNyQixRQUFRLEVBQUUsY0FBYztRQUN4QixPQUFPLEVBQUUsbUVBQW1FO2NBQ3hFLDBCQUEwQjtLQUMvQixDQUFDO0lBQ0YsTUFBTSxXQUFXLEdBQUc7UUFDbEIsU0FBUyxFQUFFLE1BQU07UUFDakIsS0FBSyxFQUFFLGVBQWU7S0FDdkIsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxzQ0FBc0MsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN0SCxNQUFNLFVBQVUsR0FBRztRQUNqQixJQUFJLENBQUMsbUJBQW1CO1FBQ3hCLElBQUksQ0FBQyxvQkFBb0I7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3hCLE1BQU07UUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN2RDtZQUNFLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLEtBQUssRUFBRSx5QkFBeUI7U0FDakM7UUFDRDtZQUNFLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLEtBQUssRUFBRSx5QkFBeUI7U0FDakM7UUFDRDtZQUNFLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLEtBQUssRUFBRSxXQUFXO1lBQ2xCLEdBQUcsRUFBRSxRQUFRO1NBQ2Q7UUFDRDtZQUNFLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLEtBQUssRUFBRSxxQkFBcUI7U0FDN0I7UUFDRDtZQUNFLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEtBQUssRUFBRSw0REFBNEQ7WUFDbkUsUUFBUSxFQUFFLENBQUUsTUFBTSxDQUFFO1lBQ3BCLEdBQUcsRUFBRSxLQUFLO1NBQ1g7UUFDRDtZQUNFLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFFBQVEsRUFBRTtnQkFDUjtvQkFDRSxLQUFLLEVBQUUsR0FBRztvQkFDVixHQUFHLEVBQUUsTUFBTTtvQkFDWCxPQUFPLEVBQUUsS0FBSztpQkFDZjthQUNGO1NBQ0Y7S0FDRixDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxtQkFBbUI7UUFDekIsT0FBTyxFQUFFLENBQUUsSUFBSSxDQUFFO1FBR2pCLGdCQUFnQixFQUFFLElBQUk7UUFDdEIsUUFBUSxFQUFFLGNBQWM7UUFDeEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLEtBQUssRUFBRSxjQUFjO2FBQ3RCO1lBQ0QsV0FBVztTQUNaLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztLQUNyQixDQUFDO0FBQ0osQ0FBQztBQUVELE9BQU8sRUFBRSxLQUFLLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIExhbmd1YWdlOiBHLWNvZGUgKElTTyA2OTgzKVxuIENvbnRyaWJ1dG9yczogQWRhbSBKb3NlcGggQ29vayA8YWRhbS5qb3NlcGguY29va0BnbWFpbC5jb20+XG4gRGVzY3JpcHRpb246IEctY29kZSBzeW50YXggaGlnaGxpZ2h0ZXIgZm9yIEZhbnVjIGFuZCBvdGhlciBjb21tb24gQ05DIG1hY2hpbmUgdG9vbCBjb250cm9scy5cbiBXZWJzaXRlOiBodHRwczovL3d3dy5zaXMuc2UvYXBpL2RvY3VtZW50L3ByZXZpZXcvOTExOTUyL1xuICovXG5cbmZ1bmN0aW9uIGdjb2RlKGhsanMpIHtcbiAgY29uc3QgR0NPREVfSURFTlRfUkUgPSAnW0EtWl9dW0EtWjAtOV8uXSonO1xuICBjb25zdCBHQ09ERV9DTE9TRV9SRSA9ICclJztcbiAgY29uc3QgR0NPREVfS0VZV09SRFMgPSB7XG4gICAgJHBhdHRlcm46IEdDT0RFX0lERU5UX1JFLFxuICAgIGtleXdvcmQ6ICdJRiBETyBXSElMRSBFTkRXSElMRSBDQUxMIEVORElGIFNVQiBFTkRTVUIgR09UTyBSRVBFQVQgRU5EUkVQRUFUICdcbiAgICAgICsgJ0VRIExUIEdUIE5FIEdFIExFIE9SIFhPUidcbiAgfTtcbiAgY29uc3QgR0NPREVfU1RBUlQgPSB7XG4gICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgYmVnaW46ICcoW09dKShbMC05XSspJ1xuICB9O1xuICBjb25zdCBOVU1CRVIgPSBobGpzLmluaGVyaXQoaGxqcy5DX05VTUJFUl9NT0RFLCB7IGJlZ2luOiAnKFstK10/KChcXFxcLlxcXFxkKyl8KFxcXFxkKykoXFxcXC5cXFxcZCopPykpfCcgKyBobGpzLkNfTlVNQkVSX1JFIH0pO1xuICBjb25zdCBHQ09ERV9DT0RFID0gW1xuICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgIGhsanMuQ09NTUVOVCgvXFwoLywgL1xcKS8pLFxuICAgIE5VTUJFUixcbiAgICBobGpzLmluaGVyaXQoaGxqcy5BUE9TX1NUUklOR19NT0RFLCB7IGlsbGVnYWw6IG51bGwgfSksXG4gICAgaGxqcy5pbmhlcml0KGhsanMuUVVPVEVfU1RSSU5HX01PREUsIHsgaWxsZWdhbDogbnVsbCB9KSxcbiAgICB7XG4gICAgICBjbGFzc05hbWU6ICduYW1lJyxcbiAgICAgIGJlZ2luOiAnKFtHXSkoWzAtOV0rXFxcXC4/WzAtOV0/KSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ25hbWUnLFxuICAgICAgYmVnaW46ICcoW01dKShbMC05XStcXFxcLj9bMC05XT8pJ1xuICAgIH0sXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiAnYXR0cicsXG4gICAgICBiZWdpbjogJyhWQ3xWU3wjKScsXG4gICAgICBlbmQ6ICcoXFxcXGQrKSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ2F0dHInLFxuICAgICAgYmVnaW46ICcoVlpPRlh8VlpPRll8VlpPRlopJ1xuICAgIH0sXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiAnYnVpbHRfaW4nLFxuICAgICAgYmVnaW46ICcoQVRBTnxBQlN8QUNPU3xBU0lOfFNJTnxDT1N8RVhQfEZJWHxGVVB8Uk9VTkR8TE58VEFOKShcXFxcWyknLFxuICAgICAgY29udGFpbnM6IFsgTlVNQkVSIF0sXG4gICAgICBlbmQ6ICdcXFxcXSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N5bWJvbCcsXG4gICAgICB2YXJpYW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdOJyxcbiAgICAgICAgICBlbmQ6ICdcXFxcZCsnLFxuICAgICAgICAgIGlsbGVnYWw6ICdcXFxcVydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgXTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdHLWNvZGUgKElTTyA2OTgzKScsXG4gICAgYWxpYXNlczogWyAnbmMnIF0sXG4gICAgLy8gU29tZSBpbXBsZW1lbnRhdGlvbnMgKENOQyBjb250cm9scykgb2YgRy1jb2RlIGFyZSBpbnRlcm9wZXJhYmxlIHdpdGggdXBwZXJjYXNlIGFuZCBsb3dlcmNhc2UgbGV0dGVycyBzZWFtbGVzc2x5LlxuICAgIC8vIEhvd2V2ZXIsIG1vc3QgcHJlZmVyIGFsbCB1cHBlcmNhc2UgYW5kIHVwcGVyY2FzZSBpcyBjdXN0b21hcnkuXG4gICAgY2FzZV9pbnNlbnNpdGl2ZTogdHJ1ZSxcbiAgICBrZXl3b3JkczogR0NPREVfS0VZV09SRFMsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgICAgIGJlZ2luOiBHQ09ERV9DTE9TRV9SRVxuICAgICAgfSxcbiAgICAgIEdDT0RFX1NUQVJUXG4gICAgXS5jb25jYXQoR0NPREVfQ09ERSlcbiAgfTtcbn1cblxuZXhwb3J0IHsgZ2NvZGUgYXMgZGVmYXVsdCB9O1xuIl19