function escape(value) {
    return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
}
function source(re) {
    if (!re)
        return null;
    if (typeof re === "string")
        return re;
    return re.source;
}
function lookahead(re) {
    return concat('(?=', re, ')');
}
function concat(...args) {
    const joined = args.map((x) => source(x)).join("");
    return joined;
}
function stripOptionsFromArgs(args) {
    const opts = args[args.length - 1];
    if (typeof opts === 'object' && opts.constructor === Object) {
        args.splice(args.length - 1, 1);
        return opts;
    }
    else {
        return {};
    }
}
function either(...args) {
    const opts = stripOptionsFromArgs(args);
    const joined = '('
        + (opts.capture ? "" : "?:")
        + args.map((x) => source(x)).join("|") + ")";
    return joined;
}
function fsharp(hljs) {
    const KEYWORDS = [
        "abstract",
        "and",
        "as",
        "assert",
        "base",
        "begin",
        "class",
        "default",
        "delegate",
        "do",
        "done",
        "downcast",
        "downto",
        "elif",
        "else",
        "end",
        "exception",
        "extern",
        "finally",
        "fixed",
        "for",
        "fun",
        "function",
        "global",
        "if",
        "in",
        "inherit",
        "inline",
        "interface",
        "internal",
        "lazy",
        "let",
        "match",
        "member",
        "module",
        "mutable",
        "namespace",
        "new",
        "of",
        "open",
        "or",
        "override",
        "private",
        "public",
        "rec",
        "return",
        "static",
        "struct",
        "then",
        "to",
        "try",
        "type",
        "upcast",
        "use",
        "val",
        "void",
        "when",
        "while",
        "with",
        "yield"
    ];
    const BANG_KEYWORD_MODE = {
        scope: 'keyword',
        match: /\b(yield|return|let|do|match|use)!/
    };
    const PREPROCESSOR_KEYWORDS = [
        "if",
        "else",
        "endif",
        "line",
        "nowarn",
        "light",
        "r",
        "i",
        "I",
        "load",
        "time",
        "help",
        "quit"
    ];
    const LITERALS = [
        "true",
        "false",
        "null",
        "Some",
        "None",
        "Ok",
        "Error",
        "infinity",
        "infinityf",
        "nan",
        "nanf"
    ];
    const SPECIAL_IDENTIFIERS = [
        "__LINE__",
        "__SOURCE_DIRECTORY__",
        "__SOURCE_FILE__"
    ];
    const KNOWN_TYPES = [
        "bool",
        "byte",
        "sbyte",
        "int8",
        "int16",
        "int32",
        "uint8",
        "uint16",
        "uint32",
        "int",
        "uint",
        "int64",
        "uint64",
        "nativeint",
        "unativeint",
        "decimal",
        "float",
        "double",
        "float32",
        "single",
        "char",
        "string",
        "unit",
        "bigint",
        "option",
        "voption",
        "list",
        "array",
        "seq",
        "byref",
        "exn",
        "inref",
        "nativeptr",
        "obj",
        "outref",
        "voidptr",
        "Result"
    ];
    const BUILTINS = [
        "not",
        "ref",
        "raise",
        "reraise",
        "dict",
        "readOnlyDict",
        "set",
        "get",
        "enum",
        "sizeof",
        "typeof",
        "typedefof",
        "nameof",
        "nullArg",
        "invalidArg",
        "invalidOp",
        "id",
        "fst",
        "snd",
        "ignore",
        "lock",
        "using",
        "box",
        "unbox",
        "tryUnbox",
        "printf",
        "printfn",
        "sprintf",
        "eprintf",
        "eprintfn",
        "fprintf",
        "fprintfn",
        "failwith",
        "failwithf"
    ];
    const ALL_KEYWORDS = {
        keyword: KEYWORDS,
        literal: LITERALS,
        built_in: BUILTINS,
        'variable.constant': SPECIAL_IDENTIFIERS
    };
    const ML_COMMENT = hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
        contains: ["self"]
    });
    const COMMENT = {
        variants: [
            ML_COMMENT,
            hljs.C_LINE_COMMENT_MODE,
        ]
    };
    const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;
    const QUOTED_IDENTIFIER = {
        scope: 'variable',
        begin: /``/,
        end: /``/
    };
    const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
    const GENERIC_TYPE_SYMBOL = {
        scope: 'symbol',
        variants: [
            { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
            { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
        ],
        relevance: 0
    };
    const makeOperatorMode = function ({ includeEqual }) {
        let allOperatorChars;
        if (includeEqual)
            allOperatorChars = "!%&*+-/<=>@^|~?";
        else
            allOperatorChars = "!%&*+-/<>@^|~?";
        const OPERATOR_CHARS = Array.from(allOperatorChars);
        const OPERATOR_CHAR_RE = concat('[', ...OPERATOR_CHARS.map(escape), ']');
        const OPERATOR_CHAR_OR_DOT_RE = either(OPERATOR_CHAR_RE, /\./);
        const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat(OPERATOR_CHAR_OR_DOT_RE, lookahead(OPERATOR_CHAR_OR_DOT_RE));
        const SYMBOLIC_OPERATOR_RE = either(concat(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, '*'), concat(OPERATOR_CHAR_RE, '+'));
        return {
            scope: 'operator',
            match: either(SYMBOLIC_OPERATOR_RE, /:\?>/, /:\?/, /:>/, /:=/, /::?/, /\$/),
            relevance: 0
        };
    };
    const OPERATOR = makeOperatorMode({ includeEqual: true });
    const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });
    const makeTypeAnnotationMode = function (prefix, prefixScope) {
        return {
            begin: concat(prefix, lookahead(concat(/\s*/, either(/\w/, /'/, /\^/, /#/, /``/, /\(/, /{\|/)))),
            beginScope: prefixScope,
            end: lookahead(either(/\n/, /=/)),
            relevance: 0,
            keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
            contains: [
                COMMENT,
                GENERIC_TYPE_SYMBOL,
                hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
                OPERATOR_WITHOUT_EQUAL
            ]
        };
    };
    const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, 'operator');
    const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, 'keyword');
    const TYPE_DECLARATION = {
        begin: [
            /(^|\s+)/,
            /type/,
            /\s+/,
            IDENTIFIER_RE
        ],
        beginScope: {
            2: 'keyword',
            4: 'title.class'
        },
        end: lookahead(/\(|=|$/),
        keywords: ALL_KEYWORDS,
        contains: [
            COMMENT,
            hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
            GENERIC_TYPE_SYMBOL,
            {
                scope: 'operator',
                match: /<|>/
            },
            TYPE_ANNOTATION
        ]
    };
    const COMPUTATION_EXPRESSION = {
        scope: 'computation-expression',
        match: /\b[_a-z]\w*(?=\s*\{)/
    };
    const PREPROCESSOR = {
        begin: [
            /^\s*/,
            concat(/#/, either(...PREPROCESSOR_KEYWORDS)),
            /\b/
        ],
        beginScope: { 2: 'meta' },
        end: lookahead(/\s|$/)
    };
    const NUMBER = {
        variants: [
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE
        ]
    };
    const QUOTED_STRING = {
        scope: 'string',
        begin: /"/,
        end: /"/,
        contains: [
            hljs.BACKSLASH_ESCAPE
        ]
    };
    const VERBATIM_STRING = {
        scope: 'string',
        begin: /@"/,
        end: /"/,
        contains: [
            {
                match: /""/
            },
            hljs.BACKSLASH_ESCAPE
        ]
    };
    const TRIPLE_QUOTED_STRING = {
        scope: 'string',
        begin: /"""/,
        end: /"""/,
        relevance: 2
    };
    const SUBST = {
        scope: 'subst',
        begin: /\{/,
        end: /\}/,
        keywords: ALL_KEYWORDS
    };
    const INTERPOLATED_STRING = {
        scope: 'string',
        begin: /\$"/,
        end: /"/,
        contains: [
            {
                match: /\{\{/
            },
            {
                match: /\}\}/
            },
            hljs.BACKSLASH_ESCAPE,
            SUBST
        ]
    };
    const INTERPOLATED_VERBATIM_STRING = {
        scope: 'string',
        begin: /(\$@|@\$)"/,
        end: /"/,
        contains: [
            {
                match: /\{\{/
            },
            {
                match: /\}\}/
            },
            {
                match: /""/
            },
            hljs.BACKSLASH_ESCAPE,
            SUBST
        ]
    };
    const INTERPOLATED_TRIPLE_QUOTED_STRING = {
        scope: 'string',
        begin: /\$"""/,
        end: /"""/,
        contains: [
            {
                match: /\{\{/
            },
            {
                match: /\}\}/
            },
            SUBST
        ],
        relevance: 2
    };
    const CHAR_LITERAL = {
        scope: 'string',
        match: concat(/'/, either(/[^\\']/, /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/), /'/)
    };
    SUBST.contains = [
        INTERPOLATED_VERBATIM_STRING,
        INTERPOLATED_STRING,
        VERBATIM_STRING,
        QUOTED_STRING,
        CHAR_LITERAL,
        BANG_KEYWORD_MODE,
        COMMENT,
        QUOTED_IDENTIFIER,
        TYPE_ANNOTATION,
        COMPUTATION_EXPRESSION,
        PREPROCESSOR,
        NUMBER,
        GENERIC_TYPE_SYMBOL,
        OPERATOR
    ];
    const STRING = {
        variants: [
            INTERPOLATED_TRIPLE_QUOTED_STRING,
            INTERPOLATED_VERBATIM_STRING,
            INTERPOLATED_STRING,
            TRIPLE_QUOTED_STRING,
            VERBATIM_STRING,
            QUOTED_STRING,
            CHAR_LITERAL
        ]
    };
    return {
        name: 'F#',
        aliases: [
            'fs',
            'f#'
        ],
        keywords: ALL_KEYWORDS,
        illegal: /\/\*/,
        classNameAliases: {
            'computation-expression': 'keyword'
        },
        contains: [
            BANG_KEYWORD_MODE,
            STRING,
            COMMENT,
            QUOTED_IDENTIFIER,
            TYPE_DECLARATION,
            {
                scope: 'meta',
                begin: /\[</,
                end: />\]/,
                relevance: 2,
                contains: [
                    QUOTED_IDENTIFIER,
                    TRIPLE_QUOTED_STRING,
                    VERBATIM_STRING,
                    QUOTED_STRING,
                    CHAR_LITERAL,
                    NUMBER
                ]
            },
            DISCRIMINATED_UNION_TYPE_ANNOTATION,
            TYPE_ANNOTATION,
            COMPUTATION_EXPRESSION,
            PREPROCESSOR,
            NUMBER,
            GENERIC_TYPE_SYMBOL,
            OPERATOR
        ]
    };
}
export { fsharp as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvZnNoYXJwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLFNBQVMsTUFBTSxDQUFDLEtBQUs7SUFDbkIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFNRCxTQUFTLE1BQU0sQ0FBQyxFQUFFO0lBQ2hCLElBQUksQ0FBQyxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDckIsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFdEMsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ25CLENBQUM7QUFNRCxTQUFTLFNBQVMsQ0FBQyxFQUFFO0lBQ25CLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQU1ELFNBQVMsTUFBTSxDQUFDLEdBQUcsSUFBSTtJQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQU1ELFNBQVMsb0JBQW9CLENBQUMsSUFBSTtJQUNoQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVuQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FB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QkFBZ0I7WUFDaEI7Z0JBR0UsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsU0FBUyxFQUFFLENBQUM7Z0JBQ1osUUFBUSxFQUFFO29CQUNSLGlCQUFpQjtvQkFFakIsb0JBQW9CO29CQUNwQixlQUFlO29CQUNmLGFBQWE7b0JBQ2IsWUFBWTtvQkFDWixNQUFNO2lCQUNQO2FBQ0Y7WUFDRCxtQ0FBbUM7WUFDbkMsZUFBZTtZQUNmLHNCQUFzQjtZQUN0QixZQUFZO1lBQ1osTUFBTTtZQUNOLG1CQUFtQjtZQUNuQixRQUFRO1NBQ1Q7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELE9BQU8sRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge1JlZ0V4cH1cbiAqICovXG5mdW5jdGlvbiBlc2NhcGUodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAodmFsdWUucmVwbGFjZSgvWy0vXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpLCAnbScpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVnRXhwIHwgc3RyaW5nIH0gcmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHNvdXJjZShyZSkge1xuICBpZiAoIXJlKSByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiByZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHJlO1xuXG4gIHJldHVybiByZS5zb3VyY2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWdFeHAgfCBzdHJpbmcgfSByZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbG9va2FoZWFkKHJlKSB7XG4gIHJldHVybiBjb25jYXQoJyg/PScsIHJlLCAnKScpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Li4uKFJlZ0V4cCB8IHN0cmluZykgfSBhcmdzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjb25jYXQoLi4uYXJncykge1xuICBjb25zdCBqb2luZWQgPSBhcmdzLm1hcCgoeCkgPT4gc291cmNlKHgpKS5qb2luKFwiXCIpO1xuICByZXR1cm4gam9pbmVkO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IEFycmF5PHN0cmluZyB8IFJlZ0V4cCB8IE9iamVjdD4gfSBhcmdzXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBzdHJpcE9wdGlvbnNGcm9tQXJncyhhcmdzKSB7XG4gIGNvbnN0IG9wdHMgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnb2JqZWN0JyAmJiBvcHRzLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICBhcmdzLnNwbGljZShhcmdzLmxlbmd0aCAtIDEsIDEpO1xuICAgIHJldHVybiBvcHRzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG4vKiogQHR5cGVkZWYgeyB7Y2FwdHVyZT86IGJvb2xlYW59IH0gUmVnZXhFaXRoZXJPcHRpb25zICovXG5cbi8qKlxuICogQW55IG9mIHRoZSBwYXNzZWQgZXhwcmVzc3Npb25zIG1heSBtYXRjaFxuICpcbiAqIENyZWF0ZXMgYSBodWdlIHRoaXMgfCB0aGlzIHwgdGhhdCB8IHRoYXQgbWF0Y2hcbiAqIEBwYXJhbSB7KFJlZ0V4cCB8IHN0cmluZylbXSB8IFsuLi4oUmVnRXhwIHwgc3RyaW5nKVtdLCBSZWdleEVpdGhlck9wdGlvbnNdfSBhcmdzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlaXRoZXIoLi4uYXJncykge1xuICAvKiogQHR5cGUgeyBvYmplY3QgJiB7Y2FwdHVyZT86IGJvb2xlYW59IH0gICovXG4gIGNvbnN0IG9wdHMgPSBzdHJpcE9wdGlvbnNGcm9tQXJncyhhcmdzKTtcbiAgY29uc3Qgam9pbmVkID0gJygnXG4gICAgKyAob3B0cy5jYXB0dXJlID8gXCJcIiA6IFwiPzpcIilcbiAgICArIGFyZ3MubWFwKCh4KSA9PiBzb3VyY2UoeCkpLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gIHJldHVybiBqb2luZWQ7XG59XG5cbi8qXG5MYW5ndWFnZTogRiNcbkF1dGhvcjogSm9uYXMgRm9sbGVzw7ggPGpvbmFzQGZvbGxlc29lLm5vPlxuQ29udHJpYnV0b3JzOiBUcm95IEtlcnNoYXcgPGhlbGxvQHRyb3lrZXJzaGF3LmNvbT4sIEhlbnJpayBGZWxkdCA8aGVucmlrQGhhZi5zZT4sIE1lbHZ5biBMYcOvbHkgPG1lbHZ5bi5sYWlseUBnbWFpbC5jb20+XG5XZWJzaXRlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9kb3RuZXQvZnNoYXJwL1xuQ2F0ZWdvcnk6IGZ1bmN0aW9uYWxcbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBmc2hhcnAoaGxqcykge1xuICBjb25zdCBLRVlXT1JEUyA9IFtcbiAgICBcImFic3RyYWN0XCIsXG4gICAgXCJhbmRcIixcbiAgICBcImFzXCIsXG4gICAgXCJhc3NlcnRcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJlZ2luXCIsXG4gICAgXCJjbGFzc1wiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZGVsZWdhdGVcIixcbiAgICBcImRvXCIsXG4gICAgXCJkb25lXCIsXG4gICAgXCJkb3duY2FzdFwiLFxuICAgIFwiZG93bnRvXCIsXG4gICAgXCJlbGlmXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJlbmRcIixcbiAgICBcImV4Y2VwdGlvblwiLFxuICAgIFwiZXh0ZXJuXCIsXG4gICAgLy8gXCJmYWxzZVwiLCAvLyBsaXRlcmFsXG4gICAgXCJmaW5hbGx5XCIsXG4gICAgXCJmaXhlZFwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmdW5cIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJnbG9iYWxcIixcbiAgICBcImlmXCIsXG4gICAgXCJpblwiLFxuICAgIFwiaW5oZXJpdFwiLFxuICAgIFwiaW5saW5lXCIsXG4gICAgXCJpbnRlcmZhY2VcIixcbiAgICBcImludGVybmFsXCIsXG4gICAgXCJsYXp5XCIsXG4gICAgXCJsZXRcIixcbiAgICBcIm1hdGNoXCIsXG4gICAgXCJtZW1iZXJcIixcbiAgICBcIm1vZHVsZVwiLFxuICAgIFwibXV0YWJsZVwiLFxuICAgIFwibmFtZXNwYWNlXCIsXG4gICAgXCJuZXdcIixcbiAgICAvLyBcIm5vdFwiLCAvLyBidWlsdF9pblxuICAgIC8vIFwibnVsbFwiLCAvLyBsaXRlcmFsXG4gICAgXCJvZlwiLFxuICAgIFwib3BlblwiLFxuICAgIFwib3JcIixcbiAgICBcIm92ZXJyaWRlXCIsXG4gICAgXCJwcml2YXRlXCIsXG4gICAgXCJwdWJsaWNcIixcbiAgICBcInJlY1wiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJzdGF0aWNcIixcbiAgICBcInN0cnVjdFwiLFxuICAgIFwidGhlblwiLFxuICAgIFwidG9cIixcbiAgICAvLyBcInRydWVcIiwgLy8gbGl0ZXJhbFxuICAgIFwidHJ5XCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ1cGNhc3RcIixcbiAgICBcInVzZVwiLFxuICAgIFwidmFsXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJ3aGVuXCIsXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwid2l0aFwiLFxuICAgIFwieWllbGRcIlxuICBdO1xuXG4gIGNvbnN0IEJBTkdfS0VZV09SRF9NT0RFID0ge1xuICAgIC8vIG1vbmFkIGJ1aWxkZXIga2V5d29yZHMgKG1hdGNoZXMgYmVmb3JlIG5vbi1iYW5nIGtleXdvcmRzKVxuICAgIHNjb3BlOiAna2V5d29yZCcsXG4gICAgbWF0Y2g6IC9cXGIoeWllbGR8cmV0dXJufGxldHxkb3xtYXRjaHx1c2UpIS9cbiAgfTtcblxuICBjb25zdCBQUkVQUk9DRVNTT1JfS0VZV09SRFMgPSBbXG4gICAgXCJpZlwiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZW5kaWZcIixcbiAgICBcImxpbmVcIixcbiAgICBcIm5vd2FyblwiLFxuICAgIFwibGlnaHRcIixcbiAgICBcInJcIixcbiAgICBcImlcIixcbiAgICBcIklcIixcbiAgICBcImxvYWRcIixcbiAgICBcInRpbWVcIixcbiAgICBcImhlbHBcIixcbiAgICBcInF1aXRcIlxuICBdO1xuXG4gIGNvbnN0IExJVEVSQUxTID0gW1xuICAgIFwidHJ1ZVwiLFxuICAgIFwiZmFsc2VcIixcbiAgICBcIm51bGxcIixcbiAgICBcIlNvbWVcIixcbiAgICBcIk5vbmVcIixcbiAgICBcIk9rXCIsXG4gICAgXCJFcnJvclwiLFxuICAgIFwiaW5maW5pdHlcIixcbiAgICBcImluZmluaXR5ZlwiLFxuICAgIFwibmFuXCIsXG4gICAgXCJuYW5mXCJcbiAgXTtcblxuICBjb25zdCBTUEVDSUFMX0lERU5USUZJRVJTID0gW1xuICAgIFwiX19MSU5FX19cIixcbiAgICBcIl9fU09VUkNFX0RJUkVDVE9SWV9fXCIsXG4gICAgXCJfX1NPVVJDRV9GSUxFX19cIlxuICBdO1xuXG4gIC8vIFNpbmNlIGl0J3MgcG9zc2libGUgdG8gcmUtYmluZC9zaGFkb3cgbmFtZXMgKGUuZy4gbGV0IGNoYXIgPSAnYycpLFxuICAvLyB0aGVzZSBidWlsdGluIHR5cGVzIHNob3VsZCBvbmx5IGJlIG1hdGNoZWQgd2hlbiBhIHR5cGUgbmFtZSBpcyBleHBlY3RlZC5cbiAgY29uc3QgS05PV05fVFlQRVMgPSBbXG4gICAgLy8gYmFzaWMgdHlwZXNcbiAgICBcImJvb2xcIixcbiAgICBcImJ5dGVcIixcbiAgICBcInNieXRlXCIsXG4gICAgXCJpbnQ4XCIsXG4gICAgXCJpbnQxNlwiLFxuICAgIFwiaW50MzJcIixcbiAgICBcInVpbnQ4XCIsXG4gICAgXCJ1aW50MTZcIixcbiAgICBcInVpbnQzMlwiLFxuICAgIFwiaW50XCIsXG4gICAgXCJ1aW50XCIsXG4gICAgXCJpbnQ2NFwiLFxuICAgIFwidWludDY0XCIsXG4gICAgXCJuYXRpdmVpbnRcIixcbiAgICBcInVuYXRpdmVpbnRcIixcbiAgICBcImRlY2ltYWxcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJkb3VibGVcIixcbiAgICBcImZsb2F0MzJcIixcbiAgICBcInNpbmdsZVwiLFxuICAgIFwiY2hhclwiLFxuICAgIFwic3RyaW5nXCIsXG4gICAgXCJ1bml0XCIsXG4gICAgXCJiaWdpbnRcIixcbiAgICAvLyBvdGhlciBuYXRpdmUgdHlwZXMgb3IgbG93ZXJjYXNlIGFsaWFzZXNcbiAgICBcIm9wdGlvblwiLFxuICAgIFwidm9wdGlvblwiLFxuICAgIFwibGlzdFwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcInNlcVwiLFxuICAgIFwiYnlyZWZcIixcbiAgICBcImV4blwiLFxuICAgIFwiaW5yZWZcIixcbiAgICBcIm5hdGl2ZXB0clwiLFxuICAgIFwib2JqXCIsXG4gICAgXCJvdXRyZWZcIixcbiAgICBcInZvaWRwdHJcIixcbiAgICAvLyBvdGhlciBpbXBvcnRhbnQgRlNoYXJwIHR5cGVzXG4gICAgXCJSZXN1bHRcIlxuICBdO1xuXG4gIGNvbnN0IEJVSUxUSU5TID0gW1xuICAgIC8vIFNvbWV3aGF0IGFyYml0cmFyeSBsaXN0IG9mIGJ1aWx0aW4gZnVuY3Rpb25zIGFuZCB2YWx1ZXMuXG4gICAgLy8gTW9zdCBvZiB0aGVtIGFyZSBkZWNsYXJlZCBpbiBNaWNyb3NvZnQuRlNoYXJwLkNvcmVcbiAgICAvLyBJIHRyaWVkIHRvIHN0YXkgcmVsZXZhbnQgYnkgYWRkaW5nIG9ubHkgdGhlIG1vc3QgaWRpb21hdGljXG4gICAgLy8gYW5kIG1vc3QgdXNlZCBzeW1ib2xzIHRoYXQgYXJlIG5vdCBhbHJlYWR5IGRlY2xhcmVkIGFzIHR5cGVzLlxuICAgIFwibm90XCIsXG4gICAgXCJyZWZcIixcbiAgICBcInJhaXNlXCIsXG4gICAgXCJyZXJhaXNlXCIsXG4gICAgXCJkaWN0XCIsXG4gICAgXCJyZWFkT25seURpY3RcIixcbiAgICBcInNldFwiLFxuICAgIFwiZ2V0XCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJzaXplb2ZcIixcbiAgICBcInR5cGVvZlwiLFxuICAgIFwidHlwZWRlZm9mXCIsXG4gICAgXCJuYW1lb2ZcIixcbiAgICBcIm51bGxBcmdcIixcbiAgICBcImludmFsaWRBcmdcIixcbiAgICBcImludmFsaWRPcFwiLFxuICAgIFwiaWRcIixcbiAgICBcImZzdFwiLFxuICAgIFwic25kXCIsXG4gICAgXCJpZ25vcmVcIixcbiAgICBcImxvY2tcIixcbiAgICBcInVzaW5nXCIsXG4gICAgXCJib3hcIixcbiAgICBcInVuYm94XCIsXG4gICAgXCJ0cnlVbmJveFwiLFxuICAgIFwicHJpbnRmXCIsXG4gICAgXCJwcmludGZuXCIsXG4gICAgXCJzcHJpbnRmXCIsXG4gICAgXCJlcHJpbnRmXCIsXG4gICAgXCJlcHJpbnRmblwiLFxuICAgIFwiZnByaW50ZlwiLFxuICAgIFwiZnByaW50Zm5cIixcbiAgICBcImZhaWx3aXRoXCIsXG4gICAgXCJmYWlsd2l0aGZcIlxuICBdO1xuXG4gIGNvbnN0IEFMTF9LRVlXT1JEUyA9IHtcbiAgICBrZXl3b3JkOiBLRVlXT1JEUyxcbiAgICBsaXRlcmFsOiBMSVRFUkFMUyxcbiAgICBidWlsdF9pbjogQlVJTFRJTlMsXG4gICAgJ3ZhcmlhYmxlLmNvbnN0YW50JzogU1BFQ0lBTF9JREVOVElGSUVSU1xuICB9O1xuXG4gIC8vICgqIHBvdGVudGlhbGx5IG11bHRpLWxpbmUgTWV0YSBMYW5ndWFnZSBzdHlsZSBjb21tZW50ICopXG4gIGNvbnN0IE1MX0NPTU1FTlQgPVxuICAgIGhsanMuQ09NTUVOVCgvXFwoXFwqKD8hXFwpKS8sIC9cXCpcXCkvLCB7XG4gICAgICBjb250YWluczogW1wic2VsZlwiXVxuICAgIH0pO1xuICAvLyBFaXRoZXIgYSBtdWx0aS1saW5lICgqIE1ldGEgTGFuZ3VhZ2Ugc3R5bGUgY29tbWVudCAqKSBvciBhIHNpbmdsZSBsaW5lIC8vIEMgc3R5bGUgY29tbWVudC5cbiAgY29uc3QgQ09NTUVOVCA9IHtcbiAgICB2YXJpYW50czogW1xuICAgICAgTUxfQ09NTUVOVCxcbiAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICBdXG4gIH07XG5cbiAgLy8gTW9zdCBpZGVudGlmaWVycyBjYW4gY29udGFpbiBhcG9zdHJvcGhlc1xuICBjb25zdCBJREVOVElGSUVSX1JFID0gL1thLXpBLVpfXShcXHd8JykqLztcblxuICBjb25zdCBRVU9URURfSURFTlRJRklFUiA9IHtcbiAgICBzY29wZTogJ3ZhcmlhYmxlJyxcbiAgICBiZWdpbjogL2BgLyxcbiAgICBlbmQ6IC9gYC9cbiAgfTtcblxuICAvLyAnYSBvciBeYSB3aGVyZSBhIGNhbiBiZSBhIGBgcXVvdGVkIGlkZW50aWZpZXJgYFxuICBjb25zdCBCRUdJTl9HRU5FUklDX1RZUEVfU1lNQk9MX1JFID0gL1xcQignfFxcXikvO1xuICBjb25zdCBHRU5FUklDX1RZUEVfU1lNQk9MID0ge1xuICAgIHNjb3BlOiAnc3ltYm9sJyxcbiAgICB2YXJpYW50czogW1xuICAgICAgLy8gdGhlIHR5cGUgbmFtZSBpcyBhIHF1b3RlZCBpZGVudGlmaWVyOlxuICAgICAgeyBtYXRjaDogY29uY2F0KEJFR0lOX0dFTkVSSUNfVFlQRV9TWU1CT0xfUkUsIC9gYC4qP2BgLykgfSxcbiAgICAgIC8vIHRoZSB0eXBlIG5hbWUgaXMgYSBub3JtYWwgaWRlbnRpZmllciAod2UgZG9uJ3QgdXNlIElERU5USUZJRVJfUkUgYmVjYXVzZSB0aGVyZSBjYW5ub3QgYmUgYW5vdGhlciBhcG9zdHJvcGhlIGhlcmUpOlxuICAgICAgeyBtYXRjaDogY29uY2F0KEJFR0lOX0dFTkVSSUNfVFlQRV9TWU1CT0xfUkUsIGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSkgfVxuICAgIF0sXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgY29uc3QgbWFrZU9wZXJhdG9yTW9kZSA9IGZ1bmN0aW9uKHsgaW5jbHVkZUVxdWFsIH0pIHtcbiAgICAvLyBMaXN0IG9yIHN5bWJvbGljIG9wZXJhdG9yIGNoYXJhY3RlcnMgZnJvbSB0aGUgRlNoYXJwIFNwZWMgNC4xLCBtaW51cyB0aGUgZG90LCBhbmQgd2l0aCBgP2AgYWRkZWQsIHVzZWQgZm9yIG51bGxhYmxlIG9wZXJhdG9ycy5cbiAgICBsZXQgYWxsT3BlcmF0b3JDaGFycztcbiAgICBpZiAoaW5jbHVkZUVxdWFsKVxuICAgICAgYWxsT3BlcmF0b3JDaGFycyA9IFwiISUmKistLzw9PkBefH4/XCI7XG4gICAgZWxzZVxuICAgICAgYWxsT3BlcmF0b3JDaGFycyA9IFwiISUmKistLzw+QF58fj9cIjtcbiAgICBjb25zdCBPUEVSQVRPUl9DSEFSUyA9IEFycmF5LmZyb20oYWxsT3BlcmF0b3JDaGFycyk7XG4gICAgY29uc3QgT1BFUkFUT1JfQ0hBUl9SRSA9IGNvbmNhdCgnWycsIC4uLk9QRVJBVE9SX0NIQVJTLm1hcChlc2NhcGUpLCAnXScpO1xuICAgIC8vIFRoZSBsb25lIGRvdCBvcGVyYXRvciBpcyBzcGVjaWFsLiBJdCBjYW5ub3QgYmUgcmVkZWZpbmVkLCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBoaWdobGlnaHQgaXQuIEl0IGNhbiBiZSB1c2VkIGFzIHBhcnQgb2YgYSBtdWx0aS1jaGFycyBvcGVyYXRvciB0aG91Z2guXG4gICAgY29uc3QgT1BFUkFUT1JfQ0hBUl9PUl9ET1RfUkUgPSBlaXRoZXIoT1BFUkFUT1JfQ0hBUl9SRSwgL1xcLi8pO1xuICAgIC8vIFdoZW4gYSBkb3QgaXMgcHJlc2VudCwgaXQgbXVzdCBiZSBmb2xsb3dlZCBieSBhbm90aGVyIG9wZXJhdG9yIGNoYXI6XG4gICAgY29uc3QgT1BFUkFUT1JfRklSU1RfQ0hBUl9PRl9NVUxUSVBMRV9SRSA9IGNvbmNhdChPUEVSQVRPUl9DSEFSX09SX0RPVF9SRSwgbG9va2FoZWFkKE9QRVJBVE9SX0NIQVJfT1JfRE9UX1JFKSk7XG4gICAgY29uc3QgU1lNQk9MSUNfT1BFUkFUT1JfUkUgPSBlaXRoZXIoXG4gICAgICBjb25jYXQoT1BFUkFUT1JfRklSU1RfQ0hBUl9PRl9NVUxUSVBMRV9SRSwgT1BFUkFUT1JfQ0hBUl9PUl9ET1RfUkUsICcqJyksIC8vIE1hdGNoZXMgYXQgbGVhc3QgMiBjaGFycyBvcGVyYXRvcnNcbiAgICAgIGNvbmNhdChPUEVSQVRPUl9DSEFSX1JFLCAnKycpLCAvLyBNYXRjaGVzIGF0IGxlYXN0IG9uZSBjaGFyIG9wZXJhdG9yc1xuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiAnb3BlcmF0b3InLFxuICAgICAgbWF0Y2g6IGVpdGhlcihcbiAgICAgICAgLy8gc3ltYm9saWMgb3BlcmF0b3JzOlxuICAgICAgICBTWU1CT0xJQ19PUEVSQVRPUl9SRSxcbiAgICAgICAgLy8gb3RoZXIgc3ltYm9saWMga2V5d29yZHM6XG4gICAgICAgIC8vIFR5cGUgY2FzdGluZyBhbmQgY29udmVyc2lvbiBvcGVyYXRvcnM6XG4gICAgICAgIC86XFw/Pi8sXG4gICAgICAgIC86XFw/LyxcbiAgICAgICAgLzo+LyxcbiAgICAgICAgLzo9LywgLy8gUmVmZXJlbmNlIGNlbGwgYXNzaWdubWVudFxuICAgICAgICAvOjo/LywgLy8gOiBvciA6OlxuICAgICAgICAvXFwkLyksIC8vIEEgc2luZ2xlICQgY2FuIGJlIHVzZWQgYXMgYW4gb3BlcmF0b3JcbiAgICAgIHJlbGV2YW5jZTogMFxuICAgIH07XG4gIH07XG5cbiAgY29uc3QgT1BFUkFUT1IgPSBtYWtlT3BlcmF0b3JNb2RlKHsgaW5jbHVkZUVxdWFsOiB0cnVlIH0pO1xuICAvLyBUaGlzIHZhcmlhbnQgaXMgdXNlZCB3aGVuIG1hdGNoaW5nICc9JyBzaG91bGQgZW5kIGEgcGFyZW50IG1vZGU6XG4gIGNvbnN0IE9QRVJBVE9SX1dJVEhPVVRfRVFVQUwgPSBtYWtlT3BlcmF0b3JNb2RlKHsgaW5jbHVkZUVxdWFsOiBmYWxzZSB9KTtcblxuICBjb25zdCBtYWtlVHlwZUFubm90YXRpb25Nb2RlID0gZnVuY3Rpb24ocHJlZml4LCBwcmVmaXhTY29wZSkge1xuICAgIHJldHVybiB7XG4gICAgICBiZWdpbjogY29uY2F0KCAvLyBhIHR5cGUgYW5ub3RhdGlvbiBpcyBhXG4gICAgICAgIHByZWZpeCwgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb2xvbiBvciB0aGUgJ29mJyBrZXl3b3JkXG4gICAgICAgIGxvb2thaGVhZCggICAvLyB0aGF0IGhhcyB0byBiZSBmb2xsb3dlZCBieVxuICAgICAgICAgIGNvbmNhdChcbiAgICAgICAgICAgIC9cXHMqLywgICAgICAgICAvLyBvcHRpb25hbCBzcGFjZVxuICAgICAgICAgICAgZWl0aGVyKCAgLy8gdGhlbiBlaXRoZXIgb2Y6XG4gICAgICAgICAgICAgIC9cXHcvLCAgICAgICAgLy8gd29yZFxuICAgICAgICAgICAgICAvJy8sICAgICAgICAgLy8gZ2VuZXJpYyB0eXBlIG5hbWVcbiAgICAgICAgICAgICAgL1xcXi8sICAgICAgICAvLyBnZW5lcmljIHR5cGUgbmFtZVxuICAgICAgICAgICAgICAvIy8sICAgICAgICAgLy8gZmxleGlibGUgdHlwZSBuYW1lXG4gICAgICAgICAgICAgIC9gYC8sICAgICAgICAvLyBxdW90ZWQgdHlwZSBuYW1lXG4gICAgICAgICAgICAgIC9cXCgvLCAgICAgICAgLy8gcGFyZW5zIHR5cGUgZXhwcmVzc2lvblxuICAgICAgICAgICAgICAve1xcfC8sICAgICAgIC8vIGFub255bW91cyB0eXBlIGFubm90YXRpb25cbiAgICAgICkpKSksXG4gICAgICBiZWdpblNjb3BlOiBwcmVmaXhTY29wZSxcbiAgICAgIC8vIEJVRzogYmVjYXVzZSBlbmRpbmcgd2l0aCBcXG4gaXMgbmVjZXNzYXJ5IGZvciBzb21lIGNhc2VzLCBtdWx0aS1saW5lIHR5cGUgYW5ub3RhdGlvbnMgYXJlIG5vdCBwcm9wZXJseSBzdXBwb3J0ZWQuXG4gICAgICAvLyBFeGFtcGxlcyB3aGVyZSBcXG4gaXMgcmVxdWlyZWQgYXQgdGhlIGVuZDpcbiAgICAgIC8vIC0gYWJzdHJhY3QgbWVtYmVyIGRlZmluaXRpb25zIGluIGNsYXNzZXM6IGFic3RyYWN0IFByb3BlcnR5IDogaW50ICogc3RyaW5nXG4gICAgICAvLyAtIHJldHVybiB0eXBlIGFubm90YXRpb25zOiBsZXQgZiBmJyA9IGYnICgpIDogcmV0dXJuVHlwZUFubm90YXRpb25cbiAgICAgIC8vIC0gcmVjb3JkIGZpZWxkcyBkZWZpbml0aW9uczogeyBBIDogaW50IFxcbiBCIDogc3RyaW5nIH1cbiAgICAgIGVuZDogbG9va2FoZWFkKFxuICAgICAgICBlaXRoZXIoXG4gICAgICAgICAgL1xcbi8sXG4gICAgICAgICAgLz0vKSksXG4gICAgICByZWxldmFuY2U6IDAsXG4gICAgICAvLyB3ZSBuZWVkIHRoZSBrbm93biB0eXBlcywgYW5kIHdlIG5lZWQgdGhlIHR5cGUgY29uc3RyYWludCBrZXl3b3JkcyBhbmQgbGl0ZXJhbHMuIGUuZy46IHdoZW4gJ2EgOiBudWxsXG4gICAgICBrZXl3b3JkczogaGxqcy5pbmhlcml0KEFMTF9LRVlXT1JEUywgeyB0eXBlOiBLTk9XTl9UWVBFUyB9KSxcbiAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgIENPTU1FTlQsXG4gICAgICAgIEdFTkVSSUNfVFlQRV9TWU1CT0wsXG4gICAgICAgIGhsanMuaW5oZXJpdChRVU9URURfSURFTlRJRklFUiwgeyBzY29wZTogbnVsbCB9KSwgLy8gbWF0Y2ggdG8gYXZvaWQgc3RyYW5nZSBwYXR0ZXJucyBpbnNpZGUgdGhhdCBtYXkgYnJlYWsgdGhlIHBhcnNpbmdcbiAgICAgICAgT1BFUkFUT1JfV0lUSE9VVF9FUVVBTFxuICAgICAgXVxuICAgIH07XG4gIH07XG5cbiAgY29uc3QgVFlQRV9BTk5PVEFUSU9OID0gbWFrZVR5cGVBbm5vdGF0aW9uTW9kZSgvOi8sICdvcGVyYXRvcicpO1xuICBjb25zdCBESVNDUklNSU5BVEVEX1VOSU9OX1RZUEVfQU5OT1RBVElPTiA9IG1ha2VUeXBlQW5ub3RhdGlvbk1vZGUoL1xcYm9mXFxiLywgJ2tleXdvcmQnKTtcblxuICAvLyB0eXBlIE15VHlwZTwnYT4gPSAuLi5cbiAgY29uc3QgVFlQRV9ERUNMQVJBVElPTiA9IHtcbiAgICBiZWdpbjogW1xuICAgICAgLyhefFxccyspLywgLy8gcHJldmVudHMgbWF0Y2hpbmcgdGhlIGZvbGxvd2luZzogYG1hdGNoIHMuc3R5cGUgd2l0aGBcbiAgICAgIC90eXBlLyxcbiAgICAgIC9cXHMrLyxcbiAgICAgIElERU5USUZJRVJfUkVcbiAgICBdLFxuICAgIGJlZ2luU2NvcGU6IHtcbiAgICAgIDI6ICdrZXl3b3JkJyxcbiAgICAgIDQ6ICd0aXRsZS5jbGFzcydcbiAgICB9LFxuICAgIGVuZDogbG9va2FoZWFkKC9cXCh8PXwkLyksXG4gICAga2V5d29yZHM6IEFMTF9LRVlXT1JEUywgLy8gbWF0Y2gga2V5d29yZHMgaW4gdHlwZSBjb25zdHJhaW50cy4gZS5nLjogd2hlbiAnYSA6IG51bGxcbiAgICBjb250YWluczogW1xuICAgICAgQ09NTUVOVCxcbiAgICAgIGhsanMuaW5oZXJpdChRVU9URURfSURFTlRJRklFUiwgeyBzY29wZTogbnVsbCB9KSwgLy8gbWF0Y2ggdG8gYXZvaWQgc3RyYW5nZSBwYXR0ZXJucyBpbnNpZGUgdGhhdCBtYXkgYnJlYWsgdGhlIHBhcnNpbmdcbiAgICAgIEdFTkVSSUNfVFlQRV9TWU1CT0wsXG4gICAgICB7XG4gICAgICAgIC8vIEZvciB2aXN1YWwgY29uc2lzdGVuY3ksIGhpZ2hsaWdodCB0eXBlIGJyYWNrZXRzIGFzIG9wZXJhdG9ycy5cbiAgICAgICAgc2NvcGU6ICdvcGVyYXRvcicsXG4gICAgICAgIG1hdGNoOiAvPHw+L1xuICAgICAgfSxcbiAgICAgIFRZUEVfQU5OT1RBVElPTiAvLyBnZW5lcmljIHR5cGVzIGNhbiBoYXZlIGNvbnN0cmFpbnRzLCB3aGljaCBhcmUgdHlwZSBhbm5vdGF0aW9ucy4gZS5nLiB0eXBlIE15VHlwZTwnVCB3aGVuICdUIDogZGVsZWdhdGU8b2JqICogc3RyaW5nPj4gPVxuICAgIF1cbiAgfTtcblxuICBjb25zdCBDT01QVVRBVElPTl9FWFBSRVNTSU9OID0ge1xuICAgIC8vIGNvbXB1dGF0aW9uIGV4cHJlc3Npb25zOlxuICAgIHNjb3BlOiAnY29tcHV0YXRpb24tZXhwcmVzc2lvbicsXG4gICAgLy8gQlVHOiBtaWdodCBjb25mbGljdCB3aXRoIHJlY29yZCBkZWNvbnN0cnVjdGlvbi4gZS5nLiBsZXQgZiB7IE5hbWUgPSBuYW1lIH0gPSBuYW1lIC8vIHdpbGwgaGlnaGxpZ2h0IGZcbiAgICBtYXRjaDogL1xcYltfYS16XVxcdyooPz1cXHMqXFx7KS9cbiAgfTtcblxuICBjb25zdCBQUkVQUk9DRVNTT1IgPSB7XG4gICAgLy8gcHJlcHJvY2Vzc29yIGRpcmVjdGl2ZXMgYW5kIGZzaSBjb21tYW5kczpcbiAgICBiZWdpbjogW1xuICAgICAgL15cXHMqLyxcbiAgICAgIGNvbmNhdCgvIy8sIGVpdGhlciguLi5QUkVQUk9DRVNTT1JfS0VZV09SRFMpKSxcbiAgICAgIC9cXGIvXG4gICAgXSxcbiAgICBiZWdpblNjb3BlOiB7IDI6ICdtZXRhJyB9LFxuICAgIGVuZDogbG9va2FoZWFkKC9cXHN8JC8pXG4gIH07XG5cbiAgLy8gVE9ETzogdGhpcyBkZWZpbml0aW9uIGlzIG1pc3Npbmcgc3VwcG9ydCBmb3IgdHlwZSBzdWZmaXhlcyBhbmQgb2N0YWwgbm90YXRpb24uXG4gIC8vIEJVRzogcmFuZ2Ugb3BlcmF0b3Igd2l0aG91dCBhbnkgc3BhY2UgaXMgd3JvbmdseSBpbnRlcnByZXRlZCBhcyBhIHNpbmdsZSBudW1iZXIgKGUuZy4gMS4uMTAgKVxuICBjb25zdCBOVU1CRVIgPSB7XG4gICAgdmFyaWFudHM6IFtcbiAgICAgIGhsanMuQklOQVJZX05VTUJFUl9NT0RFLFxuICAgICAgaGxqcy5DX05VTUJFUl9NT0RFXG4gICAgXVxuICB9O1xuXG4gIC8vIEFsbCB0aGUgZm9sbG93aW5nIHN0cmluZyBkZWZpbml0aW9ucyBhcmUgcG90ZW50aWFsbHkgbXVsdGktbGluZS5cbiAgLy8gQlVHOiB0aGVzZSBkZWZpbml0aW9ucyBhcmUgbWlzc2luZyBzdXBwb3J0IGZvciBieXRlIHN0cmluZ3MgKHN1ZmZpeGVkIHdpdGggQilcblxuICAvLyBcIi4uLlwiXG4gIGNvbnN0IFFVT1RFRF9TVFJJTkcgPSB7XG4gICAgc2NvcGU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvXCIvLFxuICAgIGVuZDogL1wiLyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFXG4gICAgXVxuICB9O1xuICAvLyBAXCIuLi5cIlxuICBjb25zdCBWRVJCQVRJTV9TVFJJTkcgPSB7XG4gICAgc2NvcGU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvQFwiLyxcbiAgICBlbmQ6IC9cIi8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgbWF0Y2g6IC9cIlwiLyAvLyBlc2NhcGVkIFwiXG4gICAgICB9LFxuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFXG4gICAgXVxuICB9O1xuICAvLyBcIlwiXCIuLi5cIlwiXCJcbiAgY29uc3QgVFJJUExFX1FVT1RFRF9TVFJJTkcgPSB7XG4gICAgc2NvcGU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvXCJcIlwiLyxcbiAgICBlbmQ6IC9cIlwiXCIvLFxuICAgIHJlbGV2YW5jZTogMlxuICB9O1xuICBjb25zdCBTVUJTVCA9IHtcbiAgICBzY29wZTogJ3N1YnN0JyxcbiAgICBiZWdpbjogL1xcey8sXG4gICAgZW5kOiAvXFx9LyxcbiAgICBrZXl3b3JkczogQUxMX0tFWVdPUkRTXG4gIH07XG4gIC8vICRcIi4uLnsxKzF9Li4uXCJcbiAgY29uc3QgSU5URVJQT0xBVEVEX1NUUklORyA9IHtcbiAgICBzY29wZTogJ3N0cmluZycsXG4gICAgYmVnaW46IC9cXCRcIi8sXG4gICAgZW5kOiAvXCIvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIG1hdGNoOiAvXFx7XFx7LyAvLyBlc2NhcGVkIHtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1hdGNoOiAvXFx9XFx9LyAvLyBlc2NhcGVkIH1cbiAgICAgIH0sXG4gICAgICBobGpzLkJBQ0tTTEFTSF9FU0NBUEUsXG4gICAgICBTVUJTVFxuICAgIF1cbiAgfTtcbiAgLy8gJEBcIi4uLnsxKzF9Li4uXCJcbiAgY29uc3QgSU5URVJQT0xBVEVEX1ZFUkJBVElNX1NUUklORyA9IHtcbiAgICBzY29wZTogJ3N0cmluZycsXG4gICAgYmVnaW46IC8oXFwkQHxAXFwkKVwiLyxcbiAgICBlbmQ6IC9cIi8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgbWF0Y2g6IC9cXHtcXHsvIC8vIGVzY2FwZWQge1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWF0Y2g6IC9cXH1cXH0vIC8vIGVzY2FwZWQgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWF0Y2g6IC9cIlwiL1xuICAgICAgfSxcbiAgICAgIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSxcbiAgICAgIFNVQlNUXG4gICAgXVxuICB9O1xuICAvLyAkXCJcIlwiLi4uezErMX0uLi5cIlwiXCJcbiAgY29uc3QgSU5URVJQT0xBVEVEX1RSSVBMRV9RVU9URURfU1RSSU5HID0ge1xuICAgIHNjb3BlOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1xcJFwiXCJcIi8sXG4gICAgZW5kOiAvXCJcIlwiLyxcbiAgICBjb250YWluczogW1xuICAgICAge1xuICAgICAgICBtYXRjaDogL1xce1xcey8gLy8gZXNjYXBlZCB7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtYXRjaDogL1xcfVxcfS8gLy8gZXNjYXBlZCB9XG4gICAgICB9LFxuICAgICAgU1VCU1RcbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMlxuICB9O1xuICAvLyAnLidcbiAgY29uc3QgQ0hBUl9MSVRFUkFMID0ge1xuICAgIHNjb3BlOiAnc3RyaW5nJyxcbiAgICBtYXRjaDogY29uY2F0KFxuICAgICAgLycvLFxuICAgICAgZWl0aGVyKFxuICAgICAgICAvW15cXFxcJ10vLCAvLyBlaXRoZXIgYSBzaW5nbGUgbm9uIGVzY2FwZWQgY2hhci4uLlxuICAgICAgICAvXFxcXCg/Oi58XFxkezN9fHhbYS1mQS1GXFxkXXsyfXx1W2EtZkEtRlxcZF17NH18VVthLWZBLUZcXGRdezh9KS8gLy8gLi4ub3IgYW4gZXNjYXBlIHNlcXVlbmNlXG4gICAgICApLFxuICAgICAgLycvXG4gICAgKVxuICB9O1xuICAvLyBGIyBhbGxvd3MgYSBsb3Qgb2YgdGhpbmdzIGluc2lkZSBzdHJpbmcgcGxhY2Vob2xkZXJzLlxuICAvLyBUaGluZ3MgdGhhdCBkb24ndCBjdXJyZW50bHkgc2VlbSBhbGxvd2VkIGJ5IHRoZSBjb21waWxlcjogdHlwZXMgZGVmaW5pdGlvbiwgYXR0cmlidXRlcyB1c2FnZS5cbiAgLy8gKFN0cmljdGx5IHNwZWFraW5nLCBzb21lIG9mIHRoZSBmb2xsb3dpbmdzIGFyZSBvbmx5IGFsbG93ZWQgaW5zaWRlIHRyaXBsZSBxdW90ZWQgaW50ZXJwb2xhdGVkIHN0cmluZ3MuLi4pXG4gIFNVQlNULmNvbnRhaW5zID0gW1xuICAgIElOVEVSUE9MQVRFRF9WRVJCQVRJTV9TVFJJTkcsXG4gICAgSU5URVJQT0xBVEVEX1NUUklORyxcbiAgICBWRVJCQVRJTV9TVFJJTkcsXG4gICAgUVVPVEVEX1NUUklORyxcbiAgICBDSEFSX0xJVEVSQUwsXG4gICAgQkFOR19LRVlXT1JEX01PREUsXG4gICAgQ09NTUVOVCxcbiAgICBRVU9URURfSURFTlRJRklFUixcbiAgICBUWVBFX0FOTk9UQVRJT04sXG4gICAgQ09NUFVUQVRJT05fRVhQUkVTU0lPTixcbiAgICBQUkVQUk9DRVNTT1IsXG4gICAgTlVNQkVSLFxuICAgIEdFTkVSSUNfVFlQRV9TWU1CT0wsXG4gICAgT1BFUkFUT1JcbiAgXTtcbiAgY29uc3QgU1RSSU5HID0ge1xuICAgIHZhcmlhbnRzOiBbXG4gICAgICBJTlRFUlBPTEFURURfVFJJUExFX1FVT1RFRF9TVFJJTkcsXG4gICAgICBJTlRFUlBPTEFURURfVkVSQkFUSU1fU1RSSU5HLFxuICAgICAgSU5URVJQT0xBVEVEX1NUUklORyxcbiAgICAgIFRSSVBMRV9RVU9URURfU1RSSU5HLFxuICAgICAgVkVSQkFUSU1fU1RSSU5HLFxuICAgICAgUVVPVEVEX1NUUklORyxcbiAgICAgIENIQVJfTElURVJBTFxuICAgIF1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdGIycsXG4gICAgYWxpYXNlczogW1xuICAgICAgJ2ZzJyxcbiAgICAgICdmIydcbiAgICBdLFxuICAgIGtleXdvcmRzOiBBTExfS0VZV09SRFMsXG4gICAgaWxsZWdhbDogL1xcL1xcKi8sXG4gICAgY2xhc3NOYW1lQWxpYXNlczoge1xuICAgICAgJ2NvbXB1dGF0aW9uLWV4cHJlc3Npb24nOiAna2V5d29yZCdcbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBCQU5HX0tFWVdPUkRfTU9ERSxcbiAgICAgIFNUUklORyxcbiAgICAgIENPTU1FTlQsXG4gICAgICBRVU9URURfSURFTlRJRklFUixcbiAgICAgIFRZUEVfREVDTEFSQVRJT04sXG4gICAgICB7XG4gICAgICAgIC8vIGUuZy4gWzxBdHRyaWJ1dGVzKFwiXCIpPl0gb3IgWzxgYG1vZHVsZWBgOiBNeUN1c3RvbUF0dHJpYnV0ZVRoYXRXb3Jrc09uTW9kdWxlcz5dXG4gICAgICAgIC8vIG9yIFs8U2VhbGVkOyBOb0VxdWFsaXR5OyBOb0NvbXBhcmlzb247IENvbXBpbGVkTmFtZShcIkZTaGFycEFzeW5jYDFcIik+XVxuICAgICAgICBzY29wZTogJ21ldGEnLFxuICAgICAgICBiZWdpbjogL1xcWzwvLFxuICAgICAgICBlbmQ6IC8+XFxdLyxcbiAgICAgICAgcmVsZXZhbmNlOiAyLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIFFVT1RFRF9JREVOVElGSUVSLFxuICAgICAgICAgIC8vIGNhbiBjb250YWluIGFueSBjb25zdGFudCB2YWx1ZVxuICAgICAgICAgIFRSSVBMRV9RVU9URURfU1RSSU5HLFxuICAgICAgICAgIFZFUkJBVElNX1NUUklORyxcbiAgICAgICAgICBRVU9URURfU1RSSU5HLFxuICAgICAgICAgIENIQVJfTElURVJBTCxcbiAgICAgICAgICBOVU1CRVJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIERJU0NSSU1JTkFURURfVU5JT05fVFlQRV9BTk5PVEFUSU9OLFxuICAgICAgVFlQRV9BTk5PVEFUSU9OLFxuICAgICAgQ09NUFVUQVRJT05fRVhQUkVTU0lPTixcbiAgICAgIFBSRVBST0NFU1NPUixcbiAgICAgIE5VTUJFUixcbiAgICAgIEdFTkVSSUNfVFlQRV9TWU1CT0wsXG4gICAgICBPUEVSQVRPUlxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgZnNoYXJwIGFzIGRlZmF1bHQgfTtcbiJdfQ==