function vbscript(hljs) {
    const regex = hljs.regex;
    const BUILT_IN_FUNCTIONS = [
        "lcase",
        "month",
        "vartype",
        "instrrev",
        "ubound",
        "setlocale",
        "getobject",
        "rgb",
        "getref",
        "string",
        "weekdayname",
        "rnd",
        "dateadd",
        "monthname",
        "now",
        "day",
        "minute",
        "isarray",
        "cbool",
        "round",
        "formatcurrency",
        "conversions",
        "csng",
        "timevalue",
        "second",
        "year",
        "space",
        "abs",
        "clng",
        "timeserial",
        "fixs",
        "len",
        "asc",
        "isempty",
        "maths",
        "dateserial",
        "atn",
        "timer",
        "isobject",
        "filter",
        "weekday",
        "datevalue",
        "ccur",
        "isdate",
        "instr",
        "datediff",
        "formatdatetime",
        "replace",
        "isnull",
        "right",
        "sgn",
        "array",
        "snumeric",
        "log",
        "cdbl",
        "hex",
        "chr",
        "lbound",
        "msgbox",
        "ucase",
        "getlocale",
        "cos",
        "cdate",
        "cbyte",
        "rtrim",
        "join",
        "hour",
        "oct",
        "typename",
        "trim",
        "strcomp",
        "int",
        "createobject",
        "loadpicture",
        "tan",
        "formatnumber",
        "mid",
        "split",
        "cint",
        "sin",
        "datepart",
        "ltrim",
        "sqr",
        "time",
        "derived",
        "eval",
        "date",
        "formatpercent",
        "exp",
        "inputbox",
        "left",
        "ascw",
        "chrw",
        "regexp",
        "cstr",
        "err"
    ];
    const BUILT_IN_OBJECTS = [
        "server",
        "response",
        "request",
        "scriptengine",
        "scriptenginebuildversion",
        "scriptengineminorversion",
        "scriptenginemajorversion"
    ];
    const BUILT_IN_CALL = {
        begin: regex.concat(regex.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
        relevance: 0,
        keywords: { built_in: BUILT_IN_FUNCTIONS }
    };
    const LITERALS = [
        "true",
        "false",
        "null",
        "nothing",
        "empty"
    ];
    const KEYWORDS = [
        "call",
        "class",
        "const",
        "dim",
        "do",
        "loop",
        "erase",
        "execute",
        "executeglobal",
        "exit",
        "for",
        "each",
        "next",
        "function",
        "if",
        "then",
        "else",
        "on",
        "error",
        "option",
        "explicit",
        "new",
        "private",
        "property",
        "let",
        "get",
        "public",
        "randomize",
        "redim",
        "rem",
        "select",
        "case",
        "set",
        "stop",
        "sub",
        "while",
        "wend",
        "with",
        "end",
        "to",
        "elseif",
        "is",
        "or",
        "xor",
        "and",
        "not",
        "class_initialize",
        "class_terminate",
        "default",
        "preserve",
        "in",
        "me",
        "byval",
        "byref",
        "step",
        "resume",
        "goto"
    ];
    return {
        name: 'VBScript',
        aliases: ['vbs'],
        case_insensitive: true,
        keywords: {
            keyword: KEYWORDS,
            built_in: BUILT_IN_OBJECTS,
            literal: LITERALS
        },
        illegal: '//',
        contains: [
            BUILT_IN_CALL,
            hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
            hljs.COMMENT(/'/, /$/, { relevance: 0 }),
            hljs.C_NUMBER_MODE
        ]
    };
}
export { vbscript as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmJzY3JpcHQuanMiLCJzb3VyY2VSb290IjoiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JlbGxDdWJlRGV2L3NpdGUtdGVzdGluZy9kZXBsb3ltZW50LyIsInNvdXJjZXMiOlsiYXNzZXRzL3NpdGUvaGlnaGxpZ2h0X2pzL2xhbmd1YWdlcy92YnNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQSxTQUFTLFFBQVEsQ0FBQyxJQUFJO0lBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekIsTUFBTSxrQkFBa0IsR0FBRztRQUN6QixPQUFPO1FBQ1AsT0FBTztRQUNQLFNBQVM7UUFDVCxVQUFVO1FBQ1YsUUFBUTtRQUNSLFdBQVc7UUFDWCxXQUFXO1FBQ1gsS0FBSztRQUNMLFFBQVE7UUFDUixRQUFRO1FBQ1IsYUFBYTtRQUNiLEtBQUs7UUFDTCxTQUFTO1FBQ1QsV0FBVztRQUNYLEtBQUs7UUFDTCxLQUFLO1FBQ0wsUUFBUTtRQUNSLFNBQVM7UUFDVCxPQUFPO1FBQ1AsT0FBTztRQUNQLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IsTUFBTTtRQUNOLFdBQVc7UUFDWCxRQUFRO1FBQ1IsTUFBTTtRQUNOLE9BQU87UUFDUCxLQUFLO1FBQ0wsTUFBTTtRQUNOLFlBQVk7UUFDWixNQUFNO1FBQ04sS0FBSztRQUNMLEtBQUs7UUFDTCxTQUFTO1FBQ1QsT0FBTztRQUNQLFlBQVk7UUFDWixLQUFLO1FBQ0wsT0FBTztRQUNQLFVBQVU7UUFDVixRQUFRO1FBQ1IsU0FBUztRQUNULFdBQVc7UUFDWCxNQUFNO1FBQ04sUUFBUTtRQUNSLE9BQU87UUFDUCxVQUFVO1FBQ1YsZ0JBQWdCO1FBQ2hCLFNBQVM7UUFDVCxRQUFRO1FBQ1IsT0FBTztRQUNQLEtBQUs7UUFDTCxPQUFPO1FBQ1AsVUFBVTtRQUNWLEtBQUs7UUFDTCxNQUFNO1FBQ04sS0FBSztRQUNMLEtBQUs7UUFDTCxRQUFRO1FBQ1IsUUFBUTtRQUNSLE9BQU87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T0FBTyxFQUFFLFFBQVEsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogVkJTY3JpcHRcbkRlc2NyaXB0aW9uOiBWQlNjcmlwdCAoXCJNaWNyb3NvZnQgVmlzdWFsIEJhc2ljIFNjcmlwdGluZyBFZGl0aW9uXCIpIGlzIGFuIEFjdGl2ZSBTY3JpcHRpbmcgbGFuZ3VhZ2UgZGV2ZWxvcGVkIGJ5IE1pY3Jvc29mdCB0aGF0IGlzIG1vZGVsZWQgb24gVmlzdWFsIEJhc2ljLlxuQXV0aG9yOiBOaWtpdGEgTGVkeWFldiA8bGVuaWtpdGFAeWFuZGV4LnJ1PlxuQ29udHJpYnV0b3JzOiBNaWNoYWwgR2FicnVraWV3aWN6IDxtZ2FicnVAZ21haWwuY29tPlxuV2Vic2l0ZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVkJTY3JpcHRcbkNhdGVnb3J5OiBzY3JpcHRpbmdcbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiB2YnNjcmlwdChobGpzKSB7XG4gIGNvbnN0IHJlZ2V4ID0gaGxqcy5yZWdleDtcbiAgY29uc3QgQlVJTFRfSU5fRlVOQ1RJT05TID0gW1xuICAgIFwibGNhc2VcIixcbiAgICBcIm1vbnRoXCIsXG4gICAgXCJ2YXJ0eXBlXCIsXG4gICAgXCJpbnN0cnJldlwiLFxuICAgIFwidWJvdW5kXCIsXG4gICAgXCJzZXRsb2NhbGVcIixcbiAgICBcImdldG9iamVjdFwiLFxuICAgIFwicmdiXCIsXG4gICAgXCJnZXRyZWZcIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwid2Vla2RheW5hbWVcIixcbiAgICBcInJuZFwiLFxuICAgIFwiZGF0ZWFkZFwiLFxuICAgIFwibW9udGhuYW1lXCIsXG4gICAgXCJub3dcIixcbiAgICBcImRheVwiLFxuICAgIFwibWludXRlXCIsXG4gICAgXCJpc2FycmF5XCIsXG4gICAgXCJjYm9vbFwiLFxuICAgIFwicm91bmRcIixcbiAgICBcImZvcm1hdGN1cnJlbmN5XCIsXG4gICAgXCJjb252ZXJzaW9uc1wiLFxuICAgIFwiY3NuZ1wiLFxuICAgIFwidGltZXZhbHVlXCIsXG4gICAgXCJzZWNvbmRcIixcbiAgICBcInllYXJcIixcbiAgICBcInNwYWNlXCIsXG4gICAgXCJhYnNcIixcbiAgICBcImNsbmdcIixcbiAgICBcInRpbWVzZXJpYWxcIixcbiAgICBcImZpeHNcIixcbiAgICBcImxlblwiLFxuICAgIFwiYXNjXCIsXG4gICAgXCJpc2VtcHR5XCIsXG4gICAgXCJtYXRoc1wiLFxuICAgIFwiZGF0ZXNlcmlhbFwiLFxuICAgIFwiYXRuXCIsXG4gICAgXCJ0aW1lclwiLFxuICAgIFwiaXNvYmplY3RcIixcbiAgICBcImZpbHRlclwiLFxuICAgIFwid2Vla2RheVwiLFxuICAgIFwiZGF0ZXZhbHVlXCIsXG4gICAgXCJjY3VyXCIsXG4gICAgXCJpc2RhdGVcIixcbiAgICBcImluc3RyXCIsXG4gICAgXCJkYXRlZGlmZlwiLFxuICAgIFwiZm9ybWF0ZGF0ZXRpbWVcIixcbiAgICBcInJlcGxhY2VcIixcbiAgICBcImlzbnVsbFwiLFxuICAgIFwicmlnaHRcIixcbiAgICBcInNnblwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcInNudW1lcmljXCIsXG4gICAgXCJsb2dcIixcbiAgICBcImNkYmxcIixcbiAgICBcImhleFwiLFxuICAgIFwiY2hyXCIsXG4gICAgXCJsYm91bmRcIixcbiAgICBcIm1zZ2JveFwiLFxuICAgIFwidWNhc2VcIixcbiAgICBcImdldGxvY2FsZVwiLFxuICAgIFwiY29zXCIsXG4gICAgXCJjZGF0ZVwiLFxuICAgIFwiY2J5dGVcIixcbiAgICBcInJ0cmltXCIsXG4gICAgXCJqb2luXCIsXG4gICAgXCJob3VyXCIsXG4gICAgXCJvY3RcIixcbiAgICBcInR5cGVuYW1lXCIsXG4gICAgXCJ0cmltXCIsXG4gICAgXCJzdHJjb21wXCIsXG4gICAgXCJpbnRcIixcbiAgICBcImNyZWF0ZW9iamVjdFwiLFxuICAgIFwibG9hZHBpY3R1cmVcIixcbiAgICBcInRhblwiLFxuICAgIFwiZm9ybWF0bnVtYmVyXCIsXG4gICAgXCJtaWRcIixcbiAgICBcInNwbGl0XCIsXG4gICAgXCJjaW50XCIsXG4gICAgXCJzaW5cIixcbiAgICBcImRhdGVwYXJ0XCIsXG4gICAgXCJsdHJpbVwiLFxuICAgIFwic3FyXCIsXG4gICAgXCJ0aW1lXCIsXG4gICAgXCJkZXJpdmVkXCIsXG4gICAgXCJldmFsXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJmb3JtYXRwZXJjZW50XCIsXG4gICAgXCJleHBcIixcbiAgICBcImlucHV0Ym94XCIsXG4gICAgXCJsZWZ0XCIsXG4gICAgXCJhc2N3XCIsXG4gICAgXCJjaHJ3XCIsXG4gICAgXCJyZWdleHBcIixcbiAgICBcImNzdHJcIixcbiAgICBcImVyclwiXG4gIF07XG4gIGNvbnN0IEJVSUxUX0lOX09CSkVDVFMgPSBbXG4gICAgXCJzZXJ2ZXJcIixcbiAgICBcInJlc3BvbnNlXCIsXG4gICAgXCJyZXF1ZXN0XCIsXG4gICAgLy8gdGFrZSBubyBhcmd1bWVudHMgc28gY2FuIGJlIGNhbGxlZCB3aXRob3V0ICgpXG4gICAgXCJzY3JpcHRlbmdpbmVcIixcbiAgICBcInNjcmlwdGVuZ2luZWJ1aWxkdmVyc2lvblwiLFxuICAgIFwic2NyaXB0ZW5naW5lbWlub3J2ZXJzaW9uXCIsXG4gICAgXCJzY3JpcHRlbmdpbmVtYWpvcnZlcnNpb25cIlxuICBdO1xuXG4gIGNvbnN0IEJVSUxUX0lOX0NBTEwgPSB7XG4gICAgYmVnaW46IHJlZ2V4LmNvbmNhdChyZWdleC5laXRoZXIoLi4uQlVJTFRfSU5fRlVOQ1RJT05TKSwgXCJcXFxccypcXFxcKFwiKSxcbiAgICAvLyByZWxldmFuY2UgMCBiZWNhdXNlIHRoaXMgaXMgYWN0aW5nIGFzIGEgYmVnaW5LZXl3b3JkcyByZWFsbHlcbiAgICByZWxldmFuY2U6IDAsXG4gICAga2V5d29yZHM6IHsgYnVpbHRfaW46IEJVSUxUX0lOX0ZVTkNUSU9OUyB9XG4gIH07XG5cbiAgY29uc3QgTElURVJBTFMgPSBbXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwibnVsbFwiLFxuICAgIFwibm90aGluZ1wiLFxuICAgIFwiZW1wdHlcIlxuICBdO1xuXG4gIGNvbnN0IEtFWVdPUkRTID0gW1xuICAgIFwiY2FsbFwiLFxuICAgIFwiY2xhc3NcIixcbiAgICBcImNvbnN0XCIsXG4gICAgXCJkaW1cIixcbiAgICBcImRvXCIsXG4gICAgXCJsb29wXCIsXG4gICAgXCJlcmFzZVwiLFxuICAgIFwiZXhlY3V0ZVwiLFxuICAgIFwiZXhlY3V0ZWdsb2JhbFwiLFxuICAgIFwiZXhpdFwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJlYWNoXCIsXG4gICAgXCJuZXh0XCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwiaWZcIixcbiAgICBcInRoZW5cIixcbiAgICBcImVsc2VcIixcbiAgICBcIm9uXCIsXG4gICAgXCJlcnJvclwiLFxuICAgIFwib3B0aW9uXCIsXG4gICAgXCJleHBsaWNpdFwiLFxuICAgIFwibmV3XCIsXG4gICAgXCJwcml2YXRlXCIsXG4gICAgXCJwcm9wZXJ0eVwiLFxuICAgIFwibGV0XCIsXG4gICAgXCJnZXRcIixcbiAgICBcInB1YmxpY1wiLFxuICAgIFwicmFuZG9taXplXCIsXG4gICAgXCJyZWRpbVwiLFxuICAgIFwicmVtXCIsXG4gICAgXCJzZWxlY3RcIixcbiAgICBcImNhc2VcIixcbiAgICBcInNldFwiLFxuICAgIFwic3RvcFwiLFxuICAgIFwic3ViXCIsXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwid2VuZFwiLFxuICAgIFwid2l0aFwiLFxuICAgIFwiZW5kXCIsXG4gICAgXCJ0b1wiLFxuICAgIFwiZWxzZWlmXCIsXG4gICAgXCJpc1wiLFxuICAgIFwib3JcIixcbiAgICBcInhvclwiLFxuICAgIFwiYW5kXCIsXG4gICAgXCJub3RcIixcbiAgICBcImNsYXNzX2luaXRpYWxpemVcIixcbiAgICBcImNsYXNzX3Rlcm1pbmF0ZVwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwicHJlc2VydmVcIixcbiAgICBcImluXCIsXG4gICAgXCJtZVwiLFxuICAgIFwiYnl2YWxcIixcbiAgICBcImJ5cmVmXCIsXG4gICAgXCJzdGVwXCIsXG4gICAgXCJyZXN1bWVcIixcbiAgICBcImdvdG9cIlxuICBdO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1ZCU2NyaXB0JyxcbiAgICBhbGlhc2VzOiBbICd2YnMnIF0sXG4gICAgY2FzZV9pbnNlbnNpdGl2ZTogdHJ1ZSxcbiAgICBrZXl3b3Jkczoge1xuICAgICAga2V5d29yZDogS0VZV09SRFMsXG4gICAgICBidWlsdF9pbjogQlVJTFRfSU5fT0JKRUNUUyxcbiAgICAgIGxpdGVyYWw6IExJVEVSQUxTXG4gICAgfSxcbiAgICBpbGxlZ2FsOiAnLy8nLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBCVUlMVF9JTl9DQUxMLFxuICAgICAgaGxqcy5pbmhlcml0KGhsanMuUVVPVEVfU1RSSU5HX01PREUsIHsgY29udGFpbnM6IFsgeyBiZWdpbjogJ1wiXCInIH0gXSB9KSxcbiAgICAgIGhsanMuQ09NTUVOVChcbiAgICAgICAgLycvLFxuICAgICAgICAvJC8sXG4gICAgICAgIHsgcmVsZXZhbmNlOiAwIH1cbiAgICAgICksXG4gICAgICBobGpzLkNfTlVNQkVSX01PREVcbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IHZic2NyaXB0IGFzIGRlZmF1bHQgfTtcbiJdfQ==