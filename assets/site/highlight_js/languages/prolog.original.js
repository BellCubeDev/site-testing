function prolog(hljs) {
    const ATOM = {
        begin: /[a-z][A-Za-z0-9_]*/,
        relevance: 0
    };
    const VAR = {
        className: 'symbol',
        variants: [
            { begin: /[A-Z][a-zA-Z0-9_]*/ },
            { begin: /_[A-Za-z0-9_]*/ }
        ],
        relevance: 0
    };
    const PARENTED = {
        begin: /\(/,
        end: /\)/,
        relevance: 0
    };
    const LIST = {
        begin: /\[/,
        end: /\]/
    };
    const LINE_COMMENT = {
        className: 'comment',
        begin: /%/,
        end: /$/,
        contains: [hljs.PHRASAL_WORDS_MODE]
    };
    const BACKTICK_STRING = {
        className: 'string',
        begin: /`/,
        end: /`/,
        contains: [hljs.BACKSLASH_ESCAPE]
    };
    const CHAR_CODE = {
        className: 'string',
        begin: /0'(\\'|.)/
    };
    const SPACE_CODE = {
        className: 'string',
        begin: /0'\\s/
    };
    const PRED_OP = {
        begin: /:-/
    };
    const inner = [
        ATOM,
        VAR,
        PARENTED,
        PRED_OP,
        LIST,
        LINE_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        BACKTICK_STRING,
        CHAR_CODE,
        SPACE_CODE,
        hljs.C_NUMBER_MODE
    ];
    PARENTED.contains = inner;
    LIST.contains = inner;
    return {
        name: 'Prolog',
        contains: inner.concat([
            {
                begin: /\.$/
            }
        ])
    };
}
export { prolog as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbG9nLmpzIiwic291cmNlUm9vdCI6Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9CZWxsQ3ViZURldi9zaXRlLXRlc3RpbmcvZGVwbG95bWVudC8iLCJzb3VyY2VzIjpbImFzc2V0cy9zaXRlL2hpZ2hsaWdodF9qcy9sYW5ndWFnZXMvcHJvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLFNBQVMsTUFBTSxDQUFDLElBQUk7SUFDbEIsTUFBTSxJQUFJLEdBQUc7UUFFWCxLQUFLLEVBQUUsb0JBQW9CO1FBQzNCLFNBQVMsRUFBRSxDQUFDO0tBQ2IsQ0FBQztJQUVGLE1BQU0sR0FBRyxHQUFHO1FBRVYsU0FBUyxFQUFFLFFBQVE7UUFDbkIsUUFBUSxFQUFFO1lBQ1IsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7WUFDL0IsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7U0FDNUI7UUFDRCxTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRztRQUVmLEtBQUssRUFBRSxJQUFJO1FBQ1gsR0FBRyxFQUFFLElBQUk7UUFDVCxTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFFRixNQUFNLElBQUksR0FBRztRQUVYLEtBQUssRUFBRSxJQUFJO1FBQ1gsR0FBRyxFQUFFLElBQUk7S0FDVixDQUFDO0lBRUYsTUFBTSxZQUFZLEdBQUc7UUFFbkIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsR0FBRztRQUNSLFFBQVEsRUFBRSxDQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBRTtLQUN0QyxDQUFDO0lBRUYsTUFBTSxlQUFlLEdBQUc7UUFFdEIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsR0FBRztRQUNSLFFBQVEsRUFBRSxDQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBRTtLQUNwQyxDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQUc7UUFDaEIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsS0FBSyxFQUFFLFdBQVc7S0FDbkIsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHO1FBQ2pCLFNBQVMsRUFBRSxRQUFRO1FBQ25CLEtBQUssRUFBRSxPQUFPO0tBQ2YsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHO1FBQ2QsS0FBSyxFQUFFLElBQUk7S0FBRSxDQUFDO0lBRWhCLE1BQU0sS0FBSyxHQUFHO1FBRVosSUFBSTtRQUNKLEdBQUc7UUFDSCxRQUFRO1FBQ1IsT0FBTztRQUNQLElBQUk7UUFDSixZQUFZO1FBQ1osSUFBSSxDQUFDLG9CQUFvQjtRQUN6QixJQUFJLENBQUMsaUJBQWlCO1FBQ3RCLElBQUksQ0FBQyxnQkFBZ0I7UUFDckIsZUFBZTtRQUNmLFNBQVM7UUFDVCxVQUFVO1FBQ1YsSUFBSSxDQUFDLGFBQWE7S0FDbkIsQ0FBQztJQUVGLFFBQVEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBRXRCLE9BQU87UUFDTCxJQUFJLEVBQUUsUUFBUTtRQUNkLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3JCO2dCQUNFLEtBQUssRUFBRSxLQUFLO2FBQUU7U0FDakIsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUHJvbG9nXG5EZXNjcmlwdGlvbjogUHJvbG9nIGlzIGEgZ2VuZXJhbCBwdXJwb3NlIGxvZ2ljIHByb2dyYW1taW5nIGxhbmd1YWdlIGFzc29jaWF0ZWQgd2l0aCBhcnRpZmljaWFsIGludGVsbGlnZW5jZSBhbmQgY29tcHV0YXRpb25hbCBsaW5ndWlzdGljcy5cbkF1dGhvcjogUmFpdm8gTGFhbmVtZXRzIDxyYWl2b0BpbmZkb3QuY29tPlxuV2Vic2l0ZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJvbG9nXG4qL1xuXG5mdW5jdGlvbiBwcm9sb2coaGxqcykge1xuICBjb25zdCBBVE9NID0ge1xuXG4gICAgYmVnaW46IC9bYS16XVtBLVphLXowLTlfXSovLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIGNvbnN0IFZBUiA9IHtcblxuICAgIGNsYXNzTmFtZTogJ3N5bWJvbCcsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46IC9bQS1aXVthLXpBLVowLTlfXSovIH0sXG4gICAgICB7IGJlZ2luOiAvX1tBLVphLXowLTlfXSovIH1cbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIGNvbnN0IFBBUkVOVEVEID0ge1xuXG4gICAgYmVnaW46IC9cXCgvLFxuICAgIGVuZDogL1xcKS8sXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgY29uc3QgTElTVCA9IHtcblxuICAgIGJlZ2luOiAvXFxbLyxcbiAgICBlbmQ6IC9cXF0vXG4gIH07XG5cbiAgY29uc3QgTElORV9DT01NRU5UID0ge1xuXG4gICAgY2xhc3NOYW1lOiAnY29tbWVudCcsXG4gICAgYmVnaW46IC8lLyxcbiAgICBlbmQ6IC8kLyxcbiAgICBjb250YWluczogWyBobGpzLlBIUkFTQUxfV09SRFNfTU9ERSBdXG4gIH07XG5cbiAgY29uc3QgQkFDS1RJQ0tfU1RSSU5HID0ge1xuXG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL2AvLFxuICAgIGVuZDogL2AvLFxuICAgIGNvbnRhaW5zOiBbIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSBdXG4gIH07XG5cbiAgY29uc3QgQ0hBUl9DT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ3N0cmluZycsIC8vIDAnYSBldGMuXG4gICAgYmVnaW46IC8wJyhcXFxcJ3wuKS9cbiAgfTtcblxuICBjb25zdCBTUEFDRV9DT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgYmVnaW46IC8wJ1xcXFxzLyAvLyAwJ1xcc1xuICB9O1xuXG4gIGNvbnN0IFBSRURfT1AgPSB7IC8vIHJlbGV2YW5jZSBib29zdGVyXG4gICAgYmVnaW46IC86LS8gfTtcblxuICBjb25zdCBpbm5lciA9IFtcblxuICAgIEFUT00sXG4gICAgVkFSLFxuICAgIFBBUkVOVEVELFxuICAgIFBSRURfT1AsXG4gICAgTElTVCxcbiAgICBMSU5FX0NPTU1FTlQsXG4gICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICBCQUNLVElDS19TVFJJTkcsXG4gICAgQ0hBUl9DT0RFLFxuICAgIFNQQUNFX0NPREUsXG4gICAgaGxqcy5DX05VTUJFUl9NT0RFXG4gIF07XG5cbiAgUEFSRU5URUQuY29udGFpbnMgPSBpbm5lcjtcbiAgTElTVC5jb250YWlucyA9IGlubmVyO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1Byb2xvZycsXG4gICAgY29udGFpbnM6IGlubmVyLmNvbmNhdChbXG4gICAgICB7IC8vIHJlbGV2YW5jZSBib29zdGVyXG4gICAgICAgIGJlZ2luOiAvXFwuJC8gfVxuICAgIF0pXG4gIH07XG59XG5cbmV4cG9ydCB7IHByb2xvZyBhcyBkZWZhdWx0IH07XG4iXX0=