function properties(hljs) {
    const WS0 = '[ \\t\\f]*';
    const WS1 = '[ \\t\\f]+';
    const EQUAL_DELIM = WS0 + '[:=]' + WS0;
    const WS_DELIM = WS1;
    const DELIM = '(' + EQUAL_DELIM + '|' + WS_DELIM + ')';
    const KEY = '([^\\\\:= \\t\\f\\n]|\\\\.)+';
    const DELIM_AND_VALUE = {
        end: DELIM,
        relevance: 0,
        starts: {
            className: 'string',
            end: /$/,
            relevance: 0,
            contains: [
                { begin: '\\\\\\\\' },
                { begin: '\\\\\\n' }
            ]
        }
    };
    return {
        name: '.properties',
        disableAutodetect: true,
        case_insensitive: true,
        illegal: /\S/,
        contains: [
            hljs.COMMENT('^\\s*[!#]', '$'),
            {
                returnBegin: true,
                variants: [
                    { begin: KEY + EQUAL_DELIM },
                    { begin: KEY + WS_DELIM }
                ],
                contains: [
                    {
                        className: 'attr',
                        begin: KEY,
                        endsParent: true
                    }
                ],
                starts: DELIM_AND_VALUE
            },
            {
                className: 'attr',
                begin: KEY + WS0 + '$'
            }
        ]
    };
}
export { properties as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQmVsbEN1YmVEZXYvc2l0ZS10ZXN0aW5nL2RlcGxveW1lbnQvIiwic291cmNlcyI6WyJhc3NldHMvc2l0ZS9oaWdobGlnaHRfanMvbGFuZ3VhZ2VzL3Byb3BlcnRpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsU0FBUyxVQUFVLENBQUMsSUFBSTtJQUV0QixNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUM7SUFDekIsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDO0lBRXpCLE1BQU0sV0FBVyxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUNyQixNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLDhCQUE4QixDQUFDO0lBRTNDLE1BQU0sZUFBZSxHQUFHO1FBRXRCLEdBQUcsRUFBRSxLQUFLO1FBQ1YsU0FBUyxFQUFFLENBQUM7UUFDWixNQUFNLEVBQUU7WUFFTixTQUFTLEVBQUUsUUFBUTtZQUNuQixHQUFHLEVBQUUsR0FBRztZQUNSLFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFO2dCQUNSLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRTtnQkFDckIsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO2FBQ3JCO1NBQ0Y7S0FDRixDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxhQUFhO1FBQ25CLGlCQUFpQixFQUFFLElBQUk7UUFDdkIsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixPQUFPLEVBQUUsSUFBSTtRQUNiLFFBQVEsRUFBRTtZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQztZQUc5QjtnQkFDRSxXQUFXLEVBQUUsSUFBSTtnQkFDakIsUUFBUSxFQUFFO29CQUNSLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxXQUFXLEVBQUU7b0JBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUU7aUJBQzFCO2dCQUNELFFBQVEsRUFBRTtvQkFDUjt3QkFDRSxTQUFTLEVBQUUsTUFBTTt3QkFDakIsS0FBSyxFQUFFLEdBQUc7d0JBQ1YsVUFBVSxFQUFFLElBQUk7cUJBQ2pCO2lCQUNGO2dCQUNELE1BQU0sRUFBRSxlQUFlO2FBQ3hCO1lBRUQ7Z0JBQ0UsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLEtBQUssRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7YUFDdkI7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLFVBQVUsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogLnByb3BlcnRpZXNcbkNvbnRyaWJ1dG9yczogVmFsZW50aW4gQWl0a2VuIDx2YWxlbnRpbkBuYWxpc2JnLmNvbT4sIEVnb3IgUm9nb3YgPGUucm9nb3ZAcG9zdGdyZXNwcm8ucnU+XG5XZWJzaXRlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS8ucHJvcGVydGllc1xuQ2F0ZWdvcnk6IGNvbmZpZ1xuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIHByb3BlcnRpZXMoaGxqcykge1xuICAvLyB3aGl0ZXNwYWNlczogc3BhY2UsIHRhYiwgZm9ybWZlZWRcbiAgY29uc3QgV1MwID0gJ1sgXFxcXHRcXFxcZl0qJztcbiAgY29uc3QgV1MxID0gJ1sgXFxcXHRcXFxcZl0rJztcbiAgLy8gZGVsaW1pdGVyXG4gIGNvbnN0IEVRVUFMX0RFTElNID0gV1MwICsgJ1s6PV0nICsgV1MwO1xuICBjb25zdCBXU19ERUxJTSA9IFdTMTtcbiAgY29uc3QgREVMSU0gPSAnKCcgKyBFUVVBTF9ERUxJTSArICd8JyArIFdTX0RFTElNICsgJyknO1xuICBjb25zdCBLRVkgPSAnKFteXFxcXFxcXFw6PSBcXFxcdFxcXFxmXFxcXG5dfFxcXFxcXFxcLikrJztcblxuICBjb25zdCBERUxJTV9BTkRfVkFMVUUgPSB7XG4gICAgLy8gc2tpcCBERUxJTVxuICAgIGVuZDogREVMSU0sXG4gICAgcmVsZXZhbmNlOiAwLFxuICAgIHN0YXJ0czoge1xuICAgICAgLy8gdmFsdWU6IGV2ZXJ5dGhpbmcgdW50aWwgZW5kIG9mIGxpbmUgKGFnYWluLCB0YWtpbmcgaW50byBhY2NvdW50IGJhY2tzbGFzaGVzKVxuICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgIGVuZDogLyQvLFxuICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgeyBiZWdpbjogJ1xcXFxcXFxcXFxcXFxcXFwnIH0sXG4gICAgICAgIHsgYmVnaW46ICdcXFxcXFxcXFxcXFxuJyB9XG4gICAgICBdXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJy5wcm9wZXJ0aWVzJyxcbiAgICBkaXNhYmxlQXV0b2RldGVjdDogdHJ1ZSxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGlsbGVnYWw6IC9cXFMvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkNPTU1FTlQoJ15cXFxccypbISNdJywgJyQnKSxcbiAgICAgIC8vIGtleTogZXZlcnl0aGluZyB1bnRpbCB3aGl0ZXNwYWNlIG9yID0gb3IgOiAodGFraW5nIGludG8gYWNjb3VudCBiYWNrc2xhc2hlcylcbiAgICAgIC8vIGNhc2Ugb2YgYSBrZXktdmFsdWUgcGFpclxuICAgICAge1xuICAgICAgICByZXR1cm5CZWdpbjogdHJ1ZSxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICB7IGJlZ2luOiBLRVkgKyBFUVVBTF9ERUxJTSB9LFxuICAgICAgICAgIHsgYmVnaW46IEtFWSArIFdTX0RFTElNIH1cbiAgICAgICAgXSxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdhdHRyJyxcbiAgICAgICAgICAgIGJlZ2luOiBLRVksXG4gICAgICAgICAgICBlbmRzUGFyZW50OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzdGFydHM6IERFTElNX0FORF9WQUxVRVxuICAgICAgfSxcbiAgICAgIC8vIGNhc2Ugb2YgYW4gZW1wdHkga2V5XG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2F0dHInLFxuICAgICAgICBiZWdpbjogS0VZICsgV1MwICsgJyQnXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBwcm9wZXJ0aWVzIGFzIGRlZmF1bHQgfTtcbiJdfQ==