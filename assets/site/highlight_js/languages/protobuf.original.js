function protobuf(hljs) {
    const KEYWORDS = [
        "package",
        "import",
        "option",
        "optional",
        "required",
        "repeated",
        "group",
        "oneof"
    ];
    const TYPES = [
        "double",
        "float",
        "int32",
        "int64",
        "uint32",
        "uint64",
        "sint32",
        "sint64",
        "fixed32",
        "fixed64",
        "sfixed32",
        "sfixed64",
        "bool",
        "string",
        "bytes"
    ];
    const CLASS_DEFINITION = {
        match: [
            /(message|enum|service)\s+/,
            hljs.IDENT_RE
        ],
        scope: {
            1: "keyword",
            2: "title.class"
        }
    };
    return {
        name: 'Protocol Buffers',
        keywords: {
            keyword: KEYWORDS,
            type: TYPES,
            literal: [
                'true',
                'false'
            ]
        },
        contains: [
            hljs.QUOTE_STRING_MODE,
            hljs.NUMBER_MODE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            CLASS_DEFINITION,
            {
                className: 'function',
                beginKeywords: 'rpc',
                end: /[{;]/,
                excludeEnd: true,
                keywords: 'rpc returns'
            },
            {
                begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
            }
        ]
    };
}
export { protobuf as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9idWYuanMiLCJzb3VyY2VSb290IjoiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JlbGxDdWJlRGV2L3NpdGUtdGVzdGluZy9kZXBsb3ltZW50LyIsInNvdXJjZXMiOlsiYXNzZXRzL3NpdGUvaGlnaGxpZ2h0X2pzL2xhbmd1YWdlcy9wcm90b2J1Zi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxTQUFTLFFBQVEsQ0FBQyxJQUFJO0lBQ3BCLE1BQU0sUUFBUSxHQUFHO1FBQ2YsU0FBUztRQUNULFFBQVE7UUFDUixRQUFRO1FBQ1IsVUFBVTtRQUNWLFVBQVU7UUFDVixVQUFVO1FBQ1YsT0FBTztRQUNQLE9BQU87S0FDUixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUc7UUFDWixRQUFRO1FBQ1IsT0FBTztRQUNQLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFNBQVM7UUFDVCxTQUFTO1FBQ1QsVUFBVTtRQUNWLFVBQVU7UUFDVixNQUFNO1FBQ04sUUFBUTtRQUNSLE9BQU87S0FDUixDQUFDO0lBQ0YsTUFBTSxnQkFBZ0IsR0FBRztRQUN2QixLQUFLLEVBQUU7WUFDTCwyQkFBMkI7WUFDM0IsSUFBSSxDQUFDLFFBQVE7U0FDZDtRQUNELEtBQUssRUFBRTtZQUNMLENBQUMsRUFBRSxTQUFTO1lBQ1osQ0FBQyxFQUFFLGFBQWE7U0FDakI7S0FDRixDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLFFBQVE7WUFDakIsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUU7Z0JBQ1AsTUFBTTtnQkFDTixPQUFPO2FBQ1I7U0FDRjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksQ0FBQyxpQkFBaUI7WUFDdEIsSUFBSSxDQUFDLFdBQVc7WUFDaEIsSUFBSSxDQUFDLG1CQUFtQjtZQUN4QixJQUFJLENBQUMsb0JBQW9CO1lBQ3pCLGdCQUFnQjtZQUNoQjtnQkFDRSxTQUFTLEVBQUUsVUFBVTtnQkFDckIsYUFBYSxFQUFFLEtBQUs7Z0JBQ3BCLEdBQUcsRUFBRSxNQUFNO2dCQUNYLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixRQUFRLEVBQUUsYUFBYTthQUN4QjtZQUNEO2dCQUVFLEtBQUssRUFBRSw2QkFBNkI7YUFBRTtTQUN6QztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLFFBQVEsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUHJvdG9jb2wgQnVmZmVyc1xuQXV0aG9yOiBEYW4gVGFvIDxkYW5pZWwudGFvQGdtYWlsLmNvbT5cbkRlc2NyaXB0aW9uOiBQcm90b2NvbCBidWZmZXIgbWVzc2FnZSBkZWZpbml0aW9uIGZvcm1hdFxuV2Vic2l0ZTogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL3Byb3RvM1xuQ2F0ZWdvcnk6IHByb3RvY29sc1xuKi9cblxuZnVuY3Rpb24gcHJvdG9idWYoaGxqcykge1xuICBjb25zdCBLRVlXT1JEUyA9IFtcbiAgICBcInBhY2thZ2VcIixcbiAgICBcImltcG9ydFwiLFxuICAgIFwib3B0aW9uXCIsXG4gICAgXCJvcHRpb25hbFwiLFxuICAgIFwicmVxdWlyZWRcIixcbiAgICBcInJlcGVhdGVkXCIsXG4gICAgXCJncm91cFwiLFxuICAgIFwib25lb2ZcIlxuICBdO1xuICBjb25zdCBUWVBFUyA9IFtcbiAgICBcImRvdWJsZVwiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcImludDMyXCIsXG4gICAgXCJpbnQ2NFwiLFxuICAgIFwidWludDMyXCIsXG4gICAgXCJ1aW50NjRcIixcbiAgICBcInNpbnQzMlwiLFxuICAgIFwic2ludDY0XCIsXG4gICAgXCJmaXhlZDMyXCIsXG4gICAgXCJmaXhlZDY0XCIsXG4gICAgXCJzZml4ZWQzMlwiLFxuICAgIFwic2ZpeGVkNjRcIixcbiAgICBcImJvb2xcIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwiYnl0ZXNcIlxuICBdO1xuICBjb25zdCBDTEFTU19ERUZJTklUSU9OID0ge1xuICAgIG1hdGNoOiBbXG4gICAgICAvKG1lc3NhZ2V8ZW51bXxzZXJ2aWNlKVxccysvLFxuICAgICAgaGxqcy5JREVOVF9SRVxuICAgIF0sXG4gICAgc2NvcGU6IHtcbiAgICAgIDE6IFwia2V5d29yZFwiLFxuICAgICAgMjogXCJ0aXRsZS5jbGFzc1wiXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1Byb3RvY29sIEJ1ZmZlcnMnLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICBrZXl3b3JkOiBLRVlXT1JEUyxcbiAgICAgIHR5cGU6IFRZUEVTLFxuICAgICAgbGl0ZXJhbDogW1xuICAgICAgICAndHJ1ZScsXG4gICAgICAgICdmYWxzZSdcbiAgICAgIF1cbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgaGxqcy5OVU1CRVJfTU9ERSxcbiAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICBDTEFTU19ERUZJTklUSU9OLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdycGMnLFxuICAgICAgICBlbmQ6IC9beztdLyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAga2V5d29yZHM6ICdycGMgcmV0dXJucydcbiAgICAgIH0sXG4gICAgICB7IC8vIG1hdGNoIGVudW0gaXRlbXMgKHJlbGV2YW5jZSlcbiAgICAgICAgLy8gQkxBSCA9IC4uLjtcbiAgICAgICAgYmVnaW46IC9eXFxzKltBLVpfXSsoPz1cXHMqPVteXFxuXSs7JCkvIH1cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IHByb3RvYnVmIGFzIGRlZmF1bHQgfTtcbiJdfQ==