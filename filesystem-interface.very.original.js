export class InvalidNameError extends Error {
    constructor(message, cause) {
        super(`${message} (Offending name: "${cause}")`);
        this.name = 'InvalidNameError';
        this.cause = cause;
    }
}
export function getFolderFromFolder(create, target, prop) {
    if (!prop)
        throw new InvalidNameError('Folder name cannot be empty.', prop);
    const name = prop.trim().toLowerCase();
    if (!(name in target)) {
        const dir = (async () => {
            try {
                const handle = this.handle.getDirectoryHandle(prop, { create }).catch(e => {
                    if (!(e instanceof Error))
                        throw e;
                    if (e instanceof DOMException && e.name === 'NotFoundError') {
                        delete this.childDirsC[name];
                        return null;
                    }
                    else if (e instanceof InvalidNameError || e.message === 'Name is not allowed.' || e.message === 'Cannot get a file with an empty name.')
                        throw new InvalidNameError('Folder name is not allowed.', prop);
                    else
                        throw e;
                });
                if (handle === null)
                    return null;
                return new BellFolder(await this.handle.getDirectoryHandle(prop, { create }));
            }
            catch (e) {
                if (e instanceof DOMException && e.name === 'NotFoundError') {
                    delete this.childDirsC[name];
                    return null;
                }
                else
                    throw e;
            }
        })();
        this.childDirs[name] = dir;
        this.childDirsC[name] = dir;
    }
    return target[name];
}
export function getFileFromFolder(create, target, prop) {
    if (!prop)
        throw new Error('Cannot get a file with an empty name.', { cause: 'invalid-argument' });
    const name = prop.trim().toLowerCase();
    if (!(name in target) || target[name] === null) {
        const handle = this.handle.getFileHandle(prop, { create }).catch(e => {
            if (e instanceof DOMException && e.name === 'NotFoundError') {
                delete this.childFilesC[name];
                return null;
            }
            else if (e instanceof TypeError && e.message === 'Name is not allowed.')
                throw new InvalidNameError('File name is not allowed.', prop);
            else
                throw e;
        }).then(handle => handle ? new BellFile(handle) : null);
        this.childFiles[name] = handle;
        this.childFilesC[name] = handle;
    }
    return target[name];
}
export class BellFolder {
    handle;
    childDirs = new Proxy({}, {
        get: getFolderFromFolder.bind(this, false),
    });
    childDirsC = new Proxy({}, {
        get: getFolderFromFolder.bind(this, true),
    });
    childFiles = new Proxy({}, {
        get: getFileFromFolder.bind(this, false),
    });
    childFilesC = new Proxy({}, {
        get: getFileFromFolder.bind(this, true),
    });
    async getFile(name, create) {
        const parts = name.split('/');
        parts.forEach((part, index, arr) => {
            const parts2 = part.split('\\');
            arr.splice(index, 1, ...parts2);
        });
        const debug_fullPath = [...parts];
        const fileName = parts.pop();
        if (!fileName)
            throw new InvalidNameError('File name is empty.', name);
        const pathItems = [];
        let currentFolder = this;
        for (let i = 0; i < parts.length; i++) {
            const debug_targetPath = parts.slice(0, i + 1).join('/');
            try {
                currentFolder = await currentFolder[create ? 'childDirsC' : 'childDirs'][parts[i]];
                if (!currentFolder)
                    return null;
                pathItems.push(currentFolder);
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                if (e instanceof InvalidNameError || e.message === 'Name is not allowed.' || e.message === 'Cannot get a file with an empty name.') {
                    console.info(`Could not get folder "${debug_targetPath}" for file due to invalid name:`, debug_fullPath, e);
                    throw e;
                }
                else if (e instanceof DOMException && e.name === 'NotFoundError')
                    console.info(`Could not find folder "${debug_targetPath}" for file:`, debug_fullPath, e);
                else
                    console.error(`Error getting folder "${debug_targetPath}" for file:`, debug_fullPath, e);
                return null;
            }
        }
        try {
            const lastItem = await currentFolder[create ? 'childFilesC' : 'childFiles'][fileName];
            if (!lastItem)
                return null;
            pathItems.push(lastItem);
            return pathItems;
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            if (e instanceof InvalidNameError || e.message === 'Name is not allowed.' || e.message === 'Cannot get a file with an empty name.') {
                console.info(`Could not get file "${fileName}" due to invalid name:`, debug_fullPath, e);
                throw e;
            }
            else if (e instanceof DOMException && e.name === 'NotFoundError')
                console.info(`Could not find file "${debug_fullPath}"`, e);
            else
                console.error(`Error getting file "${debug_fullPath}"`, e);
            return null;
        }
    }
    async openFilePicker(options) {
        try {
            const files = await (options?.save ? window.showSaveFilePicker(options) : window.showOpenFilePicker(options));
            if (!files)
                return [];
            if (files instanceof FileSystemFileHandle)
                return [new BellFile(files)];
            return files.map(file => new BellFile(file));
        }
        catch (e) {
            console.debug('Error opening file picker:', e);
            return [];
        }
    }
    async resolveChildPath(child, returnNull = false) {
        try {
            if (child.file instanceof File)
                throw new Error('Cannot resolve child path of a File object');
            const resolved = await this.handle.resolve(child.file);
            if (resolved === null)
                throw new Error('Could not resolve child path');
            return resolved;
        }
        catch (e) {
            if (returnNull)
                return null;
            throw e;
        }
    }
    constructor(handle) {
        this.handle = handle;
    }
}
export class BellFile {
    file;
    constructor(handle) {
        this.file = handle;
    }
    static async read(file, key) {
        key ??= 'readAsText';
        const reader = new FileReader();
        if (!(key in reader && typeof reader[key] === 'function'))
            throw new Error(`Invalid key "${key}"`);
        reader[key](file);
        return await new Promise((resolve, reject) => {
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.onabort = reject;
        });
    }
    async readAsText() {
        return await BellFile.read(this.file instanceof File ? this.file : await this.file.getFile(), 'readAsText');
    }
    async readAsArrayBuffer() {
        return await BellFile.read(this.file instanceof File ? this.file : await this.file.getFile(), 'readAsArrayBuffer');
    }
    async readAsDataURL() {
        return await BellFile.read(this.file instanceof File ? this.file : await this.file.getFile(), 'readAsDataURL');
    }
    async readAsBinaryString() {
        return await BellFile.read(this.file instanceof File ? this.file : await this.file.getFile(), 'readAsBinaryString');
    }
    static async write(file, ...params) {
        const writer = await file.createWritable();
        await writer.write(...params);
        await writer.close();
    }
    async write(...params) {
        if (this.file instanceof File)
            throw new Error('Cannot write to a File object');
        return await BellFile.write(this.file, ...params);
    }
}
export class writeableFolder extends BellFolder {
    constructor(handle, SUPER_IMPORTANT__IS_THIS_FOLDER_WRITEABLE) {
        if (SUPER_IMPORTANT__IS_THIS_FOLDER_WRITEABLE !== true)
            throw new Error("This folder is not writeable!");
        super(handle);
    }
}
export async function getUserPickedFolder(write) {
    const permStr = `read${write ? 'write' : ''}`;
    let thisHandle;
    try {
        thisHandle = await window.showDirectoryPicker({ mode: permStr });
    }
    catch (e) {
        if (!(e instanceof DOMException && e.name === 'AbortError'))
            throw e;
        console.info('User cancelled the folder picker');
        return null;
    }
    let permState = await thisHandle.queryPermission({ mode: permStr });
    if (permState !== 'granted')
        permState = await thisHandle.requestPermission({ mode: permStr });
    if (permState === 'granted')
        return write ?
            new writeableFolder(thisHandle, true) :
            new BellFolder(thisHandle);
    else {
        console.info(`Permission denied: current state is ${permState}`);
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,